import { cryptoBoxEasy } from "./crypto-box-easy.js";
import { cryptoBoxKeyPair } from "./crypto-box-key-pair.js";
import { cryptoBoxOpenEasy } from "./crypto-box-open-easy.js";
import { cryptoBoxSealOpen } from "./crypto-box-seal-open.js";
import { cryptoBoxSeal } from "./crypto-box-seal.js";
import { cryptoSignDetached } from "./crypto-sign-detached.js";
import { cryptoSignKeyPair } from "./crypto-sign-key-pair.js";
import { cryptoSignVerifyDetached } from "./crypto-sign-verify-detached.js";
export function crypto_box_easy(message, nonce, publicKey, privateKey, outputFormat) {
    if (typeof message === "string") {
        throw new Error("string message not supported");
    }
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoBoxEasy({
        message,
        nonce,
        publicKey,
        privateKey,
    });
}
export function crypto_box_keypair(outputFormat) {
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoBoxKeyPair();
}
export function crypto_box_open_easy(ciphertext, nonce, publicKey, privateKey, outputFormat) {
    if (typeof ciphertext === "string") {
        throw new Error("string ciphertext not supported");
    }
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoBoxOpenEasy({
        ciphertext,
        nonce,
        publicKey,
        privateKey,
    });
}
export function crypto_box_seal(message, publicKey, outputFormat) {
    if (typeof message === "string") {
        throw new Error("string message not supported");
    }
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoBoxSeal({
        message,
        publicKey,
    });
}
export function crypto_box_seal_open(ciphertext, publicKey, privateKey, outputFormat) {
    if (typeof ciphertext === "string") {
        throw new Error("string ciphertext not supported");
    }
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoBoxSealOpen({
        ciphertext,
        privateKey,
        publicKey,
    });
}
export function crypto_sign_keypair(outputFormat) {
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoSignKeyPair();
}
export function crypto_sign_detached(message, privateKey, outputFormat) {
    if (typeof message === "string") {
        throw new Error("string message not supported");
    }
    if (outputFormat === "hex" ||
        outputFormat === "base64" ||
        outputFormat === "text") {
        throw new Error("StringOutputFormat not supported");
    }
    return cryptoSignDetached({
        message,
        privateKey,
    });
}
export function crypto_sign_verify_detached(signature, message, publicKey) {
    if (typeof message === "string") {
        throw new Error("string message not supported");
    }
    return cryptoSignVerifyDetached({
        signature,
        message,
        publicKey,
    });
}
//# sourceMappingURL=wrappers.js.map