{
  "version": 3,
  "sources": ["../../@graphprotocol/grc-20/src/types.ts", "../../@graphprotocol/grc-20/src/id.ts", "../../@graphprotocol/grc-20/src/abis/space.ts", "../../@graphprotocol/grc-20/src/abis/main-voting.ts", "../../@graphprotocol/grc-20/src/abis/personal-space-admin.ts", "../../@graphprotocol/grc-20/src/encodings/get-process-geo-proposal-arguments.ts", "../../@graphprotocol/grc-20/src/encodings/get-accept-subspace-arguments.ts", "../../@graphprotocol/grc-20/src/encodings/get-remove-subspace-arguments.ts", "../../@graphprotocol/grc-20/src/encodings/get-accept-editor-arguments.ts", "../../@graphprotocol/grc-20/src/encodings/get-remove-editor-arguments.ts", "../../@graphprotocol/grc-20/src/encodings/get-calldata-for-space-governance-type.ts", "../../@graphprotocol/grc-20/src/core/account.ts", "../../@graphprotocol/grc-20/src/core/ids/system.ts", "../../@graphprotocol/grc-20/src/graph/create-relation.ts", "../../@graphprotocol/grc-20/src/graph/create-entity.ts", "../../@graphprotocol/grc-20/src/core/get-checksum-address.ts", "../../@graphprotocol/grc-20/src/core/ids/network.ts", "../../@graphprotocol/grc-20/src/core/blocks/data.ts", "../../@graphprotocol/grc-20/src/graph/update-entity.ts", "../../@graphprotocol/grc-20/src/core/ids/content.ts", "../../@graphprotocol/grc-20/src/core/blocks/text.ts", "../../@graphprotocol/grc-20/src/encoding.ts", "../../@graphprotocol/grc-20/src/graph/constants.ts", "../../@graphprotocol/grc-20/src/graph/index.ts", "../../@graphprotocol/grc-20/src/ipfs.ts", "../../fflate/esm/browser.js", "../../image-size/dist/index.mjs", "../../@bufbuild/protobuf/dist/esm/private/assert.js", "../../@bufbuild/protobuf/dist/esm/private/enum.js", "../../@bufbuild/protobuf/dist/esm/message.js", "../../@bufbuild/protobuf/dist/esm/private/message-type.js", "../../@bufbuild/protobuf/dist/esm/google/varint.js", "../../@bufbuild/protobuf/dist/esm/proto-int64.js", "../../@bufbuild/protobuf/dist/esm/scalar.js", "../../@bufbuild/protobuf/dist/esm/private/scalars.js", "../../@bufbuild/protobuf/dist/esm/binary-encoding.js", "../../@bufbuild/protobuf/dist/esm/private/extensions.js", "../../@bufbuild/protobuf/dist/esm/proto-base64.js", "../../@bufbuild/protobuf/dist/esm/extension-accessor.js", "../../@bufbuild/protobuf/dist/esm/private/reflect.js", "../../@bufbuild/protobuf/dist/esm/is-message.js", "../../@bufbuild/protobuf/dist/esm/private/field-wrapper.js", "../../@bufbuild/protobuf/dist/esm/private/json-format.js", "../../@bufbuild/protobuf/dist/esm/private/binary-format.js", "../../@bufbuild/protobuf/dist/esm/private/util-common.js", "../../@bufbuild/protobuf/dist/esm/private/proto-runtime.js", "../../@bufbuild/protobuf/dist/esm/private/field-list.js", "../../@bufbuild/protobuf/dist/esm/private/names.js", "../../@bufbuild/protobuf/dist/esm/private/field.js", "../../@bufbuild/protobuf/dist/esm/private/field-normalize.js", "../../@bufbuild/protobuf/dist/esm/proto3.js", "../../@bufbuild/protobuf/dist/esm/proto2.js", "../../@bufbuild/protobuf/dist/esm/proto-double.js", "../../@bufbuild/protobuf/dist/esm/service-type.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/descriptor_pb.js", "../../@bufbuild/protobuf/dist/esm/create-descriptor-set.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/timestamp_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/duration_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/any_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/empty_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/field_mask_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/struct_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/wrappers_pb.js", "../../@bufbuild/protobuf/dist/esm/create-registry-from-desc.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/compiler/plugin_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/source_context_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/type_pb.js", "../../@bufbuild/protobuf/dist/esm/google/protobuf/api_pb.js", "../../@graphprotocol/grc-20/src/proto/gen/src/proto/ipfs_pb.ts", "../../@graphprotocol/grc-20/src/proto/edit.ts", "../../@graphprotocol/grc-20/src/graph/create-image.ts", "../../@graphprotocol/grc-20/src/graph/create-property.ts", "../../@graphprotocol/grc-20/src/graph/create-space.ts", "../../@graphprotocol/grc-20/src/graph/create-type.ts", "../../@graphprotocol/grc-20/src/graph/delete-relation.ts", "../../@graphprotocol/grc-20/src/graph/serialize.ts", "../../@graphprotocol/grc-20/src/graph/unset-entity-values.ts", "../../@graphprotocol/grc-20/src/graph/unset-relation-fields.ts", "../../@graphprotocol/grc-20/src/core/position.ts", "../../fractional-indexing-jittered/lib/index.js", "../../@graphprotocol/grc-20/src/core/scheme.ts", "../../@graphprotocol/grc-20/src/smart-wallet.ts", "../../@graphprotocol/grc-20/src/core/base58.ts"],
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n", "// lib/types/utils.ts\nvar decoder = new TextDecoder();\nvar toUTF8String = (input, start = 0, end = input.length) => decoder.decode(input.slice(start, end));\nvar toHexString = (input, start = 0, end = input.length) => input.slice(start, end).reduce((memo, i) => memo + `0${i.toString(16)}`.slice(-2), \"\");\nvar getView = (input, offset) => new DataView(input.buffer, input.byteOffset + offset);\nvar readInt16LE = (input, offset = 0) => getView(input, offset).getInt16(0, true);\nvar readUInt16BE = (input, offset = 0) => getView(input, offset).getUint16(0, false);\nvar readUInt16LE = (input, offset = 0) => getView(input, offset).getUint16(0, true);\nvar readUInt24LE = (input, offset = 0) => {\n  const view = getView(input, offset);\n  return view.getUint16(0, true) + (view.getUint8(2) << 16);\n};\nvar readInt32LE = (input, offset = 0) => getView(input, offset).getInt32(0, true);\nvar readUInt32BE = (input, offset = 0) => getView(input, offset).getUint32(0, false);\nvar readUInt32LE = (input, offset = 0) => getView(input, offset).getUint32(0, true);\nvar readUInt64 = (input, offset, isBigEndian) => getView(input, offset).getBigUint64(0, !isBigEndian);\nvar methods = {\n  readUInt16BE,\n  readUInt16LE,\n  readUInt32BE,\n  readUInt32LE\n};\nfunction readUInt(input, bits, offset = 0, isBigEndian = false) {\n  const endian = isBigEndian ? \"BE\" : \"LE\";\n  const methodName = `readUInt${bits}${endian}`;\n  return methods[methodName](input, offset);\n}\nfunction readBox(input, offset) {\n  if (input.length - offset < 4) return;\n  const boxSize = readUInt32BE(input, offset);\n  if (input.length - offset < boxSize) return;\n  return {\n    name: toUTF8String(input, 4 + offset, 8 + offset),\n    offset,\n    size: boxSize\n  };\n}\nfunction findBox(input, boxName, currentOffset) {\n  while (currentOffset < input.length) {\n    const box = readBox(input, currentOffset);\n    if (!box) break;\n    if (box.name === boxName) return box;\n    currentOffset += box.size > 0 ? box.size : 8;\n  }\n}\n\n// lib/types/bmp.ts\nvar BMP = {\n  validate: (input) => toUTF8String(input, 0, 2) === \"BM\",\n  calculate: (input) => ({\n    height: Math.abs(readInt32LE(input, 22)),\n    width: readUInt32LE(input, 18)\n  })\n};\n\n// lib/types/ico.ts\nvar TYPE_ICON = 1;\nvar SIZE_HEADER = 2 + 2 + 2;\nvar SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4;\nfunction getSizeFromOffset(input, offset) {\n  const value = input[offset];\n  return value === 0 ? 256 : value;\n}\nfunction getImageSize(input, imageIndex) {\n  const offset = SIZE_HEADER + imageIndex * SIZE_IMAGE_ENTRY;\n  return {\n    height: getSizeFromOffset(input, offset + 1),\n    width: getSizeFromOffset(input, offset)\n  };\n}\nvar ICO = {\n  validate(input) {\n    const reserved = readUInt16LE(input, 0);\n    const imageCount = readUInt16LE(input, 4);\n    if (reserved !== 0 || imageCount === 0) return false;\n    const imageType = readUInt16LE(input, 2);\n    return imageType === TYPE_ICON;\n  },\n  calculate(input) {\n    const nbImages = readUInt16LE(input, 4);\n    const imageSize2 = getImageSize(input, 0);\n    if (nbImages === 1) return imageSize2;\n    const images = [];\n    for (let imageIndex = 0; imageIndex < nbImages; imageIndex += 1) {\n      images.push(getImageSize(input, imageIndex));\n    }\n    return {\n      width: imageSize2.width,\n      height: imageSize2.height,\n      images\n    };\n  }\n};\n\n// lib/types/cur.ts\nvar TYPE_CURSOR = 2;\nvar CUR = {\n  validate(input) {\n    const reserved = readUInt16LE(input, 0);\n    const imageCount = readUInt16LE(input, 4);\n    if (reserved !== 0 || imageCount === 0) return false;\n    const imageType = readUInt16LE(input, 2);\n    return imageType === TYPE_CURSOR;\n  },\n  calculate: (input) => ICO.calculate(input)\n};\n\n// lib/types/dds.ts\nvar DDS = {\n  validate: (input) => readUInt32LE(input, 0) === 542327876,\n  calculate: (input) => ({\n    height: readUInt32LE(input, 12),\n    width: readUInt32LE(input, 16)\n  })\n};\n\n// lib/types/gif.ts\nvar gifRegexp = /^GIF8[79]a/;\nvar GIF = {\n  validate: (input) => gifRegexp.test(toUTF8String(input, 0, 6)),\n  calculate: (input) => ({\n    height: readUInt16LE(input, 8),\n    width: readUInt16LE(input, 6)\n  })\n};\n\n// lib/types/heif.ts\nvar brandMap = {\n  avif: \"avif\",\n  mif1: \"heif\",\n  msf1: \"heif\",\n  // heif-sequence\n  heic: \"heic\",\n  heix: \"heic\",\n  hevc: \"heic\",\n  // heic-sequence\n  hevx: \"heic\"\n  // heic-sequence\n};\nvar HEIF = {\n  validate(input) {\n    const boxType = toUTF8String(input, 4, 8);\n    if (boxType !== \"ftyp\") return false;\n    const ftypBox = findBox(input, \"ftyp\", 0);\n    if (!ftypBox) return false;\n    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12);\n    return brand in brandMap;\n  },\n  calculate(input) {\n    const metaBox = findBox(input, \"meta\", 0);\n    const iprpBox = metaBox && findBox(input, \"iprp\", metaBox.offset + 12);\n    const ipcoBox = iprpBox && findBox(input, \"ipco\", iprpBox.offset + 8);\n    if (!ipcoBox) {\n      throw new TypeError(\"Invalid HEIF, no ipco box found\");\n    }\n    const type = toUTF8String(input, 8, 12);\n    const images = [];\n    let currentOffset = ipcoBox.offset + 8;\n    while (currentOffset < ipcoBox.offset + ipcoBox.size) {\n      const ispeBox = findBox(input, \"ispe\", currentOffset);\n      if (!ispeBox) break;\n      const rawWidth = readUInt32BE(input, ispeBox.offset + 12);\n      const rawHeight = readUInt32BE(input, ispeBox.offset + 16);\n      const clapBox = findBox(input, \"clap\", currentOffset);\n      let width = rawWidth;\n      let height = rawHeight;\n      if (clapBox && clapBox.offset < ipcoBox.offset + ipcoBox.size) {\n        const cropRight = readUInt32BE(input, clapBox.offset + 12);\n        width = rawWidth - cropRight;\n      }\n      images.push({ height, width });\n      currentOffset = ispeBox.offset + ispeBox.size;\n    }\n    if (images.length === 0) {\n      throw new TypeError(\"Invalid HEIF, no sizes found\");\n    }\n    return {\n      width: images[0].width,\n      height: images[0].height,\n      type,\n      ...images.length > 1 ? { images } : {}\n    };\n  }\n};\n\n// lib/types/icns.ts\nvar SIZE_HEADER2 = 4 + 4;\nvar FILE_LENGTH_OFFSET = 4;\nvar ENTRY_LENGTH_OFFSET = 4;\nvar ICON_TYPE_SIZE = {\n  ICON: 32,\n  \"ICN#\": 32,\n  // m => 16 x 16\n  \"icm#\": 16,\n  icm4: 16,\n  icm8: 16,\n  // s => 16 x 16\n  \"ics#\": 16,\n  ics4: 16,\n  ics8: 16,\n  is32: 16,\n  s8mk: 16,\n  icp4: 16,\n  // l => 32 x 32\n  icl4: 32,\n  icl8: 32,\n  il32: 32,\n  l8mk: 32,\n  icp5: 32,\n  ic11: 32,\n  // h => 48 x 48\n  ich4: 48,\n  ich8: 48,\n  ih32: 48,\n  h8mk: 48,\n  // . => 64 x 64\n  icp6: 64,\n  ic12: 32,\n  // t => 128 x 128\n  it32: 128,\n  t8mk: 128,\n  ic07: 128,\n  // . => 256 x 256\n  ic08: 256,\n  ic13: 256,\n  // . => 512 x 512\n  ic09: 512,\n  ic14: 512,\n  // . => 1024 x 1024\n  ic10: 1024\n};\nfunction readImageHeader(input, imageOffset) {\n  const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;\n  return [\n    toUTF8String(input, imageOffset, imageLengthOffset),\n    readUInt32BE(input, imageLengthOffset)\n  ];\n}\nfunction getImageSize2(type) {\n  const size = ICON_TYPE_SIZE[type];\n  return { width: size, height: size, type };\n}\nvar ICNS = {\n  validate: (input) => toUTF8String(input, 0, 4) === \"icns\",\n  calculate(input) {\n    const inputLength = input.length;\n    const fileLength = readUInt32BE(input, FILE_LENGTH_OFFSET);\n    let imageOffset = SIZE_HEADER2;\n    const images = [];\n    while (imageOffset < fileLength && imageOffset < inputLength) {\n      const imageHeader = readImageHeader(input, imageOffset);\n      const imageSize2 = getImageSize2(imageHeader[0]);\n      images.push(imageSize2);\n      imageOffset += imageHeader[1];\n    }\n    if (images.length === 0) {\n      throw new TypeError(\"Invalid ICNS, no sizes found\");\n    }\n    return {\n      width: images[0].width,\n      height: images[0].height,\n      ...images.length > 1 ? { images } : {}\n    };\n  }\n};\n\n// lib/types/j2c.ts\nvar J2C = {\n  // TODO: this doesn't seem right. SIZ marker doesn't have to be right after the SOC\n  validate: (input) => readUInt32BE(input, 0) === 4283432785,\n  calculate: (input) => ({\n    height: readUInt32BE(input, 12),\n    width: readUInt32BE(input, 8)\n  })\n};\n\n// lib/types/jp2.ts\nvar JP2 = {\n  validate(input) {\n    const boxType = toUTF8String(input, 4, 8);\n    if (boxType !== \"jP  \") return false;\n    const ftypBox = findBox(input, \"ftyp\", 0);\n    if (!ftypBox) return false;\n    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12);\n    return brand === \"jp2 \";\n  },\n  calculate(input) {\n    const jp2hBox = findBox(input, \"jp2h\", 0);\n    const ihdrBox = jp2hBox && findBox(input, \"ihdr\", jp2hBox.offset + 8);\n    if (ihdrBox) {\n      return {\n        height: readUInt32BE(input, ihdrBox.offset + 8),\n        width: readUInt32BE(input, ihdrBox.offset + 12)\n      };\n    }\n    throw new TypeError(\"Unsupported JPEG 2000 format\");\n  }\n};\n\n// lib/types/jpg.ts\nvar EXIF_MARKER = \"45786966\";\nvar APP1_DATA_SIZE_BYTES = 2;\nvar EXIF_HEADER_BYTES = 6;\nvar TIFF_BYTE_ALIGN_BYTES = 2;\nvar BIG_ENDIAN_BYTE_ALIGN = \"4d4d\";\nvar LITTLE_ENDIAN_BYTE_ALIGN = \"4949\";\nvar IDF_ENTRY_BYTES = 12;\nvar NUM_DIRECTORY_ENTRIES_BYTES = 2;\nfunction isEXIF(input) {\n  return toHexString(input, 2, 6) === EXIF_MARKER;\n}\nfunction extractSize(input, index) {\n  return {\n    height: readUInt16BE(input, index),\n    width: readUInt16BE(input, index + 2)\n  };\n}\nfunction extractOrientation(exifBlock, isBigEndian) {\n  const idfOffset = 8;\n  const offset = EXIF_HEADER_BYTES + idfOffset;\n  const idfDirectoryEntries = readUInt(exifBlock, 16, offset, isBigEndian);\n  for (let directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {\n    const start = offset + NUM_DIRECTORY_ENTRIES_BYTES + directoryEntryNumber * IDF_ENTRY_BYTES;\n    const end = start + IDF_ENTRY_BYTES;\n    if (start > exifBlock.length) {\n      return;\n    }\n    const block = exifBlock.slice(start, end);\n    const tagNumber = readUInt(block, 16, 0, isBigEndian);\n    if (tagNumber === 274) {\n      const dataFormat = readUInt(block, 16, 2, isBigEndian);\n      if (dataFormat !== 3) {\n        return;\n      }\n      const numberOfComponents = readUInt(block, 32, 4, isBigEndian);\n      if (numberOfComponents !== 1) {\n        return;\n      }\n      return readUInt(block, 16, 8, isBigEndian);\n    }\n  }\n}\nfunction validateExifBlock(input, index) {\n  const exifBlock = input.slice(APP1_DATA_SIZE_BYTES, index);\n  const byteAlign = toHexString(\n    exifBlock,\n    EXIF_HEADER_BYTES,\n    EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES\n  );\n  const isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;\n  const isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;\n  if (isBigEndian || isLittleEndian) {\n    return extractOrientation(exifBlock, isBigEndian);\n  }\n}\nfunction validateInput(input, index) {\n  if (index > input.length) {\n    throw new TypeError(\"Corrupt JPG, exceeded buffer limits\");\n  }\n}\nvar JPG = {\n  validate: (input) => toHexString(input, 0, 2) === \"ffd8\",\n  calculate(_input) {\n    let input = _input.slice(4);\n    let orientation;\n    let next;\n    while (input.length) {\n      const i = readUInt16BE(input, 0);\n      validateInput(input, i);\n      if (input[i] !== 255) {\n        input = input.slice(1);\n        continue;\n      }\n      if (isEXIF(input)) {\n        orientation = validateExifBlock(input, i);\n      }\n      next = input[i + 1];\n      if (next === 192 || next === 193 || next === 194) {\n        const size = extractSize(input, i + 5);\n        if (!orientation) {\n          return size;\n        }\n        return {\n          height: size.height,\n          orientation,\n          width: size.width\n        };\n      }\n      input = input.slice(i + 2);\n    }\n    throw new TypeError(\"Invalid JPG, no size found\");\n  }\n};\n\n// lib/utils/bit-reader.ts\nvar BitReader = class {\n  constructor(input, endianness) {\n    this.input = input;\n    this.endianness = endianness;\n    // Skip the first 16 bits (2 bytes) of signature\n    this.byteOffset = 2;\n    this.bitOffset = 0;\n  }\n  /** Reads a specified number of bits, and move the offset */\n  getBits(length = 1) {\n    let result = 0;\n    let bitsRead = 0;\n    while (bitsRead < length) {\n      if (this.byteOffset >= this.input.length) {\n        throw new Error(\"Reached end of input\");\n      }\n      const currentByte = this.input[this.byteOffset];\n      const bitsLeft = 8 - this.bitOffset;\n      const bitsToRead = Math.min(length - bitsRead, bitsLeft);\n      if (this.endianness === \"little-endian\") {\n        const mask = (1 << bitsToRead) - 1;\n        const bits = currentByte >> this.bitOffset & mask;\n        result |= bits << bitsRead;\n      } else {\n        const mask = (1 << bitsToRead) - 1 << 8 - this.bitOffset - bitsToRead;\n        const bits = (currentByte & mask) >> 8 - this.bitOffset - bitsToRead;\n        result = result << bitsToRead | bits;\n      }\n      bitsRead += bitsToRead;\n      this.bitOffset += bitsToRead;\n      if (this.bitOffset === 8) {\n        this.byteOffset++;\n        this.bitOffset = 0;\n      }\n    }\n    return result;\n  }\n};\n\n// lib/types/jxl-stream.ts\nfunction calculateImageDimension(reader, isSmallImage) {\n  if (isSmallImage) {\n    return 8 * (1 + reader.getBits(5));\n  }\n  const sizeClass = reader.getBits(2);\n  const extraBits = [9, 13, 18, 30][sizeClass];\n  return 1 + reader.getBits(extraBits);\n}\nfunction calculateImageWidth(reader, isSmallImage, widthMode, height) {\n  if (isSmallImage && widthMode === 0) {\n    return 8 * (1 + reader.getBits(5));\n  }\n  if (widthMode === 0) {\n    return calculateImageDimension(reader, false);\n  }\n  const aspectRatios = [1, 1.2, 4 / 3, 1.5, 16 / 9, 5 / 4, 2];\n  return Math.floor(height * aspectRatios[widthMode - 1]);\n}\nvar JXLStream = {\n  validate: (input) => {\n    return toHexString(input, 0, 2) === \"ff0a\";\n  },\n  calculate(input) {\n    const reader = new BitReader(input, \"little-endian\");\n    const isSmallImage = reader.getBits(1) === 1;\n    const height = calculateImageDimension(reader, isSmallImage);\n    const widthMode = reader.getBits(3);\n    const width = calculateImageWidth(reader, isSmallImage, widthMode, height);\n    return { width, height };\n  }\n};\n\n// lib/types/jxl.ts\nfunction extractCodestream(input) {\n  const jxlcBox = findBox(input, \"jxlc\", 0);\n  if (jxlcBox) {\n    return input.slice(jxlcBox.offset + 8, jxlcBox.offset + jxlcBox.size);\n  }\n  const partialStreams = extractPartialStreams(input);\n  if (partialStreams.length > 0) {\n    return concatenateCodestreams(partialStreams);\n  }\n  return void 0;\n}\nfunction extractPartialStreams(input) {\n  const partialStreams = [];\n  let offset = 0;\n  while (offset < input.length) {\n    const jxlpBox = findBox(input, \"jxlp\", offset);\n    if (!jxlpBox) break;\n    partialStreams.push(\n      input.slice(jxlpBox.offset + 12, jxlpBox.offset + jxlpBox.size)\n    );\n    offset = jxlpBox.offset + jxlpBox.size;\n  }\n  return partialStreams;\n}\nfunction concatenateCodestreams(partialCodestreams) {\n  const totalLength = partialCodestreams.reduce(\n    (acc, curr) => acc + curr.length,\n    0\n  );\n  const codestream = new Uint8Array(totalLength);\n  let position = 0;\n  for (const partial of partialCodestreams) {\n    codestream.set(partial, position);\n    position += partial.length;\n  }\n  return codestream;\n}\nvar JXL = {\n  validate: (input) => {\n    const boxType = toUTF8String(input, 4, 8);\n    if (boxType !== \"JXL \") return false;\n    const ftypBox = findBox(input, \"ftyp\", 0);\n    if (!ftypBox) return false;\n    const brand = toUTF8String(input, ftypBox.offset + 8, ftypBox.offset + 12);\n    return brand === \"jxl \";\n  },\n  calculate(input) {\n    const codestream = extractCodestream(input);\n    if (codestream) return JXLStream.calculate(codestream);\n    throw new Error(\"No codestream found in JXL container\");\n  }\n};\n\n// lib/types/ktx.ts\nvar KTX = {\n  validate: (input) => {\n    const signature = toUTF8String(input, 1, 7);\n    return [\"KTX 11\", \"KTX 20\"].includes(signature);\n  },\n  calculate: (input) => {\n    const type = input[5] === 49 ? \"ktx\" : \"ktx2\";\n    const offset = type === \"ktx\" ? 36 : 20;\n    return {\n      height: readUInt32LE(input, offset + 4),\n      width: readUInt32LE(input, offset),\n      type\n    };\n  }\n};\n\n// lib/types/png.ts\nvar pngSignature = \"PNG\\r\\n\u001A\\n\";\nvar pngImageHeaderChunkName = \"IHDR\";\nvar pngFriedChunkName = \"CgBI\";\nvar PNG = {\n  validate(input) {\n    if (pngSignature === toUTF8String(input, 1, 8)) {\n      let chunkName = toUTF8String(input, 12, 16);\n      if (chunkName === pngFriedChunkName) {\n        chunkName = toUTF8String(input, 28, 32);\n      }\n      if (chunkName !== pngImageHeaderChunkName) {\n        throw new TypeError(\"Invalid PNG\");\n      }\n      return true;\n    }\n    return false;\n  },\n  calculate(input) {\n    if (toUTF8String(input, 12, 16) === pngFriedChunkName) {\n      return {\n        height: readUInt32BE(input, 36),\n        width: readUInt32BE(input, 32)\n      };\n    }\n    return {\n      height: readUInt32BE(input, 20),\n      width: readUInt32BE(input, 16)\n    };\n  }\n};\n\n// lib/types/pnm.ts\nvar PNMTypes = {\n  P1: \"pbm/ascii\",\n  P2: \"pgm/ascii\",\n  P3: \"ppm/ascii\",\n  P4: \"pbm\",\n  P5: \"pgm\",\n  P6: \"ppm\",\n  P7: \"pam\",\n  PF: \"pfm\"\n};\nvar handlers = {\n  default: (lines) => {\n    let dimensions = [];\n    while (lines.length > 0) {\n      const line = lines.shift();\n      if (line[0] === \"#\") {\n        continue;\n      }\n      dimensions = line.split(\" \");\n      break;\n    }\n    if (dimensions.length === 2) {\n      return {\n        height: Number.parseInt(dimensions[1], 10),\n        width: Number.parseInt(dimensions[0], 10)\n      };\n    }\n    throw new TypeError(\"Invalid PNM\");\n  },\n  pam: (lines) => {\n    const size = {};\n    while (lines.length > 0) {\n      const line = lines.shift();\n      if (line.length > 16 || line.charCodeAt(0) > 128) {\n        continue;\n      }\n      const [key, value] = line.split(\" \");\n      if (key && value) {\n        size[key.toLowerCase()] = Number.parseInt(value, 10);\n      }\n      if (size.height && size.width) {\n        break;\n      }\n    }\n    if (size.height && size.width) {\n      return {\n        height: size.height,\n        width: size.width\n      };\n    }\n    throw new TypeError(\"Invalid PAM\");\n  }\n};\nvar PNM = {\n  validate: (input) => toUTF8String(input, 0, 2) in PNMTypes,\n  calculate(input) {\n    const signature = toUTF8String(input, 0, 2);\n    const type = PNMTypes[signature];\n    const lines = toUTF8String(input, 3).split(/[\\r\\n]+/);\n    const handler = handlers[type] || handlers.default;\n    return handler(lines);\n  }\n};\n\n// lib/types/psd.ts\nvar PSD = {\n  validate: (input) => toUTF8String(input, 0, 4) === \"8BPS\",\n  calculate: (input) => ({\n    height: readUInt32BE(input, 14),\n    width: readUInt32BE(input, 18)\n  })\n};\n\n// lib/types/svg.ts\nvar svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nvar extractorRegExps = {\n  height: /\\sheight=(['\"])([^%]+?)\\1/,\n  root: svgReg,\n  viewbox: /\\sviewBox=(['\"])(.+?)\\1/i,\n  width: /\\swidth=(['\"])([^%]+?)\\1/\n};\nvar INCH_CM = 2.54;\nvar units = {\n  in: 96,\n  cm: 96 / INCH_CM,\n  em: 16,\n  ex: 8,\n  m: 96 / INCH_CM * 100,\n  mm: 96 / INCH_CM / 10,\n  pc: 96 / 72 / 12,\n  pt: 96 / 72,\n  px: 1\n};\nvar unitsReg = new RegExp(\n  `^([0-9.]+(?:e\\\\d+)?)(${Object.keys(units).join(\"|\")})?$`\n);\nfunction parseLength(len) {\n  const m = unitsReg.exec(len);\n  if (!m) {\n    return void 0;\n  }\n  return Math.round(Number(m[1]) * (units[m[2]] || 1));\n}\nfunction parseViewbox(viewbox) {\n  const bounds = viewbox.split(\" \");\n  return {\n    height: parseLength(bounds[3]),\n    width: parseLength(bounds[2])\n  };\n}\nfunction parseAttributes(root) {\n  const width = root.match(extractorRegExps.width);\n  const height = root.match(extractorRegExps.height);\n  const viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    height: height && parseLength(height[2]),\n    viewbox: viewbox && parseViewbox(viewbox[2]),\n    width: width && parseLength(width[2])\n  };\n}\nfunction calculateByDimensions(attrs) {\n  return {\n    height: attrs.height,\n    width: attrs.width\n  };\n}\nfunction calculateByViewbox(attrs, viewbox) {\n  const ratio = viewbox.width / viewbox.height;\n  if (attrs.width) {\n    return {\n      height: Math.floor(attrs.width / ratio),\n      width: attrs.width\n    };\n  }\n  if (attrs.height) {\n    return {\n      height: attrs.height,\n      width: Math.floor(attrs.height * ratio)\n    };\n  }\n  return {\n    height: viewbox.height,\n    width: viewbox.width\n  };\n}\nvar SVG = {\n  // Scan only the first kilo-byte to speed up the check on larger files\n  validate: (input) => svgReg.test(toUTF8String(input, 0, 1e3)),\n  calculate(input) {\n    const root = toUTF8String(input).match(extractorRegExps.root);\n    if (root) {\n      const attrs = parseAttributes(root[0]);\n      if (attrs.width && attrs.height) {\n        return calculateByDimensions(attrs);\n      }\n      if (attrs.viewbox) {\n        return calculateByViewbox(attrs, attrs.viewbox);\n      }\n    }\n    throw new TypeError(\"Invalid SVG\");\n  }\n};\n\n// lib/types/tga.ts\nvar TGA = {\n  validate(input) {\n    return readUInt16LE(input, 0) === 0 && readUInt16LE(input, 4) === 0;\n  },\n  calculate(input) {\n    return {\n      height: readUInt16LE(input, 14),\n      width: readUInt16LE(input, 12)\n    };\n  }\n};\n\n// lib/types/tiff.ts\nvar CONSTANTS = {\n  TAG: {\n    WIDTH: 256,\n    HEIGHT: 257,\n    COMPRESSION: 259\n  },\n  TYPE: {\n    SHORT: 3,\n    LONG: 4,\n    LONG8: 16\n  },\n  ENTRY_SIZE: {\n    STANDARD: 12,\n    BIG: 20\n  },\n  COUNT_SIZE: {\n    STANDARD: 2,\n    BIG: 8\n  }\n};\nfunction readIFD(input, { isBigEndian, isBigTiff }) {\n  const ifdOffset = isBigTiff ? Number(readUInt64(input, 8, isBigEndian)) : readUInt(input, 32, 4, isBigEndian);\n  const entryCountSize = isBigTiff ? CONSTANTS.COUNT_SIZE.BIG : CONSTANTS.COUNT_SIZE.STANDARD;\n  return input.slice(ifdOffset + entryCountSize);\n}\nfunction readTagValue(input, type, offset, isBigEndian) {\n  switch (type) {\n    case CONSTANTS.TYPE.SHORT:\n      return readUInt(input, 16, offset, isBigEndian);\n    case CONSTANTS.TYPE.LONG:\n      return readUInt(input, 32, offset, isBigEndian);\n    case CONSTANTS.TYPE.LONG8: {\n      const value = Number(readUInt64(input, offset, isBigEndian));\n      if (value > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError(\"Value too large\");\n      }\n      return value;\n    }\n    default:\n      return 0;\n  }\n}\nfunction nextTag(input, isBigTiff) {\n  const entrySize = isBigTiff ? CONSTANTS.ENTRY_SIZE.BIG : CONSTANTS.ENTRY_SIZE.STANDARD;\n  if (input.length > entrySize) {\n    return input.slice(entrySize);\n  }\n}\nfunction extractTags(input, { isBigEndian, isBigTiff }) {\n  const tags = {};\n  let temp = input;\n  while (temp?.length) {\n    const code = readUInt(temp, 16, 0, isBigEndian);\n    const type = readUInt(temp, 16, 2, isBigEndian);\n    const length = isBigTiff ? Number(readUInt64(temp, 4, isBigEndian)) : readUInt(temp, 32, 4, isBigEndian);\n    if (code === 0) break;\n    if (length === 1 && (type === CONSTANTS.TYPE.SHORT || type === CONSTANTS.TYPE.LONG || isBigTiff && type === CONSTANTS.TYPE.LONG8)) {\n      const valueOffset = isBigTiff ? 12 : 8;\n      tags[code] = readTagValue(temp, type, valueOffset, isBigEndian);\n    }\n    temp = nextTag(temp, isBigTiff);\n  }\n  return tags;\n}\nfunction determineFormat(input) {\n  const signature = toUTF8String(input, 0, 2);\n  const version = readUInt(input, 16, 2, signature === \"MM\");\n  return {\n    isBigEndian: signature === \"MM\",\n    isBigTiff: version === 43\n  };\n}\nfunction validateBigTIFFHeader(input, isBigEndian) {\n  const byteSize = readUInt(input, 16, 4, isBigEndian);\n  const reserved = readUInt(input, 16, 6, isBigEndian);\n  if (byteSize !== 8 || reserved !== 0) {\n    throw new TypeError(\"Invalid BigTIFF header\");\n  }\n}\nvar signatures = /* @__PURE__ */ new Set([\n  \"49492a00\",\n  // Little Endian\n  \"4d4d002a\",\n  // Big Endian\n  \"49492b00\",\n  // BigTIFF Little Endian\n  \"4d4d002b\"\n  // BigTIFF Big Endian\n]);\nvar TIFF = {\n  validate: (input) => {\n    const signature = toHexString(input, 0, 4);\n    return signatures.has(signature);\n  },\n  calculate(input) {\n    const format = determineFormat(input);\n    if (format.isBigTiff) {\n      validateBigTIFFHeader(input, format.isBigEndian);\n    }\n    const ifdBuffer = readIFD(input, format);\n    const tags = extractTags(ifdBuffer, format);\n    const info = {\n      height: tags[CONSTANTS.TAG.HEIGHT],\n      width: tags[CONSTANTS.TAG.WIDTH],\n      type: format.isBigTiff ? \"bigtiff\" : \"tiff\"\n    };\n    if (tags[CONSTANTS.TAG.COMPRESSION]) {\n      info.compression = tags[CONSTANTS.TAG.COMPRESSION];\n    }\n    if (!info.width || !info.height) {\n      throw new TypeError(\"Invalid Tiff. Missing tags\");\n    }\n    return info;\n  }\n};\n\n// lib/types/webp.ts\nfunction calculateExtended(input) {\n  return {\n    height: 1 + readUInt24LE(input, 7),\n    width: 1 + readUInt24LE(input, 4)\n  };\n}\nfunction calculateLossless(input) {\n  return {\n    height: 1 + ((input[4] & 15) << 10 | input[3] << 2 | (input[2] & 192) >> 6),\n    width: 1 + ((input[2] & 63) << 8 | input[1])\n  };\n}\nfunction calculateLossy(input) {\n  return {\n    height: readInt16LE(input, 8) & 16383,\n    width: readInt16LE(input, 6) & 16383\n  };\n}\nvar WEBP = {\n  validate(input) {\n    const riffHeader = \"RIFF\" === toUTF8String(input, 0, 4);\n    const webpHeader = \"WEBP\" === toUTF8String(input, 8, 12);\n    const vp8Header = \"VP8\" === toUTF8String(input, 12, 15);\n    return riffHeader && webpHeader && vp8Header;\n  },\n  calculate(_input) {\n    const chunkHeader = toUTF8String(_input, 12, 16);\n    const input = _input.slice(20, 30);\n    if (chunkHeader === \"VP8X\") {\n      const extendedHeader = input[0];\n      const validStart = (extendedHeader & 192) === 0;\n      const validEnd = (extendedHeader & 1) === 0;\n      if (validStart && validEnd) {\n        return calculateExtended(input);\n      }\n      throw new TypeError(\"Invalid WebP\");\n    }\n    if (chunkHeader === \"VP8 \" && input[0] !== 47) {\n      return calculateLossy(input);\n    }\n    const signature = toHexString(input, 3, 6);\n    if (chunkHeader === \"VP8L\" && signature !== \"9d012a\") {\n      return calculateLossless(input);\n    }\n    throw new TypeError(\"Invalid WebP\");\n  }\n};\n\n// lib/types/index.ts\nvar typeHandlers = /* @__PURE__ */ new Map([\n  [\"bmp\", BMP],\n  [\"cur\", CUR],\n  [\"dds\", DDS],\n  [\"gif\", GIF],\n  [\"heif\", HEIF],\n  [\"icns\", ICNS],\n  [\"ico\", ICO],\n  [\"j2c\", J2C],\n  [\"jp2\", JP2],\n  [\"jpg\", JPG],\n  [\"jxl\", JXL],\n  [\"jxl-stream\", JXLStream],\n  [\"ktx\", KTX],\n  [\"png\", PNG],\n  [\"pnm\", PNM],\n  [\"psd\", PSD],\n  [\"svg\", SVG],\n  [\"tga\", TGA],\n  [\"tiff\", TIFF],\n  [\"webp\", WEBP]\n]);\nvar types = Array.from(typeHandlers.keys());\n\n// lib/detector.ts\nvar firstBytes = /* @__PURE__ */ new Map([\n  [0, \"heif\"],\n  [56, \"psd\"],\n  [66, \"bmp\"],\n  [68, \"dds\"],\n  [71, \"gif\"],\n  [73, \"tiff\"],\n  [77, \"tiff\"],\n  [82, \"webp\"],\n  [105, \"icns\"],\n  [137, \"png\"],\n  [255, \"jpg\"]\n]);\nfunction detector(input) {\n  const byte = input[0];\n  const type = firstBytes.get(byte);\n  if (type && typeHandlers.get(type).validate(input)) {\n    return type;\n  }\n  return types.find((type2) => typeHandlers.get(type2).validate(input));\n}\n\n// lib/lookup.ts\nvar globalOptions = {\n  disabledTypes: []\n};\nfunction imageSize(input) {\n  const type = detector(input);\n  if (typeof type !== \"undefined\") {\n    if (globalOptions.disabledTypes.indexOf(type) > -1) {\n      throw new TypeError(`disabled file type: ${type}`);\n    }\n    const size = typeHandlers.get(type).calculate(input);\n    if (size !== void 0) {\n      size.type = size.type ?? type;\n      if (size.images && size.images.length > 1) {\n        const largestImage = size.images.reduce((largest, current) => {\n          return current.width * current.height > largest.width * largest.height ? current : largest;\n        }, size.images[0]);\n        size.width = largestImage.width;\n        size.height = largestImage.height;\n      }\n      return size;\n    }\n  }\n  throw new TypeError(`unsupported file type: ${type}`);\n}\nvar disableTypes = (types2) => {\n  globalOptions.disabledTypes = types2;\n};\n\nexport { imageSize as default, disableTypes, imageSize, types };\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nexport function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./assert.js\";\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nexport function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nexport function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({\n        no: v.no,\n        name: v.name,\n        localName: enumObject[v.no],\n    })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */\nexport function makeEnumType(typeName, values, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values) {\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName(name) {\n            return names[name];\n        },\n        findNumber(no) {\n            return numbers[no];\n        },\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nexport function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values) {\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), { localName: value.name });\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nexport class Message {\n    /**\n     * Compare with a message of the same type.\n     * Note that this function disregards extensions and unknown fields.\n     */\n    equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */\n    clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */\n    fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */\n    fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        }\n        catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */\n    toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */\n    toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */\n    toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */\n    toJSON() {\n        return this.toJson({\n            emitDefaultValues: true,\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */\n    getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\n/**\n * Create a new message type using the given runtime.\n */\nexport function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function (data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        },\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary(bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson(jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString(jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals(a, b) {\n            return runtime.util.equals(type, a, b);\n        },\n    });\n    return type;\n}\n", "// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = (bits.hi & 0x80000000);\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;\n    const high = (hi >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./google/varint.js\";\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nexport const protoInt64 = makeInt64Support();\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the zero value for the given scalar type.\n */\nexport function scalarZeroValue(type, longType) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return (longType == 0 ? protoInt64.zero : \"0\");\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Returns true for a zero-value. For example, an integer has the zero-value `0`,\n * a boolean is `false`, a string is `\"\"`, and bytes is an empty Uint8Array.\n *\n * In proto3, zero-values are not written to the wire, unless the field is\n * optional or repeated.\n */\nexport function isScalarZeroValue(type, value) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return value === false;\n        case ScalarType.STRING:\n            return value === \"\";\n        case ScalarType.BYTES:\n            return value instanceof Uint8Array && !value.byteLength;\n        default:\n            return value == 0; // Loose comparison matches 0n, 0 and \"0\"\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./google/varint.js\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./private/assert.js\";\nimport { protoInt64 } from \"./proto-int64.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Start of a tag-delimited aggregate, such as a proto2 group, or a message\n     * in editions with message_encoding = DELIMITED.\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * End of a tag-delimited aggregate.\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element and return the skipped data.\n     *\n     * When skipping StartGroup, provide the tags field number to check for\n     * matching field number in the EndGroup tag.\n     */\n    skip(wireType, fieldNo) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                for (;;) {\n                    const [fn, wt] = this.tag();\n                    if (wt === WireType.EndGroup) {\n                        if (fieldNo !== undefined && fn !== fieldNo) {\n                            throw new Error(\"invalid end group tag\");\n                        }\n                        break;\n                    }\n                    this.skip(wt, fn);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { WireType } from \"../binary-encoding.js\";\n/**\n * Create a new extension using the given runtime.\n */\nexport function makeExtension(runtime, typeName, extendee, field) {\n    let fi;\n    return {\n        typeName,\n        extendee,\n        get field() {\n            if (!fi) {\n                const i = (typeof field == \"function\" ? field() : field);\n                i.name = typeName.split(\".\").pop();\n                i.jsonName = `[${typeName}]`;\n                fi = runtime.util.newFieldList([i]).list()[0];\n            }\n            return fi;\n        },\n        runtime,\n    };\n}\n/**\n * Create a container that allows us to read extension fields into it with the\n * same logic as regular fields.\n */\nexport function createExtensionContainer(extension) {\n    const localName = extension.field.localName;\n    const container = Object.create(null);\n    container[localName] = initExtensionField(extension);\n    return [container, () => container[localName]];\n}\nfunction initExtensionField(ext) {\n    const field = ext.field;\n    if (field.repeated) {\n        return [];\n    }\n    if (field.default !== undefined) {\n        return field.default;\n    }\n    switch (field.kind) {\n        case \"enum\":\n            return field.T.values[0].no;\n        case \"scalar\":\n            return scalarZeroValue(field.T, field.L);\n        case \"message\":\n            // eslint-disable-next-line no-case-declarations\n            const T = field.T, value = new T();\n            return T.fieldWrapper ? T.fieldWrapper.unwrapField(value) : value;\n        case \"map\":\n            throw \"map fields are not allowed to be extensions\";\n    }\n}\n/**\n * Helper to filter unknown fields, optimized based on field type.\n */\nexport function filterUnknownFields(unknownFields, field) {\n    if (!field.repeated && (field.kind == \"enum\" || field.kind == \"scalar\")) {\n        // singular scalar fields do not merge, we pick the last\n        for (let i = unknownFields.length - 1; i >= 0; --i) {\n            if (unknownFields[i].no == field.no) {\n                return [unknownFields[i]];\n            }\n        }\n        return [];\n    }\n    return unknownFields.filter((uf) => uf.no === field.no);\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nexport const protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */\n    dec(base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = (base64Str.length * 3) / 4;\n        if (base64Str[base64Str.length - 2] == \"=\")\n            es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\")\n            es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n        groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // previous byte\n        for (let i = 0; i < base64Str.length; i++) {\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch (base64Str[i]) {\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch (groupPos) {\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = ((p & 3) << 6) | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1)\n            throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */\n    enc(bytes) {\n        let base64 = \"\", groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // carry over from previous byte\n        for (let i = 0; i < bytes.length; i++) {\n            b = bytes[i];\n            switch (groupPos) {\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | (b >> 4)];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | (b >> 6)];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n        return base64;\n    },\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { createExtensionContainer, filterUnknownFields, } from \"./private/extensions.js\";\n/**\n * Retrieve an extension value from a message.\n *\n * The function never returns undefined. Use hasExtension() to check whether an\n * extension is set. If the extension is not set, this function returns the\n * default value (if one was specified in the protobuf source), or the zero value\n * (for example `0` for numeric types, `[]` for repeated extension fields, and\n * an empty message instance for message fields).\n *\n * Extensions are stored as unknown fields on a message. To mutate an extension\n * value, make sure to store the new value with setExtension() after mutating.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function getExtension(message, extension, options) {\n    assertExtendee(extension, message);\n    const opt = extension.runtime.bin.makeReadOptions(options);\n    const ufs = filterUnknownFields(message.getType().runtime.bin.listUnknownFields(message), extension.field);\n    const [container, get] = createExtensionContainer(extension);\n    for (const uf of ufs) {\n        extension.runtime.bin.readField(container, opt.readerFactory(uf.data), extension.field, uf.wireType, opt);\n    }\n    return get();\n}\n/**\n * Set an extension value on a message. If the message already has a value for\n * this extension, the value is replaced.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function setExtension(message, extension, value, options) {\n    assertExtendee(extension, message);\n    const readOpt = extension.runtime.bin.makeReadOptions(options);\n    const writeOpt = extension.runtime.bin.makeWriteOptions(options);\n    if (hasExtension(message, extension)) {\n        const ufs = message\n            .getType()\n            .runtime.bin.listUnknownFields(message)\n            .filter((uf) => uf.no != extension.field.no);\n        message.getType().runtime.bin.discardUnknownFields(message);\n        for (const uf of ufs) {\n            message\n                .getType()\n                .runtime.bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n    const writer = writeOpt.writerFactory();\n    let f = extension.field;\n    // Implicit presence does not apply to extensions, see https://github.com/protocolbuffers/protobuf/issues/8234\n    // We patch the field info to use explicit presence:\n    if (!f.opt && !f.repeated && (f.kind == \"enum\" || f.kind == \"scalar\")) {\n        f = Object.assign(Object.assign({}, extension.field), { opt: true });\n    }\n    extension.runtime.bin.writeField(f, value, writer, writeOpt);\n    const reader = readOpt.readerFactory(writer.finish());\n    while (reader.pos < reader.len) {\n        const [no, wireType] = reader.tag();\n        const data = reader.skip(wireType, no);\n        message.getType().runtime.bin.onUnknownField(message, no, wireType, data);\n    }\n}\n/**\n * Remove an extension value from a message.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function clearExtension(message, extension) {\n    assertExtendee(extension, message);\n    if (hasExtension(message, extension)) {\n        const bin = message.getType().runtime.bin;\n        const ufs = bin\n            .listUnknownFields(message)\n            .filter((uf) => uf.no != extension.field.no);\n        bin.discardUnknownFields(message);\n        for (const uf of ufs) {\n            bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n}\n/**\n * Check whether an extension is set on a message.\n */\nexport function hasExtension(message, extension) {\n    const messageType = message.getType();\n    return (extension.extendee.typeName === messageType.typeName &&\n        !!messageType.runtime.bin\n            .listUnknownFields(message)\n            .find((uf) => uf.no == extension.field.no));\n}\nfunction assertExtendee(extension, message) {\n    assert(extension.extendee.typeName == message.getType().typeName, `extension ${extension.typeName} can only be applied to message ${extension.extendee.typeName}`);\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { isScalarZeroValue, scalarZeroValue } from \"./scalars.js\";\n/**\n * Returns true if the field is set.\n */\nexport function isFieldSet(field, target) {\n    const localName = field.localName;\n    if (field.repeated) {\n        return target[localName].length > 0;\n    }\n    if (field.oneof) {\n        return target[field.oneof.localName].case === localName; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    }\n    switch (field.kind) {\n        case \"enum\":\n        case \"scalar\":\n            if (field.opt || field.req) {\n                // explicit presence\n                return target[localName] !== undefined;\n            }\n            // implicit presence\n            if (field.kind == \"enum\") {\n                return target[localName] !== field.T.values[0].no;\n            }\n            return !isScalarZeroValue(field.T, target[localName]);\n        case \"message\":\n            return target[localName] !== undefined;\n        case \"map\":\n            return Object.keys(target[localName]).length > 0; // eslint-disable-line @typescript-eslint/no-unsafe-argument\n    }\n}\n/**\n * Resets the field, so that isFieldSet() will return false.\n */\nexport function clearField(field, target) {\n    const localName = field.localName;\n    const implicitPresence = !field.opt && !field.req;\n    if (field.repeated) {\n        target[localName] = [];\n    }\n    else if (field.oneof) {\n        target[field.oneof.localName] = { case: undefined };\n    }\n    else {\n        switch (field.kind) {\n            case \"map\":\n                target[localName] = {};\n                break;\n            case \"enum\":\n                target[localName] = implicitPresence ? field.T.values[0].no : undefined;\n                break;\n            case \"scalar\":\n                target[localName] = implicitPresence\n                    ? scalarZeroValue(field.T, field.L)\n                    : undefined;\n                break;\n            case \"message\":\n                target[localName] = undefined;\n                break;\n        }\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"./message.js\";\n/**\n * Check whether the given object is any subtype of Message or is a specific\n * Message by passing the type.\n *\n * Just like `instanceof`, `isMessage` narrows the type. The advantage of\n * `isMessage` is that it compares identity by the message type name, not by\n * class identity. This makes it robust against the dual package hazard and\n * similar situations, where the same message is duplicated.\n *\n * This function is _mostly_ equivalent to the `instanceof` operator. For\n * example, `isMessage(foo, MyMessage)` is the same as `foo instanceof MyMessage`,\n * and `isMessage(foo)` is the same as `foo instanceof Message`. In most cases,\n * `isMessage` should be preferred over `instanceof`.\n *\n * However, due to the fact that `isMessage` does not use class identity, there\n * are subtle differences between this function and `instanceof`. Notably,\n * calling `isMessage` on an explicit type of Message will return false.\n */\nexport function isMessage(arg, type) {\n    if (arg === null || typeof arg != \"object\") {\n        return false;\n    }\n    if (!Object.getOwnPropertyNames(Message.prototype).every((m) => m in arg && typeof arg[m] == \"function\")) {\n        return false;\n    }\n    const actualType = arg.getType();\n    if (actualType === null ||\n        typeof actualType != \"function\" ||\n        !(\"typeName\" in actualType) ||\n        typeof actualType.typeName != \"string\") {\n        return false;\n    }\n    return type === undefined ? true : actualType.typeName == type.typeName;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nexport function wrapField(type, value) {\n    if (isMessage(value) || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */\nexport function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES,\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { protoBase64 } from \"../proto-base64.js\";\nimport { createExtensionContainer } from \"./extensions.js\";\nimport { getExtension, hasExtension, setExtension, } from \"../extension-accessor.js\";\nimport { clearField, isFieldSet } from \"./reflect.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { isScalarZeroValue } from \"./scalars.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable no-case-declarations,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false,\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nconst tokenNull = Symbol();\nconst tokenIgnoredUnknownEnum = Symbol();\nexport function makeJsonFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage(type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = new Map();\n            const registry = options.typeRegistry;\n            for (const [jsonKey, jsonValue] of Object.entries(json)) {\n                const field = type.fields.findJsonName(jsonKey);\n                if (field) {\n                    if (field.oneof) {\n                        if (jsonValue === null && field.kind == \"scalar\") {\n                            // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n                            continue;\n                        }\n                        const seen = oneofSeen.get(field.oneof);\n                        if (seen !== undefined) {\n                            throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                        }\n                        oneofSeen.set(field.oneof, jsonKey);\n                    }\n                    readField(message, jsonValue, field, options, type);\n                }\n                else {\n                    let found = false;\n                    if ((registry === null || registry === void 0 ? void 0 : registry.findExtension) &&\n                        jsonKey.startsWith(\"[\") &&\n                        jsonKey.endsWith(\"]\")) {\n                        const ext = registry.findExtension(jsonKey.substring(1, jsonKey.length - 1));\n                        if (ext && ext.extendee.typeName == type.typeName) {\n                            found = true;\n                            const [container, get] = createExtensionContainer(ext);\n                            readField(container, jsonValue, ext.field, options, ext);\n                            // We pass on the options as BinaryReadOptions/BinaryWriteOptions,\n                            // so that users can bring their own binary reader and writer factories\n                            // if necessary.\n                            setExtension(message, ext, get(), options);\n                        }\n                    }\n                    if (!found && !options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage(message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (field of type.fields.byNumber()) {\n                    if (!isFieldSet(field, message)) {\n                        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                        if (field.req) {\n                            throw `required field not set`;\n                        }\n                        if (!options.emitDefaultValues) {\n                            continue;\n                        }\n                        if (!canEmitFieldDefaultValue(field)) {\n                            continue;\n                        }\n                    }\n                    const value = field.oneof\n                        ? message[field.oneof.localName].value\n                        : message[field.localName];\n                    const jsonValue = writeField(field, value, options);\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] =\n                            jsonValue;\n                    }\n                }\n                const registry = options.typeRegistry;\n                if (registry === null || registry === void 0 ? void 0 : registry.findExtensionFor) {\n                    for (const uf of type.runtime.bin.listUnknownFields(message)) {\n                        const ext = registry.findExtensionFor(type.typeName, uf.no);\n                        if (ext && hasExtension(message, ext)) {\n                            // We pass on the options as BinaryReadOptions, so that users can bring their own\n                            // binary reader factory if necessary.\n                            const value = getExtension(message, ext, options);\n                            const jsonValue = writeField(ext.field, value, options);\n                            if (jsonValue !== undefined) {\n                                json[ext.field.jsonName] = jsonValue;\n                            }\n                        }\n                    }\n                }\n            }\n            catch (e) {\n                const m = field\n                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`\n                    : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar(type, json, longType) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            return readScalar(type, json, longType !== null && longType !== void 0 ? longType : LongType.BIGINT, true);\n        },\n        writeScalar(type, value, emitDefaultValues) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            if (emitDefaultValues || isScalarZeroValue(type, value)) {\n                return writeScalar(type, value);\n            }\n            return undefined;\n        },\n        debug: debugJsonValue,\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch (typeof json) {\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// Read a JSON value for a field.\n// The \"parentType\" argument is only used to provide context in errors.\nfunction readField(target, jsonValue, field, options, parentType) {\n    let localName = field.localName;\n    if (field.repeated) {\n        assert(field.kind != \"map\");\n        if (jsonValue === null) {\n            return;\n        }\n        if (!Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetArray = target[localName];\n        for (const jsonItem of jsonValue) {\n            if (jsonItem === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`);\n            }\n            switch (field.kind) {\n                case \"message\":\n                    targetArray.push(field.T.fromJson(jsonItem, options));\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.T, jsonItem, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetArray.push(enumValue);\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetArray.push(readScalar(field.T, jsonItem, field.L, true));\n                    }\n                    catch (e) {\n                        let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    }\n    else if (field.kind == \"map\") {\n        if (jsonValue === null) {\n            return;\n        }\n        if (typeof jsonValue != \"object\" || Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetMap = target[localName];\n        for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n            if (jsonMapValue === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: map value null`);\n            }\n            let key;\n            try {\n                key = readMapKey(field.K, jsonMapKey);\n            }\n            catch (e) {\n                let m = `cannot decode map key for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                if (e instanceof Error && e.message.length > 0) {\n                    m += `: ${e.message}`;\n                }\n                throw new Error(m);\n            }\n            switch (field.V.kind) {\n                case \"message\":\n                    targetMap[key] = field.V.T.fromJson(jsonMapValue, options);\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetMap[key] = enumValue;\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetMap[key] = readScalar(field.V.T, jsonMapValue, LongType.BIGINT, true);\n                    }\n                    catch (e) {\n                        let m = `cannot decode map value for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    }\n    else {\n        if (field.oneof) {\n            target = target[field.oneof.localName] = { case: localName };\n            localName = \"value\";\n        }\n        switch (field.kind) {\n            case \"message\":\n                const messageType = field.T;\n                if (jsonValue === null &&\n                    messageType.typeName != \"google.protobuf.Value\") {\n                    return;\n                }\n                let currentValue = target[localName];\n                if (isMessage(currentValue)) {\n                    currentValue.fromJson(jsonValue, options);\n                }\n                else {\n                    target[localName] = currentValue = messageType.fromJson(jsonValue, options);\n                    if (messageType.fieldWrapper && !field.oneof) {\n                        target[localName] =\n                            messageType.fieldWrapper.unwrapField(currentValue);\n                    }\n                }\n                break;\n            case \"enum\":\n                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields, false);\n                switch (enumValue) {\n                    case tokenNull:\n                        clearField(field, target);\n                        break;\n                    case tokenIgnoredUnknownEnum:\n                        break;\n                    default:\n                        target[localName] = enumValue;\n                        break;\n                }\n                break;\n            case \"scalar\":\n                try {\n                    const scalarValue = readScalar(field.T, jsonValue, field.L, false);\n                    switch (scalarValue) {\n                        case tokenNull:\n                            clearField(field, target);\n                            break;\n                        default:\n                            target[localName] = scalarValue;\n                            break;\n                    }\n                }\n                catch (e) {\n                    let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                    if (e instanceof Error && e.message.length > 0) {\n                        m += `: ${e.message}`;\n                    }\n                    throw new Error(m);\n                }\n                break;\n        }\n    }\n}\nfunction readMapKey(type, json) {\n    if (type === ScalarType.BOOL) {\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n        switch (json) {\n            case \"true\":\n                json = true;\n                break;\n            case \"false\":\n                json = false;\n                break;\n        }\n    }\n    return readScalar(type, json, LongType.BIGINT, true).toString();\n}\nfunction readScalar(type, json, longType, nullAsZeroValue) {\n    if (json === null) {\n        if (nullAsZeroValue) {\n            return scalarZeroValue(type, longType);\n        }\n        return tokenNull;\n    }\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === \"NaN\")\n                return Number.NaN;\n            if (json === \"Infinity\")\n                return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\")\n                return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                // empty string is not a number\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                // extra whitespace\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                // not a number\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                // infinity and -infinity are handled by string representation above, so this is an error\n                break;\n            }\n            if (type == ScalarType.FLOAT)\n                assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            let int32;\n            if (typeof json == \"number\")\n                int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length)\n                    int32 = Number(json);\n            }\n            if (int32 === undefined)\n                break;\n            if (type == ScalarType.UINT32 || type == ScalarType.FIXED32)\n                assertUInt32(int32);\n            else\n                assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const long = protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const uLong = protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case ScalarType.BOOL:\n            if (typeof json !== \"boolean\")\n                break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            }\n            catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === \"\")\n                return new Uint8Array(0);\n            if (typeof json !== \"string\")\n                break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields, nullAsZeroValue) {\n    if (json === null) {\n        if (type.typeName == \"google.protobuf.NullValue\") {\n            return 0; // google.protobuf.NullValue.NULL_VALUE = 0\n        }\n        return nullAsZeroValue ? type.values[0].no : tokenNull;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (typeof json) {\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            if (value !== undefined) {\n                return value.no;\n            }\n            if (ignoreUnknownFields) {\n                return tokenIgnoredUnknownEnum;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\n// Decide whether an unset field should be emitted with JSON write option `emitDefaultValues`\nfunction canEmitFieldDefaultValue(field) {\n    if (field.repeated || field.kind == \"map\") {\n        // maps are {}, repeated fields are []\n        return true;\n    }\n    if (field.oneof) {\n        // oneof fields are never emitted\n        return false;\n    }\n    if (field.kind == \"message\") {\n        // singular message field are allowed to emit JSON null, but we do not\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.opt || field.req) {\n        // the field uses explicit presence, so we cannot emit a zero value\n        return false;\n    }\n    return true;\n}\nfunction writeField(field, value, options) {\n    if (field.kind == \"map\") {\n        assert(typeof value == \"object\" && value != null);\n        const jsonObj = {};\n        const entries = Object.entries(value);\n        switch (field.V.kind) {\n            case \"scalar\":\n                for (const [entryKey, entryValue] of entries) {\n                    jsonObj[entryKey.toString()] = writeScalar(field.V.T, entryValue); // JSON standard allows only (double quoted) string as property key\n                }\n                break;\n            case \"message\":\n                for (const [entryKey, entryValue] of entries) {\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                }\n                break;\n            case \"enum\":\n                const enumType = field.V.T;\n                for (const [entryKey, entryValue] of entries) {\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = writeEnum(enumType, entryValue, options.enumAsInteger);\n                }\n                break;\n        }\n        return options.emitDefaultValues || entries.length > 0\n            ? jsonObj\n            : undefined;\n    }\n    if (field.repeated) {\n        assert(Array.isArray(value));\n        const jsonArr = [];\n        switch (field.kind) {\n            case \"scalar\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(writeScalar(field.T, value[i]));\n                }\n                break;\n            case \"enum\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(writeEnum(field.T, value[i], options.enumAsInteger));\n                }\n                break;\n            case \"message\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(value[i].toJson(options));\n                }\n                break;\n        }\n        return options.emitDefaultValues || jsonArr.length > 0\n            ? jsonArr\n            : undefined;\n    }\n    switch (field.kind) {\n        case \"scalar\":\n            return writeScalar(field.T, value);\n        case \"enum\":\n            return writeEnum(field.T, value, options.enumAsInteger);\n        case \"message\":\n            return wrapField(field.T, value).toJson(options);\n    }\n}\nfunction writeEnum(type, value, enumAsInteger) {\n    var _a;\n    assert(typeof value == \"number\");\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value) {\n    switch (type) {\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE: // eslint-disable-line no-fallthrough\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value))\n                return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY)\n                return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY)\n                return \"-Infinity\";\n            return value;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" ||\n                typeof value == \"string\" ||\n                typeof value == \"number\");\n            return value.toString();\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return protoBase64.enc(value);\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BinaryReader, BinaryWriter, WireType } from \"../binary-encoding.js\";\nimport { Message } from \"../message.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { assert } from \"./assert.js\";\nimport { isFieldSet } from \"./reflect.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes) => new BinaryReader(bytes),\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function makeBinaryFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields(message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields(message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields(message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c) {\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField(message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({ no, wireType, data });\n        },\n        readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {\n            const type = message.getType();\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            const end = delimitedMessageEncoding\n                ? reader.len\n                : reader.pos + lengthOrEndTagFieldNo;\n            let fieldNo, wireType;\n            while (reader.pos < end) {\n                [fieldNo, wireType] = reader.tag();\n                if (delimitedMessageEncoding === true &&\n                    wireType == WireType.EndGroup) {\n                    break;\n                }\n                const field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType, fieldNo);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                readField(message, reader, field, wireType, options);\n            }\n            if (delimitedMessageEncoding && // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n                (wireType != WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {\n                throw new Error(`invalid end group tag`);\n            }\n        },\n        readField,\n        writeMessage(message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()) {\n                if (!isFieldSet(field, message)) {\n                    if (field.req) {\n                        throw new Error(`cannot encode field ${type.typeName}.${field.name} to binary: required field not set`);\n                    }\n                    continue;\n                }\n                const value = field.oneof\n                    ? message[field.oneof.localName].value\n                    : message[field.localName];\n                writeField(field, value, writer, options);\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        },\n        writeField(field, value, writer, options) {\n            // The behavior of our internal function has changed, it does no longer\n            // accept `undefined` values for singular scalar and map.\n            // For backwards-compatibility, we support the old form that is part of\n            // the public API through the interface BinaryFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            writeField(field, value, writer, options);\n        },\n    };\n}\nfunction readField(target, // eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\nreader, field, wireType, options) {\n    let { repeated, localName } = field;\n    if (field.oneof) {\n        target = target[field.oneof.localName];\n        if (target.case != localName) {\n            delete target.value;\n        }\n        target.case = localName;\n        localName = \"value\";\n    }\n    switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n            const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            let read = readScalar;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            if (field.kind == \"scalar\" && field.L > 0) {\n                read = readScalarLTString;\n            }\n            if (repeated) {\n                let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                const isPacked = wireType == WireType.LengthDelimited &&\n                    scalarType != ScalarType.STRING &&\n                    scalarType != ScalarType.BYTES;\n                if (isPacked) {\n                    let e = reader.uint32() + reader.pos;\n                    while (reader.pos < e) {\n                        arr.push(read(reader, scalarType));\n                    }\n                }\n                else {\n                    arr.push(read(reader, scalarType));\n                }\n            }\n            else {\n                target[localName] = read(reader, scalarType);\n            }\n            break;\n        case \"message\":\n            const messageType = field.T;\n            if (repeated) {\n                // safe to assume presence of array, oneof cannot contain repeated values\n                target[localName].push(readMessageField(reader, new messageType(), options, field));\n            }\n            else {\n                if (isMessage(target[localName])) {\n                    readMessageField(reader, target[localName], options, field);\n                }\n                else {\n                    target[localName] = readMessageField(reader, new messageType(), options, field);\n                    if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\n                        target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                    }\n                }\n            }\n            break;\n        case \"map\":\n            let [mapKey, mapVal] = readMapEntry(field, reader, options);\n            // safe to assume presence of map object, oneof cannot contain repeated values\n            target[localName][mapKey] = mapVal;\n            break;\n    }\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options, field) {\n    const format = message.getType().runtime.bin;\n    const delimited = field === null || field === void 0 ? void 0 : field.delimited;\n    format.readMessage(message, reader, delimited ? field.no : reader.uint32(), // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n    options, delimited);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while (reader.pos < end) {\n        const [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options, undefined);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        key = scalarZeroValue(field.K, LongType.BIGINT);\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch (field.V.kind) {\n            case \"scalar\":\n                val = scalarZeroValue(field.V.T, LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = field.V.T.values[0].no;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [key, val];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nfunction readScalarLTString(reader, type) {\n    const v = readScalar(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nfunction writeField(field, value, writer, options) {\n    assert(value !== undefined);\n    const repeated = field.repeated;\n    switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n            let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            if (repeated) {\n                assert(Array.isArray(value));\n                if (field.packed) {\n                    writePacked(writer, scalarType, field.no, value);\n                }\n                else {\n                    for (const item of value) {\n                        writeScalar(writer, scalarType, field.no, item);\n                    }\n                }\n            }\n            else {\n                writeScalar(writer, scalarType, field.no, value);\n            }\n            break;\n        case \"message\":\n            if (repeated) {\n                assert(Array.isArray(value));\n                for (const item of value) {\n                    writeMessageField(writer, options, field, item);\n                }\n            }\n            else {\n                writeMessageField(writer, options, field, value);\n            }\n            break;\n        case \"map\":\n            assert(typeof value == \"object\" && value != null);\n            for (const [key, val] of Object.entries(value)) {\n                writeMapEntry(writer, options, field, key, val);\n            }\n            break;\n    }\n}\nexport function writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch (field.K) {\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value);\n            break;\n        case \"enum\":\n            writeScalar(writer, ScalarType.INT32, 2, value);\n            break;\n        case \"message\":\n            assert(value !== undefined);\n            writer.tag(2, WireType.LengthDelimited).bytes(value.toBinary(options));\n            break;\n    }\n    writer.join();\n}\n// Value must not be undefined\nfunction writeMessageField(writer, options, field, value) {\n    const message = wrapField(field.T, value);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.delimited)\n        writer\n            .tag(field.no, WireType.StartGroup)\n            .raw(message.toBinary(options))\n            .tag(field.no, WireType.EndGroup);\n    else\n        writer\n            .tag(field.no, WireType.LengthDelimited)\n            .bytes(message.toBinary(options));\n}\nfunction writeScalar(writer, type, fieldNo, value) {\n    assert(value !== undefined);\n    let [wireType, method] = scalarTypeInfo(type);\n    writer.tag(fieldNo, wireType)[method](value);\n}\nfunction writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for (let i = 0; i < value.length; i++) {\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\n// TODO replace call-sites writeScalar() and writePacked(), then remove\nfunction scalarTypeInfo(type) {\n    let wireType = WireType.Varint;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch (type) {\n        case ScalarType.BYTES:\n        case ScalarType.STRING:\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.DOUBLE:\n        case ScalarType.FIXED64:\n        case ScalarType.SFIXED64:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [wireType, method];\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { setEnumType } from \"./enum.js\";\nimport { Message } from \"../message.js\";\nimport { scalarEquals } from \"./scalars.js\";\nimport { ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nexport function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial(source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()) {\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] == null) {\n                    // TODO if source is a Message instance, we should use isFieldSet() here to support future field presence\n                    continue;\n                }\n                switch (member.kind) {\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField &&\n                            sourceField.kind == \"message\" &&\n                            !isMessage(val, sourceField.T)) {\n                            val = new sourceField.T(val);\n                        }\n                        else if (sourceField &&\n                            sourceField.kind === \"scalar\" &&\n                            sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = { case: sk, value: val };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated\n                                ? copy.map(toU8Arr)\n                                : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch (member.V.kind) {\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])) {\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                }\n                                else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])) {\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val) => isMessage(val, mt) ? val : new mt(val));\n                        }\n                        else {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (\n                                // We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                }\n                                else {\n                                    t[localName] = val;\n                                }\n                            }\n                            else {\n                                t[localName] = isMessage(val, mt) ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        // TODO use isFieldSet() here to support future field presence\n        equals(type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m) => {\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch (m.kind) {\n                        case \"message\":\n                            return va.every((a, i) => m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch (m.kind) {\n                    case \"message\":\n                        let a = va;\n                        let b = vb;\n                        if (m.T.fieldWrapper) {\n                            if (a !== undefined && !isMessage(a)) {\n                                a = m.T.fieldWrapper.wrapField(a);\n                            }\n                            if (b !== undefined && !isMessage(b)) {\n                                b = m.T.fieldWrapper.wrapField(b);\n                            }\n                        }\n                        return m.T.equals(a, b);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch (s.kind) {\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch (m.V.kind) {\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k) => messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        // TODO use isFieldSet() here to support future field presence\n        clone(message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()) {\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                }\n                else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)) {\n                        copy[key] = cloneSingularField(v);\n                    }\n                }\n                else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f\n                        ? { case: source.case, value: cloneSingularField(source.value) }\n                        : { case: undefined };\n                }\n                else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            for (const uf of type.runtime.bin.listUnknownFields(message)) {\n                type.runtime.bin.onUnknownField(any, uf.no, uf.wireType, uf.data);\n            }\n            return target;\n        },\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (isMessage(value)) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getEnumType, makeEnum, makeEnumType } from \"./enum.js\";\nimport { makeMessageType } from \"./message-type.js\";\nimport { makeExtension } from \"./extensions.js\";\nimport { makeJsonFormat } from \"./json-format.js\";\nimport { makeBinaryFormat } from \"./binary-format.js\";\nimport { makeUtilCommon } from \"./util-common.js\";\nexport function makeProtoRuntime(syntax, newFieldList, initFields) {\n    return {\n        syntax,\n        json: makeJsonFormat(),\n        bin: makeBinaryFormat(),\n        util: Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList,\n            initFields }),\n        makeMessageType(typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType,\n        makeExtension(typeName, extendee, field) {\n            return makeExtension(this, typeName, extendee, field);\n        },\n    };\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class InternalFieldList {\n    constructor(fields, normalizer) {\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list()\n                .concat()\n                .sort((a, b) => a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()) {\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                }\n                else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\nexport function localName(desc) {\n    switch (desc.kind) {\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\":\n        case \"extension\": {\n            const pkg = desc.file.proto.package;\n            const offset = pkg === undefined ? 0 : pkg.length + 1;\n            const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n            // For services, we only care about safe identifiers, not safe object properties,\n            // but we have shipped v1 with a bug that respected object properties, and we\n            // do not want to introduce a breaking change, so we continue to escape for\n            // safe object properties.\n            // See https://github.com/bufbuild/protobuf-es/pull/391\n            return safeObjectProperty(safeIdentifier(name));\n        }\n        case \"enum_value\": {\n            let name = desc.name;\n            const sharedPrefix = desc.parent.sharedPrefix;\n            if (sharedPrefix !== undefined) {\n                name = name.substring(sharedPrefix.length);\n            }\n            return safeObjectProperty(name);\n        }\n        case \"rpc\": {\n            let name = desc.name;\n            if (name.length == 0) {\n                return name;\n            }\n            name = name[0].toLowerCase() + name.substring(1);\n            return safeObjectProperty(name);\n        }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */\nexport function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nexport function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nexport const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nexport function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames) {\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */\nconst reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\",\n]);\nconst fallback = (name) => `${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = (name) => {\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nexport const safeObjectProperty = (name) => {\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */\nexport const safeIdentifier = (name) => {\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { localOneofName } from \"./names.js\";\nimport { assert } from \"./assert.js\";\nexport class InternalOneofInfo {\n    constructor(name) {\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.req = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for (let i = 0; i < this.fields.length; i++) {\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { InternalOneofInfo } from \"./field.js\";\nimport { fieldJsonName, localFieldName } from \"./names.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\n/**\n * Convert a collection of field info to an array of normalized FieldInfo.\n *\n * The argument `packedByDefault` specifies whether fields that do not specify\n * `packed` should be packed (proto3) or unpacked (proto2).\n */\nexport function normalizeFieldInfos(fieldInfos, packedByDefault) {\n    var _a, _b, _c, _d, _e, _f;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\"\n        ? fieldInfos()\n        : fieldInfos) {\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n        }\n        f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;\n        f.req = (_e = field.req) !== null && _e !== void 0 ? _e : false;\n        f.opt = (_f = field.opt) !== null && _f !== void 0 ? _f : false;\n        if (field.packed === undefined) {\n            if (packedByDefault) {\n                f.packed =\n                    field.kind == \"enum\" ||\n                        (field.kind == \"scalar\" &&\n                            field.T != ScalarType.BYTES &&\n                            field.T != ScalarType.STRING);\n            }\n            else {\n                f.packed = false;\n            }\n        }\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { scalarZeroValue } from \"./private/scalars.js\";\nimport { normalizeFieldInfos } from \"./private/field-normalize.js\";\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nexport const proto3 = makeProtoRuntime(\"proto3\", (fields) => {\n    return new InternalFieldList(fields, (source) => normalizeFieldInfos(source, true));\n}, \n// TODO merge with proto2 and initExtensionField, also see initPartial, equals, clone\n(target) => {\n    for (const member of target.getType().fields.byMember()) {\n        if (member.opt) {\n            continue;\n        }\n        const name = member.localName, t = target;\n        if (member.repeated) {\n            t[name] = [];\n            continue;\n        }\n        switch (member.kind) {\n            case \"oneof\":\n                t[name] = { case: undefined };\n                break;\n            case \"enum\":\n                t[name] = 0;\n                break;\n            case \"map\":\n                t[name] = {};\n                break;\n            case \"scalar\":\n                t[name] = scalarZeroValue(member.T, member.L);\n                break;\n            case \"message\":\n                // message fields are always optional in proto3\n                break;\n        }\n    }\n});\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { normalizeFieldInfos } from \"./private/field-normalize.js\";\n/**\n * Provides functionality for messages defined with the proto2 syntax.\n */\nexport const proto2 = makeProtoRuntime(\"proto2\", (fields) => {\n    return new InternalFieldList(fields, (source) => normalizeFieldInfos(source, false));\n}, \n// TODO merge with proto3 and initExtensionField, also see initPartial, equals, clone\n(target) => {\n    for (const member of target.getType().fields.byMember()) {\n        const name = member.localName, t = target;\n        if (member.repeated) {\n            t[name] = [];\n            continue;\n        }\n        switch (member.kind) {\n            case \"oneof\":\n                t[name] = { case: undefined };\n                break;\n            case \"map\":\n                t[name] = {};\n                break;\n            case \"scalar\":\n            case \"enum\":\n            case \"message\":\n                // In contrast to proto3, enum and scalar fields have no intrinsic default value,\n                // only an optional explicit default value.\n                // Unlike proto3 intrinsic default values, proto2 explicit default values are not\n                // set on construction, because they are not omitted on the wire. If we did set\n                // default values on construction, a deserialize-serialize round-trip would add\n                // fields to a message.\n                break;\n        }\n    }\n});\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// Export global Number constants. This is done so that we can safely use\n// these global constants when generating code and be assured we're using\n// the correct values. We cannot rely on globalThis since we support ES2017\n// and globalThis was introduced in ES2020. We also don't want to explicitly\n// generate code using, for example, Number.NaN, since this could clash with\n// a message name of Number. Instead we can export them here since this will\n// be in a different scope as the generated code and we are guaranteed to use\n// the intended global values.\nexport const protoDouble = {\n    NaN: Number.NaN,\n    POSITIVE_INFINITY: Number.POSITIVE_INFINITY,\n    NEGATIVE_INFINITY: Number.NEGATIVE_INFINITY,\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */\nexport var MethodKind;\n(function (MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */\nexport var MethodIdempotency;\n(function (MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// Author: kenton@google.com (Kenton Varda)\n//  Based on original Protocol Buffers design by\n//  Sanjay Ghemawat, Jeff Dean, and others.\n//\n// The messages in this file describe the definitions found in .proto files.\n// A valid .proto file can be translated directly to a FileDescriptorProto\n// without any other information (e.g. without reading its imports).\n// @generated by protoc-gen-es v1.10.1 with parameter \"bootstrap_wkt=true,ts_nocheck=false,target=ts\"\n// @generated from file google/protobuf/descriptor.proto (package google.protobuf, syntax proto2)\n/* eslint-disable */\nimport { proto2 } from \"../../proto2.js\";\nimport { Message } from \"../../message.js\";\n/**\n * The full set of known editions.\n *\n * @generated from enum google.protobuf.Edition\n */\nexport var Edition;\n(function (Edition) {\n    /**\n     * A placeholder for an unknown edition value.\n     *\n     * @generated from enum value: EDITION_UNKNOWN = 0;\n     */\n    Edition[Edition[\"EDITION_UNKNOWN\"] = 0] = \"EDITION_UNKNOWN\";\n    /**\n     * A placeholder edition for specifying default behaviors *before* a feature\n     * was first introduced.  This is effectively an \"infinite past\".\n     *\n     * @generated from enum value: EDITION_LEGACY = 900;\n     */\n    Edition[Edition[\"EDITION_LEGACY\"] = 900] = \"EDITION_LEGACY\";\n    /**\n     * Legacy syntax \"editions\".  These pre-date editions, but behave much like\n     * distinct editions.  These can't be used to specify the edition of proto\n     * files, but feature definitions must supply proto2/proto3 defaults for\n     * backwards compatibility.\n     *\n     * @generated from enum value: EDITION_PROTO2 = 998;\n     */\n    Edition[Edition[\"EDITION_PROTO2\"] = 998] = \"EDITION_PROTO2\";\n    /**\n     * @generated from enum value: EDITION_PROTO3 = 999;\n     */\n    Edition[Edition[\"EDITION_PROTO3\"] = 999] = \"EDITION_PROTO3\";\n    /**\n     * Editions that have been released.  The specific values are arbitrary and\n     * should not be depended on, but they will always be time-ordered for easy\n     * comparison.\n     *\n     * @generated from enum value: EDITION_2023 = 1000;\n     */\n    Edition[Edition[\"EDITION_2023\"] = 1000] = \"EDITION_2023\";\n    /**\n     * @generated from enum value: EDITION_2024 = 1001;\n     */\n    Edition[Edition[\"EDITION_2024\"] = 1001] = \"EDITION_2024\";\n    /**\n     * Placeholder editions for testing feature resolution.  These should not be\n     * used or relyed on outside of tests.\n     *\n     * @generated from enum value: EDITION_1_TEST_ONLY = 1;\n     */\n    Edition[Edition[\"EDITION_1_TEST_ONLY\"] = 1] = \"EDITION_1_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_2_TEST_ONLY = 2;\n     */\n    Edition[Edition[\"EDITION_2_TEST_ONLY\"] = 2] = \"EDITION_2_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99997_TEST_ONLY = 99997;\n     */\n    Edition[Edition[\"EDITION_99997_TEST_ONLY\"] = 99997] = \"EDITION_99997_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99998_TEST_ONLY = 99998;\n     */\n    Edition[Edition[\"EDITION_99998_TEST_ONLY\"] = 99998] = \"EDITION_99998_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99999_TEST_ONLY = 99999;\n     */\n    Edition[Edition[\"EDITION_99999_TEST_ONLY\"] = 99999] = \"EDITION_99999_TEST_ONLY\";\n    /**\n     * Placeholder for specifying unbounded edition support.  This should only\n     * ever be used by plugins that can expect to never require any changes to\n     * support a new edition.\n     *\n     * @generated from enum value: EDITION_MAX = 2147483647;\n     */\n    Edition[Edition[\"EDITION_MAX\"] = 2147483647] = \"EDITION_MAX\";\n})(Edition || (Edition = {}));\n// Retrieve enum metadata with: proto2.getEnumType(Edition)\nproto2.util.setEnumType(Edition, \"google.protobuf.Edition\", [\n    { no: 0, name: \"EDITION_UNKNOWN\" },\n    { no: 900, name: \"EDITION_LEGACY\" },\n    { no: 998, name: \"EDITION_PROTO2\" },\n    { no: 999, name: \"EDITION_PROTO3\" },\n    { no: 1000, name: \"EDITION_2023\" },\n    { no: 1001, name: \"EDITION_2024\" },\n    { no: 1, name: \"EDITION_1_TEST_ONLY\" },\n    { no: 2, name: \"EDITION_2_TEST_ONLY\" },\n    { no: 99997, name: \"EDITION_99997_TEST_ONLY\" },\n    { no: 99998, name: \"EDITION_99998_TEST_ONLY\" },\n    { no: 99999, name: \"EDITION_99999_TEST_ONLY\" },\n    { no: 2147483647, name: \"EDITION_MAX\" },\n]);\n/**\n * The protocol compiler can output a FileDescriptorSet containing the .proto\n * files it parses.\n *\n * @generated from message google.protobuf.FileDescriptorSet\n */\nexport class FileDescriptorSet extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FileDescriptorProto file = 1;\n         */\n        this.file = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FileDescriptorSet().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FileDescriptorSet().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FileDescriptorSet().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FileDescriptorSet, a, b);\n    }\n}\nFileDescriptorSet.runtime = proto2;\nFileDescriptorSet.typeName = \"google.protobuf.FileDescriptorSet\";\nFileDescriptorSet.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"file\", kind: \"message\", T: FileDescriptorProto, repeated: true },\n]);\n/**\n * Describes a complete .proto file.\n *\n * @generated from message google.protobuf.FileDescriptorProto\n */\nexport class FileDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Names of files imported by this file.\n         *\n         * @generated from field: repeated string dependency = 3;\n         */\n        this.dependency = [];\n        /**\n         * Indexes of the public imported files in the dependency list above.\n         *\n         * @generated from field: repeated int32 public_dependency = 10;\n         */\n        this.publicDependency = [];\n        /**\n         * Indexes of the weak imported files in the dependency list.\n         * For Google-internal migration only. Do not use.\n         *\n         * @generated from field: repeated int32 weak_dependency = 11;\n         */\n        this.weakDependency = [];\n        /**\n         * All top-level definitions in this file.\n         *\n         * @generated from field: repeated google.protobuf.DescriptorProto message_type = 4;\n         */\n        this.messageType = [];\n        /**\n         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 5;\n         */\n        this.enumType = [];\n        /**\n         * @generated from field: repeated google.protobuf.ServiceDescriptorProto service = 6;\n         */\n        this.service = [];\n        /**\n         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 7;\n         */\n        this.extension = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FileDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FileDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FileDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FileDescriptorProto, a, b);\n    }\n}\nFileDescriptorProto.runtime = proto2;\nFileDescriptorProto.typeName = \"google.protobuf.FileDescriptorProto\";\nFileDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"dependency\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 10, name: \"public_dependency\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true },\n    { no: 11, name: \"weak_dependency\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true },\n    { no: 4, name: \"message_type\", kind: \"message\", T: DescriptorProto, repeated: true },\n    { no: 5, name: \"enum_type\", kind: \"message\", T: EnumDescriptorProto, repeated: true },\n    { no: 6, name: \"service\", kind: \"message\", T: ServiceDescriptorProto, repeated: true },\n    { no: 7, name: \"extension\", kind: \"message\", T: FieldDescriptorProto, repeated: true },\n    { no: 8, name: \"options\", kind: \"message\", T: FileOptions, opt: true },\n    { no: 9, name: \"source_code_info\", kind: \"message\", T: SourceCodeInfo, opt: true },\n    { no: 12, name: \"syntax\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 14, name: \"edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n]);\n/**\n * Describes a message type.\n *\n * @generated from message google.protobuf.DescriptorProto\n */\nexport class DescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FieldDescriptorProto field = 2;\n         */\n        this.field = [];\n        /**\n         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 6;\n         */\n        this.extension = [];\n        /**\n         * @generated from field: repeated google.protobuf.DescriptorProto nested_type = 3;\n         */\n        this.nestedType = [];\n        /**\n         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 4;\n         */\n        this.enumType = [];\n        /**\n         * @generated from field: repeated google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;\n         */\n        this.extensionRange = [];\n        /**\n         * @generated from field: repeated google.protobuf.OneofDescriptorProto oneof_decl = 8;\n         */\n        this.oneofDecl = [];\n        /**\n         * @generated from field: repeated google.protobuf.DescriptorProto.ReservedRange reserved_range = 9;\n         */\n        this.reservedRange = [];\n        /**\n         * Reserved field names, which may not be used by fields in the same message.\n         * A given name may only be reserved once.\n         *\n         * @generated from field: repeated string reserved_name = 10;\n         */\n        this.reservedName = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(DescriptorProto, a, b);\n    }\n}\nDescriptorProto.runtime = proto2;\nDescriptorProto.typeName = \"google.protobuf.DescriptorProto\";\nDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"field\", kind: \"message\", T: FieldDescriptorProto, repeated: true },\n    { no: 6, name: \"extension\", kind: \"message\", T: FieldDescriptorProto, repeated: true },\n    { no: 3, name: \"nested_type\", kind: \"message\", T: DescriptorProto, repeated: true },\n    { no: 4, name: \"enum_type\", kind: \"message\", T: EnumDescriptorProto, repeated: true },\n    { no: 5, name: \"extension_range\", kind: \"message\", T: DescriptorProto_ExtensionRange, repeated: true },\n    { no: 8, name: \"oneof_decl\", kind: \"message\", T: OneofDescriptorProto, repeated: true },\n    { no: 7, name: \"options\", kind: \"message\", T: MessageOptions, opt: true },\n    { no: 9, name: \"reserved_range\", kind: \"message\", T: DescriptorProto_ReservedRange, repeated: true },\n    { no: 10, name: \"reserved_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.DescriptorProto.ExtensionRange\n */\nexport class DescriptorProto_ExtensionRange extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DescriptorProto_ExtensionRange().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DescriptorProto_ExtensionRange().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DescriptorProto_ExtensionRange().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(DescriptorProto_ExtensionRange, a, b);\n    }\n}\nDescriptorProto_ExtensionRange.runtime = proto2;\nDescriptorProto_ExtensionRange.typeName = \"google.protobuf.DescriptorProto.ExtensionRange\";\nDescriptorProto_ExtensionRange.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"start\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 3, name: \"options\", kind: \"message\", T: ExtensionRangeOptions, opt: true },\n]);\n/**\n * Range of reserved tag numbers. Reserved tag numbers may not be used by\n * fields or extension ranges in the same message. Reserved ranges may\n * not overlap.\n *\n * @generated from message google.protobuf.DescriptorProto.ReservedRange\n */\nexport class DescriptorProto_ReservedRange extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DescriptorProto_ReservedRange().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DescriptorProto_ReservedRange().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DescriptorProto_ReservedRange().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(DescriptorProto_ReservedRange, a, b);\n    }\n}\nDescriptorProto_ReservedRange.runtime = proto2;\nDescriptorProto_ReservedRange.typeName = \"google.protobuf.DescriptorProto.ReservedRange\";\nDescriptorProto_ReservedRange.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"start\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n]);\n/**\n * @generated from message google.protobuf.ExtensionRangeOptions\n */\nexport class ExtensionRangeOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        /**\n         * For external users: DO NOT USE. We are in the process of open sourcing\n         * extension declaration and executing internal cleanups before it can be\n         * used externally.\n         *\n         * @generated from field: repeated google.protobuf.ExtensionRangeOptions.Declaration declaration = 2;\n         */\n        this.declaration = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ExtensionRangeOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ExtensionRangeOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ExtensionRangeOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ExtensionRangeOptions, a, b);\n    }\n}\nExtensionRangeOptions.runtime = proto2;\nExtensionRangeOptions.typeName = \"google.protobuf.ExtensionRangeOptions\";\nExtensionRangeOptions.fields = proto2.util.newFieldList(() => [\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n    { no: 2, name: \"declaration\", kind: \"message\", T: ExtensionRangeOptions_Declaration, repeated: true },\n    { no: 50, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 3, name: \"verification\", kind: \"enum\", T: proto2.getEnumType(ExtensionRangeOptions_VerificationState), opt: true, default: ExtensionRangeOptions_VerificationState.UNVERIFIED },\n]);\n/**\n * The verification state of the extension range.\n *\n * @generated from enum google.protobuf.ExtensionRangeOptions.VerificationState\n */\nexport var ExtensionRangeOptions_VerificationState;\n(function (ExtensionRangeOptions_VerificationState) {\n    /**\n     * All the extensions of the range must be declared.\n     *\n     * @generated from enum value: DECLARATION = 0;\n     */\n    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    /**\n     * @generated from enum value: UNVERIFIED = 1;\n     */\n    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState[\"UNVERIFIED\"] = 1] = \"UNVERIFIED\";\n})(ExtensionRangeOptions_VerificationState || (ExtensionRangeOptions_VerificationState = {}));\n// Retrieve enum metadata with: proto2.getEnumType(ExtensionRangeOptions_VerificationState)\nproto2.util.setEnumType(ExtensionRangeOptions_VerificationState, \"google.protobuf.ExtensionRangeOptions.VerificationState\", [\n    { no: 0, name: \"DECLARATION\" },\n    { no: 1, name: \"UNVERIFIED\" },\n]);\n/**\n * @generated from message google.protobuf.ExtensionRangeOptions.Declaration\n */\nexport class ExtensionRangeOptions_Declaration extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ExtensionRangeOptions_Declaration().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ExtensionRangeOptions_Declaration().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ExtensionRangeOptions_Declaration().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ExtensionRangeOptions_Declaration, a, b);\n    }\n}\nExtensionRangeOptions_Declaration.runtime = proto2;\nExtensionRangeOptions_Declaration.typeName = \"google.protobuf.ExtensionRangeOptions.Declaration\";\nExtensionRangeOptions_Declaration.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"full_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 5, name: \"reserved\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 6, name: \"repeated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n]);\n/**\n * Describes a field within a message.\n *\n * @generated from message google.protobuf.FieldDescriptorProto\n */\nexport class FieldDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldDescriptorProto, a, b);\n    }\n}\nFieldDescriptorProto.runtime = proto2;\nFieldDescriptorProto.typeName = \"google.protobuf.FieldDescriptorProto\";\nFieldDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"label\", kind: \"enum\", T: proto2.getEnumType(FieldDescriptorProto_Label), opt: true },\n    { no: 5, name: \"type\", kind: \"enum\", T: proto2.getEnumType(FieldDescriptorProto_Type), opt: true },\n    { no: 6, name: \"type_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"extendee\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 7, name: \"default_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 9, name: \"oneof_index\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 10, name: \"json_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 8, name: \"options\", kind: \"message\", T: FieldOptions, opt: true },\n    { no: 17, name: \"proto3_optional\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n]);\n/**\n * @generated from enum google.protobuf.FieldDescriptorProto.Type\n */\nexport var FieldDescriptorProto_Type;\n(function (FieldDescriptorProto_Type) {\n    /**\n     * 0 is reserved for errors.\n     * Order is weird for historical reasons.\n     *\n     * @generated from enum value: TYPE_DOUBLE = 1;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    /**\n     * @generated from enum value: TYPE_FLOAT = 2;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FLOAT\"] = 2] = \"FLOAT\";\n    /**\n     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n     * negative values are likely.\n     *\n     * @generated from enum value: TYPE_INT64 = 3;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"INT64\"] = 3] = \"INT64\";\n    /**\n     * @generated from enum value: TYPE_UINT64 = 4;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"UINT64\"] = 4] = \"UINT64\";\n    /**\n     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n     * negative values are likely.\n     *\n     * @generated from enum value: TYPE_INT32 = 5;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"INT32\"] = 5] = \"INT32\";\n    /**\n     * @generated from enum value: TYPE_FIXED64 = 6;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FIXED64\"] = 6] = \"FIXED64\";\n    /**\n     * @generated from enum value: TYPE_FIXED32 = 7;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FIXED32\"] = 7] = \"FIXED32\";\n    /**\n     * @generated from enum value: TYPE_BOOL = 8;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"BOOL\"] = 8] = \"BOOL\";\n    /**\n     * @generated from enum value: TYPE_STRING = 9;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"STRING\"] = 9] = \"STRING\";\n    /**\n     * Tag-delimited aggregate.\n     * Group type is deprecated and not supported after google.protobuf. However, Proto3\n     * implementations should still be able to parse the group wire format and\n     * treat group fields as unknown fields.  In Editions, the group wire format\n     * can be enabled via the `message_encoding` feature.\n     *\n     * @generated from enum value: TYPE_GROUP = 10;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"GROUP\"] = 10] = \"GROUP\";\n    /**\n     * Length-delimited aggregate.\n     *\n     * @generated from enum value: TYPE_MESSAGE = 11;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"MESSAGE\"] = 11] = \"MESSAGE\";\n    /**\n     * New in version 2.\n     *\n     * @generated from enum value: TYPE_BYTES = 12;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"BYTES\"] = 12] = \"BYTES\";\n    /**\n     * @generated from enum value: TYPE_UINT32 = 13;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"UINT32\"] = 13] = \"UINT32\";\n    /**\n     * @generated from enum value: TYPE_ENUM = 14;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"ENUM\"] = 14] = \"ENUM\";\n    /**\n     * @generated from enum value: TYPE_SFIXED32 = 15;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    /**\n     * @generated from enum value: TYPE_SFIXED64 = 16;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    /**\n     * Uses ZigZag encoding.\n     *\n     * @generated from enum value: TYPE_SINT32 = 17;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SINT32\"] = 17] = \"SINT32\";\n    /**\n     * Uses ZigZag encoding.\n     *\n     * @generated from enum value: TYPE_SINT64 = 18;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SINT64\"] = 18] = \"SINT64\";\n})(FieldDescriptorProto_Type || (FieldDescriptorProto_Type = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Type)\nproto2.util.setEnumType(FieldDescriptorProto_Type, \"google.protobuf.FieldDescriptorProto.Type\", [\n    { no: 1, name: \"TYPE_DOUBLE\" },\n    { no: 2, name: \"TYPE_FLOAT\" },\n    { no: 3, name: \"TYPE_INT64\" },\n    { no: 4, name: \"TYPE_UINT64\" },\n    { no: 5, name: \"TYPE_INT32\" },\n    { no: 6, name: \"TYPE_FIXED64\" },\n    { no: 7, name: \"TYPE_FIXED32\" },\n    { no: 8, name: \"TYPE_BOOL\" },\n    { no: 9, name: \"TYPE_STRING\" },\n    { no: 10, name: \"TYPE_GROUP\" },\n    { no: 11, name: \"TYPE_MESSAGE\" },\n    { no: 12, name: \"TYPE_BYTES\" },\n    { no: 13, name: \"TYPE_UINT32\" },\n    { no: 14, name: \"TYPE_ENUM\" },\n    { no: 15, name: \"TYPE_SFIXED32\" },\n    { no: 16, name: \"TYPE_SFIXED64\" },\n    { no: 17, name: \"TYPE_SINT32\" },\n    { no: 18, name: \"TYPE_SINT64\" },\n]);\n/**\n * @generated from enum google.protobuf.FieldDescriptorProto.Label\n */\nexport var FieldDescriptorProto_Label;\n(function (FieldDescriptorProto_Label) {\n    /**\n     * 0 is reserved for errors\n     *\n     * @generated from enum value: LABEL_OPTIONAL = 1;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /**\n     * @generated from enum value: LABEL_REPEATED = 3;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"REPEATED\"] = 3] = \"REPEATED\";\n    /**\n     * The required label is only allowed in google.protobuf.  In proto3 and Editions\n     * it's explicitly prohibited.  In Editions, the `field_presence` feature\n     * can be used to get this behavior.\n     *\n     * @generated from enum value: LABEL_REQUIRED = 2;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"REQUIRED\"] = 2] = \"REQUIRED\";\n})(FieldDescriptorProto_Label || (FieldDescriptorProto_Label = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Label)\nproto2.util.setEnumType(FieldDescriptorProto_Label, \"google.protobuf.FieldDescriptorProto.Label\", [\n    { no: 1, name: \"LABEL_OPTIONAL\" },\n    { no: 3, name: \"LABEL_REPEATED\" },\n    { no: 2, name: \"LABEL_REQUIRED\" },\n]);\n/**\n * Describes a oneof.\n *\n * @generated from message google.protobuf.OneofDescriptorProto\n */\nexport class OneofDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new OneofDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new OneofDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new OneofDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(OneofDescriptorProto, a, b);\n    }\n}\nOneofDescriptorProto.runtime = proto2;\nOneofDescriptorProto.typeName = \"google.protobuf.OneofDescriptorProto\";\nOneofDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"options\", kind: \"message\", T: OneofOptions, opt: true },\n]);\n/**\n * Describes an enum type.\n *\n * @generated from message google.protobuf.EnumDescriptorProto\n */\nexport class EnumDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.EnumValueDescriptorProto value = 2;\n         */\n        this.value = [];\n        /**\n         * Range of reserved numeric values. Reserved numeric values may not be used\n         * by enum values in the same enum declaration. Reserved ranges may not\n         * overlap.\n         *\n         * @generated from field: repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4;\n         */\n        this.reservedRange = [];\n        /**\n         * Reserved enum value names, which may not be reused. A given name may only\n         * be reserved once.\n         *\n         * @generated from field: repeated string reserved_name = 5;\n         */\n        this.reservedName = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumDescriptorProto, a, b);\n    }\n}\nEnumDescriptorProto.runtime = proto2;\nEnumDescriptorProto.typeName = \"google.protobuf.EnumDescriptorProto\";\nEnumDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"value\", kind: \"message\", T: EnumValueDescriptorProto, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: EnumOptions, opt: true },\n    { no: 4, name: \"reserved_range\", kind: \"message\", T: EnumDescriptorProto_EnumReservedRange, repeated: true },\n    { no: 5, name: \"reserved_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n/**\n * Range of reserved numeric values. Reserved values may not be used by\n * entries in the same enum. Reserved ranges may not overlap.\n *\n * Note that this is distinct from DescriptorProto.ReservedRange in that it\n * is inclusive such that it can appropriately represent the entire int32\n * domain.\n *\n * @generated from message google.protobuf.EnumDescriptorProto.EnumReservedRange\n */\nexport class EnumDescriptorProto_EnumReservedRange extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumDescriptorProto_EnumReservedRange().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumDescriptorProto_EnumReservedRange().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumDescriptorProto_EnumReservedRange().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumDescriptorProto_EnumReservedRange, a, b);\n    }\n}\nEnumDescriptorProto_EnumReservedRange.runtime = proto2;\nEnumDescriptorProto_EnumReservedRange.typeName = \"google.protobuf.EnumDescriptorProto.EnumReservedRange\";\nEnumDescriptorProto_EnumReservedRange.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"start\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n]);\n/**\n * Describes a value within an enum.\n *\n * @generated from message google.protobuf.EnumValueDescriptorProto\n */\nexport class EnumValueDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumValueDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumValueDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumValueDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumValueDescriptorProto, a, b);\n    }\n}\nEnumValueDescriptorProto.runtime = proto2;\nEnumValueDescriptorProto.typeName = \"google.protobuf.EnumValueDescriptorProto\";\nEnumValueDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 3, name: \"options\", kind: \"message\", T: EnumValueOptions, opt: true },\n]);\n/**\n * Describes a service.\n *\n * @generated from message google.protobuf.ServiceDescriptorProto\n */\nexport class ServiceDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.MethodDescriptorProto method = 2;\n         */\n        this.method = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ServiceDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ServiceDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ServiceDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ServiceDescriptorProto, a, b);\n    }\n}\nServiceDescriptorProto.runtime = proto2;\nServiceDescriptorProto.typeName = \"google.protobuf.ServiceDescriptorProto\";\nServiceDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"method\", kind: \"message\", T: MethodDescriptorProto, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: ServiceOptions, opt: true },\n]);\n/**\n * Describes a method of a service.\n *\n * @generated from message google.protobuf.MethodDescriptorProto\n */\nexport class MethodDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MethodDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MethodDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MethodDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(MethodDescriptorProto, a, b);\n    }\n}\nMethodDescriptorProto.runtime = proto2;\nMethodDescriptorProto.typeName = \"google.protobuf.MethodDescriptorProto\";\nMethodDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"input_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"output_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"options\", kind: \"message\", T: MethodOptions, opt: true },\n    { no: 5, name: \"client_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 6, name: \"server_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n]);\n/**\n * @generated from message google.protobuf.FileOptions\n */\nexport class FileOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here.\n         * See the documentation for the \"Options\" section above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FileOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FileOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FileOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FileOptions, a, b);\n    }\n}\nFileOptions.runtime = proto2;\nFileOptions.typeName = \"google.protobuf.FileOptions\";\nFileOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"java_package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 8, name: \"java_outer_classname\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 10, name: \"java_multiple_files\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 20, name: \"java_generate_equals_and_hash\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 27, name: \"java_string_check_utf8\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 9, name: \"optimize_for\", kind: \"enum\", T: proto2.getEnumType(FileOptions_OptimizeMode), opt: true, default: FileOptions_OptimizeMode.SPEED },\n    { no: 11, name: \"go_package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 16, name: \"cc_generic_services\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 17, name: \"java_generic_services\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 18, name: \"py_generic_services\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 23, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 31, name: \"cc_enable_arenas\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: true },\n    { no: 36, name: \"objc_class_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 37, name: \"csharp_namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 39, name: \"swift_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 40, name: \"php_class_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 41, name: \"php_namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 44, name: \"php_metadata_namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 45, name: \"ruby_package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 50, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * Generated classes can be optimized for speed or code size.\n *\n * @generated from enum google.protobuf.FileOptions.OptimizeMode\n */\nexport var FileOptions_OptimizeMode;\n(function (FileOptions_OptimizeMode) {\n    /**\n     * Generate complete code for parsing, serialization,\n     *\n     * @generated from enum value: SPEED = 1;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"SPEED\"] = 1] = \"SPEED\";\n    /**\n     * etc.\n     *\n     * Use ReflectionOps to implement these methods.\n     *\n     * @generated from enum value: CODE_SIZE = 2;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"CODE_SIZE\"] = 2] = \"CODE_SIZE\";\n    /**\n     * Generate code using MessageLite and the lite runtime.\n     *\n     * @generated from enum value: LITE_RUNTIME = 3;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"LITE_RUNTIME\"] = 3] = \"LITE_RUNTIME\";\n})(FileOptions_OptimizeMode || (FileOptions_OptimizeMode = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FileOptions_OptimizeMode)\nproto2.util.setEnumType(FileOptions_OptimizeMode, \"google.protobuf.FileOptions.OptimizeMode\", [\n    { no: 1, name: \"SPEED\" },\n    { no: 2, name: \"CODE_SIZE\" },\n    { no: 3, name: \"LITE_RUNTIME\" },\n]);\n/**\n * @generated from message google.protobuf.MessageOptions\n */\nexport class MessageOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MessageOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MessageOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MessageOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(MessageOptions, a, b);\n    }\n}\nMessageOptions.runtime = proto2;\nMessageOptions.typeName = \"google.protobuf.MessageOptions\";\nMessageOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"message_set_wire_format\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 2, name: \"no_standard_descriptor_accessor\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 3, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 7, name: \"map_entry\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 11, name: \"deprecated_legacy_json_field_conflicts\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 12, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.FieldOptions\n */\nexport class FieldOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FieldOptions.OptionTargetType targets = 19;\n         */\n        this.targets = [];\n        /**\n         * @generated from field: repeated google.protobuf.FieldOptions.EditionDefault edition_defaults = 20;\n         */\n        this.editionDefaults = [];\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldOptions, a, b);\n    }\n}\nFieldOptions.runtime = proto2;\nFieldOptions.typeName = \"google.protobuf.FieldOptions\";\nFieldOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"ctype\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_CType), opt: true, default: FieldOptions_CType.STRING },\n    { no: 2, name: \"packed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 6, name: \"jstype\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_JSType), opt: true, default: FieldOptions_JSType.JS_NORMAL },\n    { no: 5, name: \"lazy\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 15, name: \"unverified_lazy\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 3, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 10, name: \"weak\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 16, name: \"debug_redact\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 17, name: \"retention\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_OptionRetention), opt: true },\n    { no: 19, name: \"targets\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_OptionTargetType), repeated: true },\n    { no: 20, name: \"edition_defaults\", kind: \"message\", T: FieldOptions_EditionDefault, repeated: true },\n    { no: 21, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 22, name: \"feature_support\", kind: \"message\", T: FieldOptions_FeatureSupport, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from enum google.protobuf.FieldOptions.CType\n */\nexport var FieldOptions_CType;\n(function (FieldOptions_CType) {\n    /**\n     * Default mode.\n     *\n     * @generated from enum value: STRING = 0;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"STRING\"] = 0] = \"STRING\";\n    /**\n     * The option [ctype=CORD] may be applied to a non-repeated field of type\n     * \"bytes\". It indicates that in C++, the data should be stored in a Cord\n     * instead of a string.  For very large strings, this may reduce memory\n     * fragmentation. It may also allow better performance when parsing from a\n     * Cord, or when parsing with aliasing enabled, as the parsed Cord may then\n     * alias the original buffer.\n     *\n     * @generated from enum value: CORD = 1;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"CORD\"] = 1] = \"CORD\";\n    /**\n     * @generated from enum value: STRING_PIECE = 2;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"STRING_PIECE\"] = 2] = \"STRING_PIECE\";\n})(FieldOptions_CType || (FieldOptions_CType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_CType)\nproto2.util.setEnumType(FieldOptions_CType, \"google.protobuf.FieldOptions.CType\", [\n    { no: 0, name: \"STRING\" },\n    { no: 1, name: \"CORD\" },\n    { no: 2, name: \"STRING_PIECE\" },\n]);\n/**\n * @generated from enum google.protobuf.FieldOptions.JSType\n */\nexport var FieldOptions_JSType;\n(function (FieldOptions_JSType) {\n    /**\n     * Use the default type.\n     *\n     * @generated from enum value: JS_NORMAL = 0;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_NORMAL\"] = 0] = \"JS_NORMAL\";\n    /**\n     * Use JavaScript strings.\n     *\n     * @generated from enum value: JS_STRING = 1;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_STRING\"] = 1] = \"JS_STRING\";\n    /**\n     * Use JavaScript numbers.\n     *\n     * @generated from enum value: JS_NUMBER = 2;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_NUMBER\"] = 2] = \"JS_NUMBER\";\n})(FieldOptions_JSType || (FieldOptions_JSType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_JSType)\nproto2.util.setEnumType(FieldOptions_JSType, \"google.protobuf.FieldOptions.JSType\", [\n    { no: 0, name: \"JS_NORMAL\" },\n    { no: 1, name: \"JS_STRING\" },\n    { no: 2, name: \"JS_NUMBER\" },\n]);\n/**\n * If set to RETENTION_SOURCE, the option will be omitted from the binary.\n * Note: as of January 2023, support for this is in progress and does not yet\n * have an effect (b/264593489).\n *\n * @generated from enum google.protobuf.FieldOptions.OptionRetention\n */\nexport var FieldOptions_OptionRetention;\n(function (FieldOptions_OptionRetention) {\n    /**\n     * @generated from enum value: RETENTION_UNKNOWN = 0;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_UNKNOWN\"] = 0] = \"RETENTION_UNKNOWN\";\n    /**\n     * @generated from enum value: RETENTION_RUNTIME = 1;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_RUNTIME\"] = 1] = \"RETENTION_RUNTIME\";\n    /**\n     * @generated from enum value: RETENTION_SOURCE = 2;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_SOURCE\"] = 2] = \"RETENTION_SOURCE\";\n})(FieldOptions_OptionRetention || (FieldOptions_OptionRetention = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionRetention)\nproto2.util.setEnumType(FieldOptions_OptionRetention, \"google.protobuf.FieldOptions.OptionRetention\", [\n    { no: 0, name: \"RETENTION_UNKNOWN\" },\n    { no: 1, name: \"RETENTION_RUNTIME\" },\n    { no: 2, name: \"RETENTION_SOURCE\" },\n]);\n/**\n * This indicates the types of entities that the field may apply to when used\n * as an option. If it is unset, then the field may be freely used as an\n * option on any kind of entity. Note: as of January 2023, support for this is\n * in progress and does not yet have an effect (b/264593489).\n *\n * @generated from enum google.protobuf.FieldOptions.OptionTargetType\n */\nexport var FieldOptions_OptionTargetType;\n(function (FieldOptions_OptionTargetType) {\n    /**\n     * @generated from enum value: TARGET_TYPE_UNKNOWN = 0;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_UNKNOWN\"] = 0] = \"TARGET_TYPE_UNKNOWN\";\n    /**\n     * @generated from enum value: TARGET_TYPE_FILE = 1;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_FILE\"] = 1] = \"TARGET_TYPE_FILE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_EXTENSION_RANGE = 2;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_EXTENSION_RANGE\"] = 2] = \"TARGET_TYPE_EXTENSION_RANGE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_MESSAGE = 3;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_MESSAGE\"] = 3] = \"TARGET_TYPE_MESSAGE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_FIELD = 4;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_FIELD\"] = 4] = \"TARGET_TYPE_FIELD\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ONEOF = 5;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ONEOF\"] = 5] = \"TARGET_TYPE_ONEOF\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ENUM = 6;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ENUM\"] = 6] = \"TARGET_TYPE_ENUM\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ENUM_ENTRY = 7;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ENUM_ENTRY\"] = 7] = \"TARGET_TYPE_ENUM_ENTRY\";\n    /**\n     * @generated from enum value: TARGET_TYPE_SERVICE = 8;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_SERVICE\"] = 8] = \"TARGET_TYPE_SERVICE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_METHOD = 9;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_METHOD\"] = 9] = \"TARGET_TYPE_METHOD\";\n})(FieldOptions_OptionTargetType || (FieldOptions_OptionTargetType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionTargetType)\nproto2.util.setEnumType(FieldOptions_OptionTargetType, \"google.protobuf.FieldOptions.OptionTargetType\", [\n    { no: 0, name: \"TARGET_TYPE_UNKNOWN\" },\n    { no: 1, name: \"TARGET_TYPE_FILE\" },\n    { no: 2, name: \"TARGET_TYPE_EXTENSION_RANGE\" },\n    { no: 3, name: \"TARGET_TYPE_MESSAGE\" },\n    { no: 4, name: \"TARGET_TYPE_FIELD\" },\n    { no: 5, name: \"TARGET_TYPE_ONEOF\" },\n    { no: 6, name: \"TARGET_TYPE_ENUM\" },\n    { no: 7, name: \"TARGET_TYPE_ENUM_ENTRY\" },\n    { no: 8, name: \"TARGET_TYPE_SERVICE\" },\n    { no: 9, name: \"TARGET_TYPE_METHOD\" },\n]);\n/**\n * @generated from message google.protobuf.FieldOptions.EditionDefault\n */\nexport class FieldOptions_EditionDefault extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldOptions_EditionDefault().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldOptions_EditionDefault().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldOptions_EditionDefault().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldOptions_EditionDefault, a, b);\n    }\n}\nFieldOptions_EditionDefault.runtime = proto2;\nFieldOptions_EditionDefault.typeName = \"google.protobuf.FieldOptions.EditionDefault\";\nFieldOptions_EditionDefault.fields = proto2.util.newFieldList(() => [\n    { no: 3, name: \"edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n]);\n/**\n * Information about the support window of a feature.\n *\n * @generated from message google.protobuf.FieldOptions.FeatureSupport\n */\nexport class FieldOptions_FeatureSupport extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldOptions_FeatureSupport().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldOptions_FeatureSupport().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldOptions_FeatureSupport().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldOptions_FeatureSupport, a, b);\n    }\n}\nFieldOptions_FeatureSupport.runtime = proto2;\nFieldOptions_FeatureSupport.typeName = \"google.protobuf.FieldOptions.FeatureSupport\";\nFieldOptions_FeatureSupport.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"edition_introduced\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 2, name: \"edition_deprecated\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 3, name: \"deprecation_warning\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"edition_removed\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n]);\n/**\n * @generated from message google.protobuf.OneofOptions\n */\nexport class OneofOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new OneofOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new OneofOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new OneofOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(OneofOptions, a, b);\n    }\n}\nOneofOptions.runtime = proto2;\nOneofOptions.typeName = \"google.protobuf.OneofOptions\";\nOneofOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.EnumOptions\n */\nexport class EnumOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumOptions, a, b);\n    }\n}\nEnumOptions.runtime = proto2;\nEnumOptions.typeName = \"google.protobuf.EnumOptions\";\nEnumOptions.fields = proto2.util.newFieldList(() => [\n    { no: 2, name: \"allow_alias\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 3, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 6, name: \"deprecated_legacy_json_field_conflicts\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 7, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.EnumValueOptions\n */\nexport class EnumValueOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumValueOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumValueOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumValueOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumValueOptions, a, b);\n    }\n}\nEnumValueOptions.runtime = proto2;\nEnumValueOptions.typeName = \"google.protobuf.EnumValueOptions\";\nEnumValueOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 2, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 3, name: \"debug_redact\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 4, name: \"feature_support\", kind: \"message\", T: FieldOptions_FeatureSupport, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.ServiceOptions\n */\nexport class ServiceOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ServiceOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ServiceOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ServiceOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ServiceOptions, a, b);\n    }\n}\nServiceOptions.runtime = proto2;\nServiceOptions.typeName = \"google.protobuf.ServiceOptions\";\nServiceOptions.fields = proto2.util.newFieldList(() => [\n    { no: 34, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 33, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.MethodOptions\n */\nexport class MethodOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MethodOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MethodOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MethodOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(MethodOptions, a, b);\n    }\n}\nMethodOptions.runtime = proto2;\nMethodOptions.typeName = \"google.protobuf.MethodOptions\";\nMethodOptions.fields = proto2.util.newFieldList(() => [\n    { no: 33, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 34, name: \"idempotency_level\", kind: \"enum\", T: proto2.getEnumType(MethodOptions_IdempotencyLevel), opt: true, default: MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN },\n    { no: 35, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n * or neither? HTTP based RPC implementation may choose GET verb for safe\n * methods, and PUT verb for idempotent methods instead of the default POST.\n *\n * @generated from enum google.protobuf.MethodOptions.IdempotencyLevel\n */\nexport var MethodOptions_IdempotencyLevel;\n(function (MethodOptions_IdempotencyLevel) {\n    /**\n     * @generated from enum value: IDEMPOTENCY_UNKNOWN = 0;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = 0] = \"IDEMPOTENCY_UNKNOWN\";\n    /**\n     * implies idempotent\n     *\n     * @generated from enum value: NO_SIDE_EFFECTS = 1;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = 1] = \"NO_SIDE_EFFECTS\";\n    /**\n     * idempotent, but may have side effects\n     *\n     * @generated from enum value: IDEMPOTENT = 2;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"IDEMPOTENT\"] = 2] = \"IDEMPOTENT\";\n})(MethodOptions_IdempotencyLevel || (MethodOptions_IdempotencyLevel = {}));\n// Retrieve enum metadata with: proto2.getEnumType(MethodOptions_IdempotencyLevel)\nproto2.util.setEnumType(MethodOptions_IdempotencyLevel, \"google.protobuf.MethodOptions.IdempotencyLevel\", [\n    { no: 0, name: \"IDEMPOTENCY_UNKNOWN\" },\n    { no: 1, name: \"NO_SIDE_EFFECTS\" },\n    { no: 2, name: \"IDEMPOTENT\" },\n]);\n/**\n * A message representing a option the parser does not recognize. This only\n * appears in options protos created by the compiler::Parser class.\n * DescriptorPool resolves these when building Descriptor objects. Therefore,\n * options protos in descriptor objects (e.g. returned by Descriptor::options(),\n * or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n * in them.\n *\n * @generated from message google.protobuf.UninterpretedOption\n */\nexport class UninterpretedOption extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.UninterpretedOption.NamePart name = 2;\n         */\n        this.name = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new UninterpretedOption().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UninterpretedOption().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UninterpretedOption().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(UninterpretedOption, a, b);\n    }\n}\nUninterpretedOption.runtime = proto2;\nUninterpretedOption.typeName = \"google.protobuf.UninterpretedOption\";\nUninterpretedOption.fields = proto2.util.newFieldList(() => [\n    { no: 2, name: \"name\", kind: \"message\", T: UninterpretedOption_NamePart, repeated: true },\n    { no: 3, name: \"identifier_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"positive_int_value\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 5, name: \"negative_int_value\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, opt: true },\n    { no: 6, name: \"double_value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */, opt: true },\n    { no: 7, name: \"string_value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, opt: true },\n    { no: 8, name: \"aggregate_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n]);\n/**\n * The name of the uninterpreted option.  Each string represents a segment in\n * a dot-separated name.  is_extension is true iff a segment represents an\n * extension (denoted with parentheses in options specs in .proto files).\n * E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"moo\", false] } represents\n * \"foo.(bar.baz).moo\".\n *\n * @generated from message google.protobuf.UninterpretedOption.NamePart\n */\nexport class UninterpretedOption_NamePart extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new UninterpretedOption_NamePart().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UninterpretedOption_NamePart().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UninterpretedOption_NamePart().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(UninterpretedOption_NamePart, a, b);\n    }\n}\nUninterpretedOption_NamePart.runtime = proto2;\nUninterpretedOption_NamePart.typeName = \"google.protobuf.UninterpretedOption.NamePart\";\nUninterpretedOption_NamePart.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name_part\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, req: true },\n    { no: 2, name: \"is_extension\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, req: true },\n]);\n/**\n * TODO Enums in C++ gencode (and potentially other languages) are\n * not well scoped.  This means that each of the feature enums below can clash\n * with each other.  The short names we've chosen maximize call-site\n * readability, but leave us very open to this scenario.  A future feature will\n * be designed and implemented to handle this, hopefully before we ever hit a\n * conflict here.\n *\n * @generated from message google.protobuf.FeatureSet\n */\nexport class FeatureSet extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FeatureSet().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FeatureSet().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FeatureSet().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FeatureSet, a, b);\n    }\n}\nFeatureSet.runtime = proto2;\nFeatureSet.typeName = \"google.protobuf.FeatureSet\";\nFeatureSet.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"field_presence\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_FieldPresence), opt: true },\n    { no: 2, name: \"enum_type\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_EnumType), opt: true },\n    { no: 3, name: \"repeated_field_encoding\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_RepeatedFieldEncoding), opt: true },\n    { no: 4, name: \"utf8_validation\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_Utf8Validation), opt: true },\n    { no: 5, name: \"message_encoding\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_MessageEncoding), opt: true },\n    { no: 6, name: \"json_format\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_JsonFormat), opt: true },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.FieldPresence\n */\nexport var FeatureSet_FieldPresence;\n(function (FeatureSet_FieldPresence) {\n    /**\n     * @generated from enum value: FIELD_PRESENCE_UNKNOWN = 0;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"FIELD_PRESENCE_UNKNOWN\"] = 0] = \"FIELD_PRESENCE_UNKNOWN\";\n    /**\n     * @generated from enum value: EXPLICIT = 1;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"EXPLICIT\"] = 1] = \"EXPLICIT\";\n    /**\n     * @generated from enum value: IMPLICIT = 2;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"IMPLICIT\"] = 2] = \"IMPLICIT\";\n    /**\n     * @generated from enum value: LEGACY_REQUIRED = 3;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"LEGACY_REQUIRED\"] = 3] = \"LEGACY_REQUIRED\";\n})(FeatureSet_FieldPresence || (FeatureSet_FieldPresence = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_FieldPresence)\nproto2.util.setEnumType(FeatureSet_FieldPresence, \"google.protobuf.FeatureSet.FieldPresence\", [\n    { no: 0, name: \"FIELD_PRESENCE_UNKNOWN\" },\n    { no: 1, name: \"EXPLICIT\" },\n    { no: 2, name: \"IMPLICIT\" },\n    { no: 3, name: \"LEGACY_REQUIRED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.EnumType\n */\nexport var FeatureSet_EnumType;\n(function (FeatureSet_EnumType) {\n    /**\n     * @generated from enum value: ENUM_TYPE_UNKNOWN = 0;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"ENUM_TYPE_UNKNOWN\"] = 0] = \"ENUM_TYPE_UNKNOWN\";\n    /**\n     * @generated from enum value: OPEN = 1;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"OPEN\"] = 1] = \"OPEN\";\n    /**\n     * @generated from enum value: CLOSED = 2;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"CLOSED\"] = 2] = \"CLOSED\";\n})(FeatureSet_EnumType || (FeatureSet_EnumType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_EnumType)\nproto2.util.setEnumType(FeatureSet_EnumType, \"google.protobuf.FeatureSet.EnumType\", [\n    { no: 0, name: \"ENUM_TYPE_UNKNOWN\" },\n    { no: 1, name: \"OPEN\" },\n    { no: 2, name: \"CLOSED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.RepeatedFieldEncoding\n */\nexport var FeatureSet_RepeatedFieldEncoding;\n(function (FeatureSet_RepeatedFieldEncoding) {\n    /**\n     * @generated from enum value: REPEATED_FIELD_ENCODING_UNKNOWN = 0;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"REPEATED_FIELD_ENCODING_UNKNOWN\"] = 0] = \"REPEATED_FIELD_ENCODING_UNKNOWN\";\n    /**\n     * @generated from enum value: PACKED = 1;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * @generated from enum value: EXPANDED = 2;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"EXPANDED\"] = 2] = \"EXPANDED\";\n})(FeatureSet_RepeatedFieldEncoding || (FeatureSet_RepeatedFieldEncoding = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_RepeatedFieldEncoding)\nproto2.util.setEnumType(FeatureSet_RepeatedFieldEncoding, \"google.protobuf.FeatureSet.RepeatedFieldEncoding\", [\n    { no: 0, name: \"REPEATED_FIELD_ENCODING_UNKNOWN\" },\n    { no: 1, name: \"PACKED\" },\n    { no: 2, name: \"EXPANDED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.Utf8Validation\n */\nexport var FeatureSet_Utf8Validation;\n(function (FeatureSet_Utf8Validation) {\n    /**\n     * @generated from enum value: UTF8_VALIDATION_UNKNOWN = 0;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"UTF8_VALIDATION_UNKNOWN\"] = 0] = \"UTF8_VALIDATION_UNKNOWN\";\n    /**\n     * @generated from enum value: VERIFY = 2;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"VERIFY\"] = 2] = \"VERIFY\";\n    /**\n     * @generated from enum value: NONE = 3;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"NONE\"] = 3] = \"NONE\";\n})(FeatureSet_Utf8Validation || (FeatureSet_Utf8Validation = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_Utf8Validation)\nproto2.util.setEnumType(FeatureSet_Utf8Validation, \"google.protobuf.FeatureSet.Utf8Validation\", [\n    { no: 0, name: \"UTF8_VALIDATION_UNKNOWN\" },\n    { no: 2, name: \"VERIFY\" },\n    { no: 3, name: \"NONE\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.MessageEncoding\n */\nexport var FeatureSet_MessageEncoding;\n(function (FeatureSet_MessageEncoding) {\n    /**\n     * @generated from enum value: MESSAGE_ENCODING_UNKNOWN = 0;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"MESSAGE_ENCODING_UNKNOWN\"] = 0] = \"MESSAGE_ENCODING_UNKNOWN\";\n    /**\n     * @generated from enum value: LENGTH_PREFIXED = 1;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"LENGTH_PREFIXED\"] = 1] = \"LENGTH_PREFIXED\";\n    /**\n     * @generated from enum value: DELIMITED = 2;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"DELIMITED\"] = 2] = \"DELIMITED\";\n})(FeatureSet_MessageEncoding || (FeatureSet_MessageEncoding = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_MessageEncoding)\nproto2.util.setEnumType(FeatureSet_MessageEncoding, \"google.protobuf.FeatureSet.MessageEncoding\", [\n    { no: 0, name: \"MESSAGE_ENCODING_UNKNOWN\" },\n    { no: 1, name: \"LENGTH_PREFIXED\" },\n    { no: 2, name: \"DELIMITED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.JsonFormat\n */\nexport var FeatureSet_JsonFormat;\n(function (FeatureSet_JsonFormat) {\n    /**\n     * @generated from enum value: JSON_FORMAT_UNKNOWN = 0;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"JSON_FORMAT_UNKNOWN\"] = 0] = \"JSON_FORMAT_UNKNOWN\";\n    /**\n     * @generated from enum value: ALLOW = 1;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"ALLOW\"] = 1] = \"ALLOW\";\n    /**\n     * @generated from enum value: LEGACY_BEST_EFFORT = 2;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"LEGACY_BEST_EFFORT\"] = 2] = \"LEGACY_BEST_EFFORT\";\n})(FeatureSet_JsonFormat || (FeatureSet_JsonFormat = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_JsonFormat)\nproto2.util.setEnumType(FeatureSet_JsonFormat, \"google.protobuf.FeatureSet.JsonFormat\", [\n    { no: 0, name: \"JSON_FORMAT_UNKNOWN\" },\n    { no: 1, name: \"ALLOW\" },\n    { no: 2, name: \"LEGACY_BEST_EFFORT\" },\n]);\n/**\n * A compiled specification for the defaults of a set of features.  These\n * messages are generated from FeatureSet extensions and can be used to seed\n * feature resolution. The resolution with this object becomes a simple search\n * for the closest matching edition, followed by proto merges.\n *\n * @generated from message google.protobuf.FeatureSetDefaults\n */\nexport class FeatureSetDefaults extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault defaults = 1;\n         */\n        this.defaults = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FeatureSetDefaults().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FeatureSetDefaults().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FeatureSetDefaults().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FeatureSetDefaults, a, b);\n    }\n}\nFeatureSetDefaults.runtime = proto2;\nFeatureSetDefaults.typeName = \"google.protobuf.FeatureSetDefaults\";\nFeatureSetDefaults.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"defaults\", kind: \"message\", T: FeatureSetDefaults_FeatureSetEditionDefault, repeated: true },\n    { no: 4, name: \"minimum_edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 5, name: \"maximum_edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n]);\n/**\n * A map from every known edition with a unique set of defaults to its\n * defaults. Not all editions may be contained here.  For a given edition,\n * the defaults at the closest matching edition ordered at or before it should\n * be used.  This field must be in strict ascending order by edition.\n *\n * @generated from message google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault\n */\nexport class FeatureSetDefaults_FeatureSetEditionDefault extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FeatureSetDefaults_FeatureSetEditionDefault().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FeatureSetDefaults_FeatureSetEditionDefault().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FeatureSetDefaults_FeatureSetEditionDefault().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FeatureSetDefaults_FeatureSetEditionDefault, a, b);\n    }\n}\nFeatureSetDefaults_FeatureSetEditionDefault.runtime = proto2;\nFeatureSetDefaults_FeatureSetEditionDefault.typeName = \"google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault\";\nFeatureSetDefaults_FeatureSetEditionDefault.fields = proto2.util.newFieldList(() => [\n    { no: 3, name: \"edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 4, name: \"overridable_features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 5, name: \"fixed_features\", kind: \"message\", T: FeatureSet, opt: true },\n]);\n/**\n * Encapsulates information about the original source file from which a\n * FileDescriptorProto was generated.\n *\n * @generated from message google.protobuf.SourceCodeInfo\n */\nexport class SourceCodeInfo extends Message {\n    constructor(data) {\n        super();\n        /**\n         * A Location identifies a piece of source code in a .proto file which\n         * corresponds to a particular definition.  This information is intended\n         * to be useful to IDEs, code indexers, documentation generators, and similar\n         * tools.\n         *\n         * For example, say we have a file like:\n         *   message Foo {\n         *     optional string foo = 1;\n         *   }\n         * Let's look at just the field definition:\n         *   optional string foo = 1;\n         *   ^       ^^     ^^  ^  ^^^\n         *   a       bc     de  f  ghi\n         * We have the following locations:\n         *   span   path               represents\n         *   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n         *   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n         *   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n         *   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n         *   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n         *\n         * Notes:\n         * - A location may refer to a repeated field itself (i.e. not to any\n         *   particular index within it).  This is used whenever a set of elements are\n         *   logically enclosed in a single code segment.  For example, an entire\n         *   extend block (possibly containing multiple extension definitions) will\n         *   have an outer location whose path refers to the \"extensions\" repeated\n         *   field without an index.\n         * - Multiple locations may have the same path.  This happens when a single\n         *   logical declaration is spread out across multiple places.  The most\n         *   obvious example is the \"extend\" block again -- there may be multiple\n         *   extend blocks in the same scope, each of which will have the same path.\n         * - A location's span is not always a subset of its parent's span.  For\n         *   example, the \"extendee\" of an extension declaration appears at the\n         *   beginning of the \"extend\" block and is shared by all extensions within\n         *   the block.\n         * - Just because a location's span is a subset of some other location's span\n         *   does not mean that it is a descendant.  For example, a \"group\" defines\n         *   both a type and a field in a single declaration.  Thus, the locations\n         *   corresponding to the type and field and their components will overlap.\n         * - Code which tries to interpret locations should probably be designed to\n         *   ignore those that it doesn't understand, as more types of locations could\n         *   be recorded in the future.\n         *\n         * @generated from field: repeated google.protobuf.SourceCodeInfo.Location location = 1;\n         */\n        this.location = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new SourceCodeInfo().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new SourceCodeInfo().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new SourceCodeInfo().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(SourceCodeInfo, a, b);\n    }\n}\nSourceCodeInfo.runtime = proto2;\nSourceCodeInfo.typeName = \"google.protobuf.SourceCodeInfo\";\nSourceCodeInfo.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"location\", kind: \"message\", T: SourceCodeInfo_Location, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.SourceCodeInfo.Location\n */\nexport class SourceCodeInfo_Location extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Identifies which part of the FileDescriptorProto was defined at this\n         * location.\n         *\n         * Each element is a field number or an index.  They form a path from\n         * the root FileDescriptorProto to the place where the definition appears.\n         * For example, this path:\n         *   [ 4, 3, 2, 7, 1 ]\n         * refers to:\n         *   file.message_type(3)  // 4, 3\n         *       .field(7)         // 2, 7\n         *       .name()           // 1\n         * This is because FileDescriptorProto.message_type has field number 4:\n         *   repeated DescriptorProto message_type = 4;\n         * and DescriptorProto.field has field number 2:\n         *   repeated FieldDescriptorProto field = 2;\n         * and FieldDescriptorProto.name has field number 1:\n         *   optional string name = 1;\n         *\n         * Thus, the above path gives the location of a field name.  If we removed\n         * the last element:\n         *   [ 4, 3, 2, 7 ]\n         * this path refers to the whole field declaration (from the beginning\n         * of the label to the terminating semicolon).\n         *\n         * @generated from field: repeated int32 path = 1 [packed = true];\n         */\n        this.path = [];\n        /**\n         * Always has exactly three or four elements: start line, start column,\n         * end line (optional, otherwise assumed same as start line), end column.\n         * These are packed into a single field for efficiency.  Note that line\n         * and column numbers are zero-based -- typically you will want to add\n         * 1 to each before displaying to a user.\n         *\n         * @generated from field: repeated int32 span = 2 [packed = true];\n         */\n        this.span = [];\n        /**\n         * @generated from field: repeated string leading_detached_comments = 6;\n         */\n        this.leadingDetachedComments = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new SourceCodeInfo_Location().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new SourceCodeInfo_Location().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new SourceCodeInfo_Location().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(SourceCodeInfo_Location, a, b);\n    }\n}\nSourceCodeInfo_Location.runtime = proto2;\nSourceCodeInfo_Location.typeName = \"google.protobuf.SourceCodeInfo.Location\";\nSourceCodeInfo_Location.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"path\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },\n    { no: 2, name: \"span\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },\n    { no: 3, name: \"leading_comments\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"trailing_comments\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 6, name: \"leading_detached_comments\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n/**\n * Describes the relationship between generated code and its original source\n * file. A GeneratedCodeInfo message is associated with only one generated\n * source file, but may contain references to different source .proto files.\n *\n * @generated from message google.protobuf.GeneratedCodeInfo\n */\nexport class GeneratedCodeInfo extends Message {\n    constructor(data) {\n        super();\n        /**\n         * An Annotation connects some span of text in generated code to an element\n         * of its generating .proto file.\n         *\n         * @generated from field: repeated google.protobuf.GeneratedCodeInfo.Annotation annotation = 1;\n         */\n        this.annotation = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GeneratedCodeInfo().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GeneratedCodeInfo().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GeneratedCodeInfo().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(GeneratedCodeInfo, a, b);\n    }\n}\nGeneratedCodeInfo.runtime = proto2;\nGeneratedCodeInfo.typeName = \"google.protobuf.GeneratedCodeInfo\";\nGeneratedCodeInfo.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"annotation\", kind: \"message\", T: GeneratedCodeInfo_Annotation, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.GeneratedCodeInfo.Annotation\n */\nexport class GeneratedCodeInfo_Annotation extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Identifies the element in the original source .proto file. This field\n         * is formatted the same as SourceCodeInfo.Location.path.\n         *\n         * @generated from field: repeated int32 path = 1 [packed = true];\n         */\n        this.path = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GeneratedCodeInfo_Annotation().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GeneratedCodeInfo_Annotation().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GeneratedCodeInfo_Annotation().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(GeneratedCodeInfo_Annotation, a, b);\n    }\n}\nGeneratedCodeInfo_Annotation.runtime = proto2;\nGeneratedCodeInfo_Annotation.typeName = \"google.protobuf.GeneratedCodeInfo.Annotation\";\nGeneratedCodeInfo_Annotation.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"path\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },\n    { no: 2, name: \"source_file\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"begin\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 5, name: \"semantic\", kind: \"enum\", T: proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic), opt: true },\n]);\n/**\n * Represents the identified object's effect on the element in the original\n * .proto file.\n *\n * @generated from enum google.protobuf.GeneratedCodeInfo.Annotation.Semantic\n */\nexport var GeneratedCodeInfo_Annotation_Semantic;\n(function (GeneratedCodeInfo_Annotation_Semantic) {\n    /**\n     * There is no effect or the effect is indescribable.\n     *\n     * @generated from enum value: NONE = 0;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The element is set or otherwise mutated.\n     *\n     * @generated from enum value: SET = 1;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"SET\"] = 1] = \"SET\";\n    /**\n     * An alias to the element is returned.\n     *\n     * @generated from enum value: ALIAS = 2;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"ALIAS\"] = 2] = \"ALIAS\";\n})(GeneratedCodeInfo_Annotation_Semantic || (GeneratedCodeInfo_Annotation_Semantic = {}));\n// Retrieve enum metadata with: proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic)\nproto2.util.setEnumType(GeneratedCodeInfo_Annotation_Semantic, \"google.protobuf.GeneratedCodeInfo.Annotation.Semantic\", [\n    { no: 0, name: \"NONE\" },\n    { no: 1, name: \"SET\" },\n    { no: 2, name: \"ALIAS\" },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Edition, FeatureSet_RepeatedFieldEncoding, FeatureSetDefaults, FieldDescriptorProto_Label, FieldDescriptorProto_Type, FieldOptions_JSType, FileDescriptorProto, FileDescriptorSet, MethodDescriptorProto, MethodOptions_IdempotencyLevel, ServiceDescriptorProto, SourceCodeInfo, } from \"./google/protobuf/descriptor_pb.js\";\nimport { assert } from \"./private/assert.js\";\nimport { MethodIdempotency, MethodKind } from \"./service-type.js\";\nimport { fieldJsonName, findEnumSharedPrefix } from \"./private/names.js\";\nimport { parseTextFormatEnumValue, parseTextFormatScalarValue, } from \"./private/text-format.js\";\nimport { createFeatureResolver } from \"./private/feature-set.js\";\nimport { LongType, ScalarType } from \"./scalar.js\";\nimport { isMessage } from \"./is-message.js\";\n/**\n * Create a DescriptorSet, a convenient interface for working with a set of\n * google.protobuf.FileDescriptorProto.\n *\n * Note that files must be given in topological order, so each file appears\n * before any file that imports it. Protocol buffer compilers always produce\n * files in topological order.\n */\nexport function createDescriptorSet(input, options) {\n    var _a;\n    const cart = {\n        files: [],\n        enums: new Map(),\n        messages: new Map(),\n        services: new Map(),\n        extensions: new Map(),\n        mapEntries: new Map(),\n    };\n    const fileDescriptors = isMessage(input, FileDescriptorSet)\n        ? input.file\n        : input instanceof Uint8Array\n            ? FileDescriptorSet.fromBinary(input).file\n            : input;\n    const resolverByEdition = new Map();\n    for (const proto of fileDescriptors) {\n        const edition = (_a = proto.edition) !== null && _a !== void 0 ? _a : parseFileSyntax(proto.syntax, proto.edition).edition;\n        let resolveFeatures = resolverByEdition.get(edition);\n        if (resolveFeatures === undefined) {\n            resolveFeatures = createFeatureResolver(edition, options === null || options === void 0 ? void 0 : options.featureSetDefaults, options === null || options === void 0 ? void 0 : options.serializationOptions);\n            resolverByEdition.set(edition, resolveFeatures);\n        }\n        addFile(proto, cart, resolveFeatures);\n    }\n    return cart;\n}\n/**\n * Create a descriptor for a file.\n */\nfunction addFile(proto, cart, resolveFeatures) {\n    var _a, _b;\n    assert(proto.name, `invalid FileDescriptorProto: missing name`);\n    const file = Object.assign(Object.assign({ kind: \"file\", proto, deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false }, parseFileSyntax(proto.syntax, proto.edition)), { name: proto.name.replace(/\\.proto/, \"\"), dependencies: findFileDependencies(proto, cart), enums: [], messages: [], extensions: [], services: [], toString() {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- we asserted above\n            return `file ${this.proto.name}`;\n        },\n        getSyntaxComments() {\n            return findComments(this.proto.sourceCodeInfo, [\n                FieldNumber.FileDescriptorProto_Syntax,\n            ]);\n        },\n        getPackageComments() {\n            return findComments(this.proto.sourceCodeInfo, [\n                FieldNumber.FileDescriptorProto_Package,\n            ]);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures((_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        } });\n    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard\n    for (const enumProto of proto.enumType) {\n        addEnum(enumProto, file, undefined, cart, resolveFeatures);\n    }\n    for (const messageProto of proto.messageType) {\n        addMessage(messageProto, file, undefined, cart, resolveFeatures);\n    }\n    for (const serviceProto of proto.service) {\n        addService(serviceProto, file, cart, resolveFeatures);\n    }\n    addExtensions(file, cart, resolveFeatures);\n    for (const mapEntry of cart.mapEntries.values()) {\n        addFields(mapEntry, cart, resolveFeatures);\n    }\n    for (const message of file.messages) {\n        addFields(message, cart, resolveFeatures);\n        addExtensions(message, cart, resolveFeatures);\n    }\n    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard\n    cart.files.push(file);\n}\n/**\n * Create descriptors for extensions, and add them to the message / file,\n * and to our cart.\n * Recurses into nested types.\n */\nfunction addExtensions(desc, cart, resolveFeatures) {\n    switch (desc.kind) {\n        case \"file\":\n            for (const proto of desc.proto.extension) {\n                const ext = newExtension(proto, desc, undefined, cart, resolveFeatures);\n                desc.extensions.push(ext);\n                cart.extensions.set(ext.typeName, ext);\n            }\n            break;\n        case \"message\":\n            for (const proto of desc.proto.extension) {\n                const ext = newExtension(proto, desc.file, desc, cart, resolveFeatures);\n                desc.nestedExtensions.push(ext);\n                cart.extensions.set(ext.typeName, ext);\n            }\n            for (const message of desc.nestedMessages) {\n                addExtensions(message, cart, resolveFeatures);\n            }\n            break;\n    }\n}\n/**\n * Create descriptors for fields and oneof groups, and add them to the message.\n * Recurses into nested types.\n */\nfunction addFields(message, cart, resolveFeatures) {\n    const allOneofs = message.proto.oneofDecl.map((proto) => newOneof(proto, message, resolveFeatures));\n    const oneofsSeen = new Set();\n    for (const proto of message.proto.field) {\n        const oneof = findOneof(proto, allOneofs);\n        const field = newField(proto, message.file, message, oneof, cart, resolveFeatures);\n        message.fields.push(field);\n        if (oneof === undefined) {\n            message.members.push(field);\n        }\n        else {\n            oneof.fields.push(field);\n            if (!oneofsSeen.has(oneof)) {\n                oneofsSeen.add(oneof);\n                message.members.push(oneof);\n            }\n        }\n    }\n    for (const oneof of allOneofs.filter((o) => oneofsSeen.has(o))) {\n        message.oneofs.push(oneof);\n    }\n    for (const child of message.nestedMessages) {\n        addFields(child, cart, resolveFeatures);\n    }\n}\n/**\n * Create a descriptor for an enumeration, and add it our cart and to the\n * parent type, if any.\n */\nfunction addEnum(proto, file, parent, cart, resolveFeatures) {\n    var _a, _b, _c;\n    assert(proto.name, `invalid EnumDescriptorProto: missing name`);\n    const desc = {\n        kind: \"enum\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        parent,\n        name: proto.name,\n        typeName: makeTypeName(proto, parent, file),\n        values: [],\n        sharedPrefix: findEnumSharedPrefix(proto.name, proto.value.map((v) => { var _a; return (_a = v.name) !== null && _a !== void 0 ? _a : \"\"; })),\n        toString() {\n            return `enum ${this.typeName}`;\n        },\n        getComments() {\n            const path = this.parent\n                ? [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.DescriptorProto_EnumType,\n                    this.parent.proto.enumType.indexOf(this.proto),\n                ]\n                : [\n                    FieldNumber.FileDescriptorProto_EnumType,\n                    this.file.proto.enumType.indexOf(this.proto),\n                ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a, _b;\n            return resolveFeatures((_a = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _a !== void 0 ? _a : file.getFeatures(), (_b = proto.options) === null || _b === void 0 ? void 0 : _b.features);\n        },\n    };\n    cart.enums.set(desc.typeName, desc);\n    proto.value.forEach((proto) => {\n        var _a, _b;\n        assert(proto.name, `invalid EnumValueDescriptorProto: missing name`);\n        assert(proto.number !== undefined, `invalid EnumValueDescriptorProto: missing number`);\n        desc.values.push({\n            kind: \"enum_value\",\n            proto,\n            deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n            parent: desc,\n            name: proto.name,\n            number: proto.number,\n            toString() {\n                return `enum value ${desc.typeName}.${this.name}`;\n            },\n            declarationString() {\n                var _a;\n                let str = `${this.name} = ${this.number}`;\n                if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) === true) {\n                    str += \" [deprecated = true]\";\n                }\n                return str;\n            },\n            getComments() {\n                const path = [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.EnumDescriptorProto_Value,\n                    this.parent.proto.value.indexOf(this.proto),\n                ];\n                return findComments(file.proto.sourceCodeInfo, path);\n            },\n            getFeatures() {\n                var _a;\n                return resolveFeatures(desc.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n            },\n        });\n    });\n    ((_c = parent === null || parent === void 0 ? void 0 : parent.nestedEnums) !== null && _c !== void 0 ? _c : file.enums).push(desc);\n}\n/**\n * Create a descriptor for a message, including nested types, and add it to our\n * cart. Note that this does not create descriptors fields.\n */\nfunction addMessage(proto, file, parent, cart, resolveFeatures) {\n    var _a, _b, _c, _d;\n    assert(proto.name, `invalid DescriptorProto: missing name`);\n    const desc = {\n        kind: \"message\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        parent,\n        name: proto.name,\n        typeName: makeTypeName(proto, parent, file),\n        fields: [],\n        oneofs: [],\n        members: [],\n        nestedEnums: [],\n        nestedMessages: [],\n        nestedExtensions: [],\n        toString() {\n            return `message ${this.typeName}`;\n        },\n        getComments() {\n            const path = this.parent\n                ? [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.DescriptorProto_NestedType,\n                    this.parent.proto.nestedType.indexOf(this.proto),\n                ]\n                : [\n                    FieldNumber.FileDescriptorProto_MessageType,\n                    this.file.proto.messageType.indexOf(this.proto),\n                ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a, _b;\n            return resolveFeatures((_a = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _a !== void 0 ? _a : file.getFeatures(), (_b = proto.options) === null || _b === void 0 ? void 0 : _b.features);\n        },\n    };\n    if (((_c = proto.options) === null || _c === void 0 ? void 0 : _c.mapEntry) === true) {\n        cart.mapEntries.set(desc.typeName, desc);\n    }\n    else {\n        ((_d = parent === null || parent === void 0 ? void 0 : parent.nestedMessages) !== null && _d !== void 0 ? _d : file.messages).push(desc);\n        cart.messages.set(desc.typeName, desc);\n    }\n    for (const enumProto of proto.enumType) {\n        addEnum(enumProto, file, desc, cart, resolveFeatures);\n    }\n    for (const messageProto of proto.nestedType) {\n        addMessage(messageProto, file, desc, cart, resolveFeatures);\n    }\n}\n/**\n * Create a descriptor for a service, including methods, and add it to our\n * cart.\n */\nfunction addService(proto, file, cart, resolveFeatures) {\n    var _a, _b;\n    assert(proto.name, `invalid ServiceDescriptorProto: missing name`);\n    const desc = {\n        kind: \"service\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        name: proto.name,\n        typeName: makeTypeName(proto, undefined, file),\n        methods: [],\n        toString() {\n            return `service ${this.typeName}`;\n        },\n        getComments() {\n            const path = [\n                FieldNumber.FileDescriptorProto_Service,\n                this.file.proto.service.indexOf(this.proto),\n            ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(file.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n    file.services.push(desc);\n    cart.services.set(desc.typeName, desc);\n    for (const methodProto of proto.method) {\n        desc.methods.push(newMethod(methodProto, desc, cart, resolveFeatures));\n    }\n}\n/**\n * Create a descriptor for a method.\n */\nfunction newMethod(proto, parent, cart, resolveFeatures) {\n    var _a, _b, _c;\n    assert(proto.name, `invalid MethodDescriptorProto: missing name`);\n    assert(proto.inputType, `invalid MethodDescriptorProto: missing input_type`);\n    assert(proto.outputType, `invalid MethodDescriptorProto: missing output_type`);\n    let methodKind;\n    if (proto.clientStreaming === true && proto.serverStreaming === true) {\n        methodKind = MethodKind.BiDiStreaming;\n    }\n    else if (proto.clientStreaming === true) {\n        methodKind = MethodKind.ClientStreaming;\n    }\n    else if (proto.serverStreaming === true) {\n        methodKind = MethodKind.ServerStreaming;\n    }\n    else {\n        methodKind = MethodKind.Unary;\n    }\n    let idempotency;\n    switch ((_a = proto.options) === null || _a === void 0 ? void 0 : _a.idempotencyLevel) {\n        case MethodOptions_IdempotencyLevel.IDEMPOTENT:\n            idempotency = MethodIdempotency.Idempotent;\n            break;\n        case MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:\n            idempotency = MethodIdempotency.NoSideEffects;\n            break;\n        case MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:\n        case undefined:\n            idempotency = undefined;\n            break;\n    }\n    const input = cart.messages.get(trimLeadingDot(proto.inputType));\n    const output = cart.messages.get(trimLeadingDot(proto.outputType));\n    assert(input, `invalid MethodDescriptorProto: input_type ${proto.inputType} not found`);\n    assert(output, `invalid MethodDescriptorProto: output_type ${proto.inputType} not found`);\n    const name = proto.name;\n    return {\n        kind: \"rpc\",\n        proto,\n        deprecated: (_c = (_b = proto.options) === null || _b === void 0 ? void 0 : _b.deprecated) !== null && _c !== void 0 ? _c : false,\n        parent,\n        name,\n        methodKind,\n        input,\n        output,\n        idempotency,\n        toString() {\n            return `rpc ${parent.typeName}.${name}`;\n        },\n        getComments() {\n            const path = [\n                ...this.parent.getComments().sourcePath,\n                FieldNumber.ServiceDescriptorProto_Method,\n                this.parent.proto.method.indexOf(this.proto),\n            ];\n            return findComments(parent.file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(parent.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n}\n/**\n * Create a descriptor for a oneof group.\n */\nfunction newOneof(proto, parent, resolveFeatures) {\n    assert(proto.name, `invalid OneofDescriptorProto: missing name`);\n    return {\n        kind: \"oneof\",\n        proto,\n        deprecated: false,\n        parent,\n        fields: [],\n        name: proto.name,\n        toString() {\n            return `oneof ${parent.typeName}.${this.name}`;\n        },\n        getComments() {\n            const path = [\n                ...this.parent.getComments().sourcePath,\n                FieldNumber.DescriptorProto_OneofDecl,\n                this.parent.proto.oneofDecl.indexOf(this.proto),\n            ];\n            return findComments(parent.file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(parent.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n}\n/**\n * Create a descriptor for a field.\n */\nfunction newField(proto, file, parent, oneof, cart, resolveFeatures) {\n    var _a, _b, _c;\n    assert(proto.name, `invalid FieldDescriptorProto: missing name`);\n    assert(proto.number, `invalid FieldDescriptorProto: missing number`);\n    assert(proto.type, `invalid FieldDescriptorProto: missing type`);\n    const common = {\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        name: proto.name,\n        number: proto.number,\n        parent,\n        oneof,\n        optional: isOptionalField(proto, file.syntax),\n        packedByDefault: isPackedFieldByDefault(proto, resolveFeatures),\n        packed: isPackedField(file, parent, proto, resolveFeatures),\n        jsonName: proto.jsonName === fieldJsonName(proto.name) ? undefined : proto.jsonName,\n        scalar: undefined,\n        longType: undefined,\n        message: undefined,\n        enum: undefined,\n        mapKey: undefined,\n        mapValue: undefined,\n        declarationString,\n        // toString, getComments, getFeatures are overridden in newExtension\n        toString() {\n            return `field ${this.parent.typeName}.${this.name}`;\n        },\n        getComments() {\n            const path = [\n                ...this.parent.getComments().sourcePath,\n                FieldNumber.DescriptorProto_Field,\n                this.parent.proto.field.indexOf(this.proto),\n            ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(parent.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n    const repeated = proto.label === FieldDescriptorProto_Label.REPEATED;\n    switch (proto.type) {\n        case FieldDescriptorProto_Type.MESSAGE:\n        case FieldDescriptorProto_Type.GROUP: {\n            assert(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);\n            const mapEntry = cart.mapEntries.get(trimLeadingDot(proto.typeName));\n            if (mapEntry !== undefined) {\n                assert(repeated, `invalid FieldDescriptorProto: expected map entry to be repeated`);\n                return Object.assign(Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"map\", repeated: false }), getMapFieldTypes(mapEntry));\n            }\n            const message = cart.messages.get(trimLeadingDot(proto.typeName));\n            assert(message !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);\n            return Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"message\", repeated,\n                message });\n        }\n        case FieldDescriptorProto_Type.ENUM: {\n            assert(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);\n            const e = cart.enums.get(trimLeadingDot(proto.typeName));\n            assert(e !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);\n            return Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"enum\", getDefaultValue,\n                repeated, enum: e });\n        }\n        default: {\n            const scalar = fieldTypeToScalarType[proto.type];\n            assert(scalar, `invalid FieldDescriptorProto: unknown type ${proto.type}`);\n            return Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"scalar\", getDefaultValue,\n                repeated,\n                scalar, longType: ((_c = proto.options) === null || _c === void 0 ? void 0 : _c.jstype) == FieldOptions_JSType.JS_STRING\n                    ? LongType.STRING\n                    : LongType.BIGINT });\n        }\n    }\n}\n/**\n * Create a descriptor for an extension field.\n */\nfunction newExtension(proto, file, parent, cart, resolveFeatures) {\n    assert(proto.extendee, `invalid FieldDescriptorProto: missing extendee`);\n    const field = newField(proto, file, null, // to safe us many lines of duplicated code, we trick the type system\n    undefined, cart, resolveFeatures);\n    const extendee = cart.messages.get(trimLeadingDot(proto.extendee));\n    assert(extendee, `invalid FieldDescriptorProto: extendee ${proto.extendee} not found`);\n    return Object.assign(Object.assign({}, field), { kind: \"extension\", typeName: makeTypeName(proto, parent, file), parent,\n        file,\n        extendee,\n        // Must override toString, getComments, getFeatures from newField, because we\n        // call newField with parent undefined.\n        toString() {\n            return `extension ${this.typeName}`;\n        },\n        getComments() {\n            const path = this.parent\n                ? [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.DescriptorProto_Extension,\n                    this.parent.proto.extension.indexOf(proto),\n                ]\n                : [\n                    FieldNumber.FileDescriptorProto_Extension,\n                    this.file.proto.extension.indexOf(proto),\n                ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures((parent !== null && parent !== void 0 ? parent : file).getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        } });\n}\n/**\n * Parse the \"syntax\" and \"edition\" fields, stripping test editions.\n */\nfunction parseFileSyntax(syntax, edition) {\n    let e;\n    let s;\n    switch (syntax) {\n        case undefined:\n        case \"proto2\":\n            s = \"proto2\";\n            e = Edition.EDITION_PROTO2;\n            break;\n        case \"proto3\":\n            s = \"proto3\";\n            e = Edition.EDITION_PROTO3;\n            break;\n        case \"editions\":\n            s = \"editions\";\n            switch (edition) {\n                case undefined:\n                case Edition.EDITION_1_TEST_ONLY:\n                case Edition.EDITION_2_TEST_ONLY:\n                case Edition.EDITION_99997_TEST_ONLY:\n                case Edition.EDITION_99998_TEST_ONLY:\n                case Edition.EDITION_99999_TEST_ONLY:\n                case Edition.EDITION_UNKNOWN:\n                    e = Edition.EDITION_UNKNOWN;\n                    break;\n                default:\n                    e = edition;\n                    break;\n            }\n            break;\n        default:\n            throw new Error(`invalid FileDescriptorProto: unsupported syntax: ${syntax}`);\n    }\n    if (syntax === \"editions\" && edition === Edition.EDITION_UNKNOWN) {\n        throw new Error(`invalid FileDescriptorProto: syntax ${syntax} cannot have edition ${String(edition)}`);\n    }\n    return {\n        syntax: s,\n        edition: e,\n    };\n}\n/**\n * Resolve dependencies of FileDescriptorProto to DescFile.\n */\nfunction findFileDependencies(proto, cart) {\n    return proto.dependency.map((wantName) => {\n        const dep = cart.files.find((f) => f.proto.name === wantName);\n        assert(dep);\n        return dep;\n    });\n}\n/**\n * Create a fully qualified name for a protobuf type or extension field.\n *\n * The fully qualified name for messages, enumerations, and services is\n * constructed by concatenating the package name (if present), parent\n * message names (for nested types), and the type name. We omit the leading\n * dot added by protobuf compilers. Examples:\n * - mypackage.MyMessage\n * - mypackage.MyMessage.NestedMessage\n *\n * The fully qualified name for extension fields is constructed by\n * concatenating the package name (if present), parent message names (for\n * extensions declared within a message), and the field name. Examples:\n * - mypackage.extfield\n * - mypackage.MyMessage.extfield\n */\nfunction makeTypeName(proto, parent, file) {\n    assert(proto.name, `invalid ${proto.getType().typeName}: missing name`);\n    let typeName;\n    if (parent) {\n        typeName = `${parent.typeName}.${proto.name}`;\n    }\n    else if (file.proto.package !== undefined) {\n        typeName = `${file.proto.package}.${proto.name}`;\n    }\n    else {\n        typeName = `${proto.name}`;\n    }\n    return typeName;\n}\n/**\n * Remove the leading dot from a fully qualified type name.\n */\nfunction trimLeadingDot(typeName) {\n    return typeName.startsWith(\".\") ? typeName.substring(1) : typeName;\n}\nfunction getMapFieldTypes(mapEntry) {\n    var _a, _b;\n    assert((_a = mapEntry.proto.options) === null || _a === void 0 ? void 0 : _a.mapEntry, `invalid DescriptorProto: expected ${mapEntry.toString()} to be a map entry`);\n    assert(mapEntry.fields.length === 2, `invalid DescriptorProto: map entry ${mapEntry.toString()} has ${mapEntry.fields.length} fields`);\n    const keyField = mapEntry.fields.find((f) => f.proto.number === 1);\n    assert(keyField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing key field`);\n    const mapKey = keyField.scalar;\n    assert(mapKey !== undefined &&\n        mapKey !== ScalarType.BYTES &&\n        mapKey !== ScalarType.FLOAT &&\n        mapKey !== ScalarType.DOUBLE, `invalid DescriptorProto: map entry ${mapEntry.toString()} has unexpected key type ${(_b = keyField.proto.type) !== null && _b !== void 0 ? _b : -1}`);\n    const valueField = mapEntry.fields.find((f) => f.proto.number === 2);\n    assert(valueField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing value field`);\n    switch (valueField.fieldKind) {\n        case \"scalar\":\n            return {\n                mapKey,\n                mapValue: Object.assign(Object.assign({}, valueField), { kind: \"scalar\" }),\n            };\n        case \"message\":\n            return {\n                mapKey,\n                mapValue: Object.assign(Object.assign({}, valueField), { kind: \"message\" }),\n            };\n        case \"enum\":\n            return {\n                mapKey,\n                mapValue: Object.assign(Object.assign({}, valueField), { kind: \"enum\" }),\n            };\n        default:\n            throw new Error(\"invalid DescriptorProto: unsupported map entry value field\");\n    }\n}\n/**\n * Did the user put the field in a oneof group?\n * This handles proto3 optionals.\n */\nfunction findOneof(proto, allOneofs) {\n    var _a;\n    const oneofIndex = proto.oneofIndex;\n    if (oneofIndex === undefined) {\n        return undefined;\n    }\n    let oneof;\n    if (proto.proto3Optional !== true) {\n        oneof = allOneofs[oneofIndex];\n        assert(oneof, `invalid FieldDescriptorProto: oneof #${oneofIndex} for field #${(_a = proto.number) !== null && _a !== void 0 ? _a : -1} not found`);\n    }\n    return oneof;\n}\n/**\n * Did the user use the `optional` keyword?\n * This handles proto3 optionals.\n */\nfunction isOptionalField(proto, syntax) {\n    switch (syntax) {\n        case \"proto2\":\n            return (proto.oneofIndex === undefined &&\n                proto.label === FieldDescriptorProto_Label.OPTIONAL);\n        case \"proto3\":\n            return proto.proto3Optional === true;\n        case \"editions\":\n            return false;\n    }\n}\n/**\n * Is this field packed by default? Only valid for repeated enum fields, and\n * for repeated scalar fields except BYTES and STRING.\n *\n * In proto3 syntax, fields are packed by default. In proto2 syntax, fields\n * are unpacked by default. With editions, the default is whatever the edition\n * specifies as a default. In edition 2023, fields are packed by default.\n */\nfunction isPackedFieldByDefault(proto, resolveFeatures) {\n    const { repeatedFieldEncoding } = resolveFeatures();\n    if (repeatedFieldEncoding != FeatureSet_RepeatedFieldEncoding.PACKED) {\n        return false;\n    }\n    // From the proto3 language guide:\n    // > In proto3, repeated fields of scalar numeric types are packed by default.\n    // This information is incomplete - according to the conformance tests, BOOL\n    // and ENUM are packed by default as well. This means only STRING and BYTES\n    // are not packed by default, which makes sense because they are length-delimited.\n    switch (proto.type) {\n        case FieldDescriptorProto_Type.STRING:\n        case FieldDescriptorProto_Type.BYTES:\n        case FieldDescriptorProto_Type.GROUP:\n        case FieldDescriptorProto_Type.MESSAGE:\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Pack this repeated field?\n *\n * Respects field type, proto2/proto3 defaults and the `packed` option, or\n * edition defaults and the edition features.repeated_field_encoding options.\n */\nfunction isPackedField(file, parent, proto, resolveFeatures) {\n    var _a, _b, _c, _d, _e, _f;\n    switch (proto.type) {\n        case FieldDescriptorProto_Type.STRING:\n        case FieldDescriptorProto_Type.BYTES:\n        case FieldDescriptorProto_Type.GROUP:\n        case FieldDescriptorProto_Type.MESSAGE:\n            // length-delimited types cannot be packed\n            return false;\n        default:\n            switch (file.edition) {\n                case Edition.EDITION_PROTO2:\n                    return (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== null && _b !== void 0 ? _b : false;\n                case Edition.EDITION_PROTO3:\n                    return (_d = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.packed) !== null && _d !== void 0 ? _d : true;\n                default: {\n                    const { repeatedFieldEncoding } = resolveFeatures((_e = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _e !== void 0 ? _e : file.getFeatures(), (_f = proto.options) === null || _f === void 0 ? void 0 : _f.features);\n                    return (repeatedFieldEncoding == FeatureSet_RepeatedFieldEncoding.PACKED);\n                }\n            }\n    }\n}\n/**\n * Map from a compiler-generated field type to our ScalarType, which is a\n * subset of field types declared by protobuf enum google.protobuf.FieldDescriptorProto.\n */\nconst fieldTypeToScalarType = {\n    [FieldDescriptorProto_Type.DOUBLE]: ScalarType.DOUBLE,\n    [FieldDescriptorProto_Type.FLOAT]: ScalarType.FLOAT,\n    [FieldDescriptorProto_Type.INT64]: ScalarType.INT64,\n    [FieldDescriptorProto_Type.UINT64]: ScalarType.UINT64,\n    [FieldDescriptorProto_Type.INT32]: ScalarType.INT32,\n    [FieldDescriptorProto_Type.FIXED64]: ScalarType.FIXED64,\n    [FieldDescriptorProto_Type.FIXED32]: ScalarType.FIXED32,\n    [FieldDescriptorProto_Type.BOOL]: ScalarType.BOOL,\n    [FieldDescriptorProto_Type.STRING]: ScalarType.STRING,\n    [FieldDescriptorProto_Type.GROUP]: undefined,\n    [FieldDescriptorProto_Type.MESSAGE]: undefined,\n    [FieldDescriptorProto_Type.BYTES]: ScalarType.BYTES,\n    [FieldDescriptorProto_Type.UINT32]: ScalarType.UINT32,\n    [FieldDescriptorProto_Type.ENUM]: undefined,\n    [FieldDescriptorProto_Type.SFIXED32]: ScalarType.SFIXED32,\n    [FieldDescriptorProto_Type.SFIXED64]: ScalarType.SFIXED64,\n    [FieldDescriptorProto_Type.SINT32]: ScalarType.SINT32,\n    [FieldDescriptorProto_Type.SINT64]: ScalarType.SINT64,\n};\n/**\n * Find comments.\n */\nfunction findComments(sourceCodeInfo, sourcePath) {\n    if (!sourceCodeInfo) {\n        return {\n            leadingDetached: [],\n            sourcePath,\n        };\n    }\n    for (const location of sourceCodeInfo.location) {\n        if (location.path.length !== sourcePath.length) {\n            continue;\n        }\n        if (location.path.some((value, index) => sourcePath[index] !== value)) {\n            continue;\n        }\n        return {\n            leadingDetached: location.leadingDetachedComments,\n            leading: location.leadingComments,\n            trailing: location.trailingComments,\n            sourcePath,\n        };\n    }\n    return {\n        leadingDetached: [],\n        sourcePath,\n    };\n}\n/**\n * The following field numbers are used to find comments in\n * google.protobuf.SourceCodeInfo.\n */\nvar FieldNumber;\n(function (FieldNumber) {\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Package\"] = 2] = \"FileDescriptorProto_Package\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_MessageType\"] = 4] = \"FileDescriptorProto_MessageType\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_EnumType\"] = 5] = \"FileDescriptorProto_EnumType\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Service\"] = 6] = \"FileDescriptorProto_Service\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Extension\"] = 7] = \"FileDescriptorProto_Extension\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Syntax\"] = 12] = \"FileDescriptorProto_Syntax\";\n    FieldNumber[FieldNumber[\"DescriptorProto_Field\"] = 2] = \"DescriptorProto_Field\";\n    FieldNumber[FieldNumber[\"DescriptorProto_NestedType\"] = 3] = \"DescriptorProto_NestedType\";\n    FieldNumber[FieldNumber[\"DescriptorProto_EnumType\"] = 4] = \"DescriptorProto_EnumType\";\n    FieldNumber[FieldNumber[\"DescriptorProto_Extension\"] = 6] = \"DescriptorProto_Extension\";\n    FieldNumber[FieldNumber[\"DescriptorProto_OneofDecl\"] = 8] = \"DescriptorProto_OneofDecl\";\n    FieldNumber[FieldNumber[\"EnumDescriptorProto_Value\"] = 2] = \"EnumDescriptorProto_Value\";\n    FieldNumber[FieldNumber[\"ServiceDescriptorProto_Method\"] = 2] = \"ServiceDescriptorProto_Method\";\n})(FieldNumber || (FieldNumber = {}));\n/**\n * Return a string that matches the definition of a field in the protobuf\n * source. Does not take custom options into account.\n */\nfunction declarationString() {\n    var _a, _b, _c;\n    const parts = [];\n    if (this.repeated) {\n        parts.push(\"repeated\");\n    }\n    if (this.optional) {\n        parts.push(\"optional\");\n    }\n    const file = this.kind === \"extension\" ? this.file : this.parent.file;\n    if (file.syntax == \"proto2\" &&\n        this.proto.label === FieldDescriptorProto_Label.REQUIRED) {\n        parts.push(\"required\");\n    }\n    let type;\n    switch (this.fieldKind) {\n        case \"scalar\":\n            type = ScalarType[this.scalar].toLowerCase();\n            break;\n        case \"enum\":\n            type = this.enum.typeName;\n            break;\n        case \"message\":\n            type = this.message.typeName;\n            break;\n        case \"map\": {\n            const k = ScalarType[this.mapKey].toLowerCase();\n            let v;\n            switch (this.mapValue.kind) {\n                case \"scalar\":\n                    v = ScalarType[this.mapValue.scalar].toLowerCase();\n                    break;\n                case \"enum\":\n                    v = this.mapValue.enum.typeName;\n                    break;\n                case \"message\":\n                    v = this.mapValue.message.typeName;\n                    break;\n            }\n            type = `map<${k}, ${v}>`;\n            break;\n        }\n    }\n    parts.push(`${type} ${this.name} = ${this.number}`);\n    const options = [];\n    if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== undefined) {\n        options.push(`packed = ${this.proto.options.packed.toString()}`);\n    }\n    let defaultValue = this.proto.defaultValue;\n    if (defaultValue !== undefined) {\n        if (this.proto.type == FieldDescriptorProto_Type.BYTES ||\n            this.proto.type == FieldDescriptorProto_Type.STRING) {\n            defaultValue = '\"' + defaultValue.replace('\"', '\\\\\"') + '\"';\n        }\n        options.push(`default = ${defaultValue}`);\n    }\n    if (this.jsonName !== undefined) {\n        options.push(`json_name = \"${this.jsonName}\"`);\n    }\n    if (((_b = this.proto.options) === null || _b === void 0 ? void 0 : _b.jstype) !== undefined) {\n        options.push(`jstype = ${FieldOptions_JSType[this.proto.options.jstype]}`);\n    }\n    if (((_c = this.proto.options) === null || _c === void 0 ? void 0 : _c.deprecated) === true) {\n        options.push(`deprecated = true`);\n    }\n    if (options.length > 0) {\n        parts.push(\"[\" + options.join(\", \") + \"]\");\n    }\n    return parts.join(\" \");\n}\n/**\n * Parses a text-encoded default value (proto2) of a scalar or enum field.\n */\nfunction getDefaultValue() {\n    const d = this.proto.defaultValue;\n    if (d === undefined) {\n        return undefined;\n    }\n    switch (this.fieldKind) {\n        case \"enum\":\n            return parseTextFormatEnumValue(this.enum, d);\n        case \"scalar\":\n            return parseTextFormatScalarValue(this.scalar, d);\n        default:\n            return undefined;\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n * ) to obtain a formatter capable of generating timestamps in this format.\n *\n *\n * @generated from message google.protobuf.Timestamp\n */\nexport class Timestamp extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Represents seconds of UTC time since Unix epoch\n         * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n         * 9999-12-31T23:59:59Z inclusive.\n         *\n         * @generated from field: int64 seconds = 1;\n         */\n        this.seconds = protoInt64.zero;\n        /**\n         * Non-negative fractions of a second at nanosecond resolution. Negative\n         * second values with fractions must still have non-negative nanos values\n         * that count forward in time. Must be from 0 to 999,999,999\n         * inclusive.\n         *\n         * @generated from field: int32 nanos = 2;\n         */\n        this.nanos = 0;\n        proto3.util.initPartial(data, this);\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${proto3.json.debug(json)}`);\n        }\n        const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);\n        }\n        const ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);\n        }\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n            throw new Error(`cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);\n        }\n        this.seconds = protoInt64.parse(ms / 1000);\n        this.nanos = 0;\n        if (matches[7]) {\n            this.nanos = (parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000);\n        }\n        return this;\n    }\n    toJson(options) {\n        const ms = Number(this.seconds) * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);\n        }\n        if (this.nanos < 0) {\n            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative`);\n        }\n        let z = \"Z\";\n        if (this.nanos > 0) {\n            const nanosStr = (this.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") {\n                z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            }\n            else if (nanosStr.substring(6) === \"000\") {\n                z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            }\n            else {\n                z = \".\" + nanosStr + \"Z\";\n            }\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    toDate() {\n        return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));\n    }\n    static now() {\n        return Timestamp.fromDate(new Date());\n    }\n    static fromDate(date) {\n        const ms = date.getTime();\n        return new Timestamp({\n            seconds: protoInt64.parse(Math.floor(ms / 1000)),\n            nanos: (ms % 1000) * 1000000,\n        });\n    }\n    static fromBinary(bytes, options) {\n        return new Timestamp().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Timestamp().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Timestamp().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Timestamp, a, b);\n    }\n}\nTimestamp.runtime = proto3;\nTimestamp.typeName = \"google.protobuf.Timestamp\";\nTimestamp.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"seconds\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"nanos\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A Duration represents a signed, fixed-length span of time represented\n * as a count of seconds and fractions of seconds at nanosecond\n * resolution. It is independent of any calendar and concepts like \"day\"\n * or \"month\". It is related to Timestamp in that the difference between\n * two Timestamp values is a Duration and it can be added or subtracted\n * from a Timestamp. Range is approximately +-10,000 years.\n *\n * # Examples\n *\n * Example 1: Compute Duration from two Timestamps in pseudo code.\n *\n *     Timestamp start = ...;\n *     Timestamp end = ...;\n *     Duration duration = ...;\n *\n *     duration.seconds = end.seconds - start.seconds;\n *     duration.nanos = end.nanos - start.nanos;\n *\n *     if (duration.seconds < 0 && duration.nanos > 0) {\n *       duration.seconds += 1;\n *       duration.nanos -= 1000000000;\n *     } else if (duration.seconds > 0 && duration.nanos < 0) {\n *       duration.seconds -= 1;\n *       duration.nanos += 1000000000;\n *     }\n *\n * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n *\n *     Timestamp start = ...;\n *     Duration duration = ...;\n *     Timestamp end = ...;\n *\n *     end.seconds = start.seconds + duration.seconds;\n *     end.nanos = start.nanos + duration.nanos;\n *\n *     if (end.nanos < 0) {\n *       end.seconds -= 1;\n *       end.nanos += 1000000000;\n *     } else if (end.nanos >= 1000000000) {\n *       end.seconds += 1;\n *       end.nanos -= 1000000000;\n *     }\n *\n * Example 3: Compute Duration from datetime.timedelta in Python.\n *\n *     td = datetime.timedelta(days=3, minutes=10)\n *     duration = Duration()\n *     duration.FromTimedelta(td)\n *\n * # JSON Mapping\n *\n * In JSON format, the Duration type is encoded as a string rather than an\n * object, where the string ends in the suffix \"s\" (indicating seconds) and\n * is preceded by the number of seconds, with nanoseconds expressed as\n * fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n * encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n * be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n * microsecond should be expressed in JSON format as \"3.000001s\".\n *\n *\n * @generated from message google.protobuf.Duration\n */\nexport class Duration extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Signed seconds of the span of time. Must be from -315,576,000,000\n         * to +315,576,000,000 inclusive. Note: these bounds are computed from:\n         * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n         *\n         * @generated from field: int64 seconds = 1;\n         */\n        this.seconds = protoInt64.zero;\n        /**\n         * Signed fractions of a second at nanosecond resolution of the span\n         * of time. Durations less than one second are represented with a 0\n         * `seconds` field and a positive or negative `nanos` field. For durations\n         * of one second or more, a non-zero value for the `nanos` field must be\n         * of the same sign as the `seconds` field. Must be from -999,999,999\n         * to +999,999,999 inclusive.\n         *\n         * @generated from field: int32 nanos = 2;\n         */\n        this.nanos = 0;\n        proto3.util.initPartial(data, this);\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3.json.debug(json)}`);\n        }\n        const match = json.match(/^(-?[0-9]+)(?:\\.([0-9]+))?s/);\n        if (match === null) {\n            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3.json.debug(json)}`);\n        }\n        const longSeconds = Number(match[1]);\n        if (longSeconds > 315576000000 || longSeconds < -315576000000) {\n            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3.json.debug(json)}`);\n        }\n        this.seconds = protoInt64.parse(longSeconds);\n        if (typeof match[2] == \"string\") {\n            const nanosStr = match[2] + \"0\".repeat(9 - match[2].length);\n            this.nanos = parseInt(nanosStr);\n            if (longSeconds < 0 || Object.is(longSeconds, -0)) {\n                this.nanos = -this.nanos;\n            }\n        }\n        return this;\n    }\n    toJson(options) {\n        if (Number(this.seconds) > 315576000000 || Number(this.seconds) < -315576000000) {\n            throw new Error(`cannot encode google.protobuf.Duration to JSON: value out of range`);\n        }\n        let text = this.seconds.toString();\n        if (this.nanos !== 0) {\n            let nanosStr = Math.abs(this.nanos).toString();\n            nanosStr = \"0\".repeat(9 - nanosStr.length) + nanosStr;\n            if (nanosStr.substring(3) === \"000000\") {\n                nanosStr = nanosStr.substring(0, 3);\n            }\n            else if (nanosStr.substring(6) === \"000\") {\n                nanosStr = nanosStr.substring(0, 6);\n            }\n            text += \".\" + nanosStr;\n            if (this.nanos < 0 && Number(this.seconds) == 0) {\n                text = \"-\" + text;\n            }\n        }\n        return text + \"s\";\n    }\n    static fromBinary(bytes, options) {\n        return new Duration().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Duration().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Duration().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Duration, a, b);\n    }\n}\nDuration.runtime = proto3;\nDuration.typeName = \"google.protobuf.Duration\";\nDuration.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"seconds\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"nanos\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `Any` contains an arbitrary serialized protocol buffer message along with a\n * URL that describes the type of the serialized message.\n *\n * Protobuf library provides support to pack/unpack Any values in the form\n * of utility functions or additional generated methods of the Any type.\n *\n * Example 1: Pack and unpack a message in C++.\n *\n *     Foo foo = ...;\n *     Any any;\n *     any.PackFrom(foo);\n *     ...\n *     if (any.UnpackTo(&foo)) {\n *       ...\n *     }\n *\n * Example 2: Pack and unpack a message in Java.\n *\n *     Foo foo = ...;\n *     Any any = Any.pack(foo);\n *     ...\n *     if (any.is(Foo.class)) {\n *       foo = any.unpack(Foo.class);\n *     }\n *     // or ...\n *     if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n *       foo = any.unpack(Foo.getDefaultInstance());\n *     }\n *\n *  Example 3: Pack and unpack a message in Python.\n *\n *     foo = Foo(...)\n *     any = Any()\n *     any.Pack(foo)\n *     ...\n *     if any.Is(Foo.DESCRIPTOR):\n *       any.Unpack(foo)\n *       ...\n *\n *  Example 4: Pack and unpack a message in Go\n *\n *      foo := &pb.Foo{...}\n *      any, err := anypb.New(foo)\n *      if err != nil {\n *        ...\n *      }\n *      ...\n *      foo := &pb.Foo{}\n *      if err := any.UnmarshalTo(foo); err != nil {\n *        ...\n *      }\n *\n * The pack methods provided by protobuf library will by default use\n * 'type.googleapis.com/full.type.name' as the type URL and the unpack\n * methods only use the fully qualified type name after the last '/'\n * in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n * name \"y.z\".\n *\n * JSON\n * ====\n * The JSON representation of an `Any` value uses the regular\n * representation of the deserialized, embedded message, with an\n * additional field `@type` which contains the type URL. Example:\n *\n *     package google.profile;\n *     message Person {\n *       string first_name = 1;\n *       string last_name = 2;\n *     }\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.profile.Person\",\n *       \"firstName\": <string>,\n *       \"lastName\": <string>\n *     }\n *\n * If the embedded message type is well-known and has a custom JSON\n * representation, that representation will be embedded adding a field\n * `value` which holds the custom JSON in addition to the `@type`\n * field. Example (for message [google.protobuf.Duration][]):\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n *       \"value\": \"1.212s\"\n *     }\n *\n *\n * @generated from message google.protobuf.Any\n */\nexport class Any extends Message {\n    constructor(data) {\n        super();\n        /**\n         * A URL/resource name that uniquely identifies the type of the serialized\n         * protocol buffer message. This string must contain at least\n         * one \"/\" character. The last segment of the URL's path must represent\n         * the fully qualified name of the type (as in\n         * `path/google.protobuf.Duration`). The name should be in a canonical form\n         * (e.g., leading \".\" is not accepted).\n         *\n         * In practice, teams usually precompile into the binary all types that they\n         * expect it to use in the context of Any. However, for URLs which use the\n         * scheme `http`, `https`, or no scheme, one can optionally set up a type\n         * server that maps type URLs to message definitions as follows:\n         *\n         * * If no scheme is provided, `https` is assumed.\n         * * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n         *   value in binary format, or produce an error.\n         * * Applications are allowed to cache lookup results based on the\n         *   URL, or have them precompiled into a binary to avoid any\n         *   lookup. Therefore, binary compatibility needs to be preserved\n         *   on changes to types. (Use versioned type names to manage\n         *   breaking changes.)\n         *\n         * Note: this functionality is not currently available in the official\n         * protobuf release, and it is not used for type URLs beginning with\n         * type.googleapis.com. As of May 2023, there are no widely used type server\n         * implementations and no plans to implement one.\n         *\n         * Schemes other than `http`, `https` (or the empty scheme) might be\n         * used with implementation specific semantics.\n         *\n         *\n         * @generated from field: string type_url = 1;\n         */\n        this.typeUrl = \"\";\n        /**\n         * Must be a valid serialized protocol buffer of the above specified type.\n         *\n         * @generated from field: bytes value = 2;\n         */\n        this.value = new Uint8Array(0);\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        var _a;\n        if (this.typeUrl === \"\") {\n            return {};\n        }\n        const typeName = this.typeUrlToName(this.typeUrl);\n        const messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);\n        if (!messageType) {\n            throw new Error(`cannot encode message google.protobuf.Any to JSON: \"${this.typeUrl}\" is not in the type registry`);\n        }\n        const message = messageType.fromBinary(this.value);\n        let json = message.toJson(options);\n        if (typeName.startsWith(\"google.protobuf.\") || (json === null || Array.isArray(json) || typeof json !== \"object\")) {\n            json = { value: json };\n        }\n        json[\"@type\"] = this.typeUrl;\n        return json;\n    }\n    fromJson(json, options) {\n        var _a;\n        if (json === null || Array.isArray(json) || typeof json != \"object\") {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: expected object but got ${json === null ? \"null\" : Array.isArray(json) ? \"array\" : typeof json}`);\n        }\n        if (Object.keys(json).length == 0) {\n            return this;\n        }\n        const typeUrl = json[\"@type\"];\n        if (typeof typeUrl != \"string\" || typeUrl == \"\") {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: \"@type\" is empty`);\n        }\n        const typeName = this.typeUrlToName(typeUrl), messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);\n        if (!messageType) {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: ${typeUrl} is not in the type registry`);\n        }\n        let message;\n        if (typeName.startsWith(\"google.protobuf.\") && Object.prototype.hasOwnProperty.call(json, \"value\")) {\n            message = messageType.fromJson(json[\"value\"], options);\n        }\n        else {\n            const copy = Object.assign({}, json);\n            delete copy[\"@type\"];\n            message = messageType.fromJson(copy, options);\n        }\n        this.packFrom(message);\n        return this;\n    }\n    packFrom(message) {\n        this.value = message.toBinary();\n        this.typeUrl = this.typeNameToUrl(message.getType().typeName);\n    }\n    unpackTo(target) {\n        if (!this.is(target.getType())) {\n            return false;\n        }\n        target.fromBinary(this.value);\n        return true;\n    }\n    unpack(registry) {\n        if (this.typeUrl === \"\") {\n            return undefined;\n        }\n        const messageType = registry.findMessage(this.typeUrlToName(this.typeUrl));\n        if (!messageType) {\n            return undefined;\n        }\n        return messageType.fromBinary(this.value);\n    }\n    is(type) {\n        if (this.typeUrl === '') {\n            return false;\n        }\n        const name = this.typeUrlToName(this.typeUrl);\n        let typeName = '';\n        if (typeof type === 'string') {\n            typeName = type;\n        }\n        else {\n            typeName = type.typeName;\n        }\n        return name === typeName;\n    }\n    typeNameToUrl(name) {\n        return `type.googleapis.com/${name}`;\n    }\n    typeUrlToName(url) {\n        if (!url.length) {\n            throw new Error(`invalid type url: ${url}`);\n        }\n        const slash = url.lastIndexOf(\"/\");\n        const name = slash >= 0 ? url.substring(slash + 1) : url;\n        if (!name.length) {\n            throw new Error(`invalid type url: ${url}`);\n        }\n        return name;\n    }\n    static pack(message) {\n        const any = new Any();\n        any.packFrom(message);\n        return any;\n    }\n    static fromBinary(bytes, options) {\n        return new Any().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Any().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Any().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Any, a, b);\n    }\n}\nAny.runtime = proto3;\nAny.typeName = \"google.protobuf.Any\";\nAny.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A generic empty message that you can re-use to avoid defining duplicated\n * empty messages in your APIs. A typical example is to use it as the request\n * or the response type of an API method. For instance:\n *\n *     service Foo {\n *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n *     }\n *\n *\n * @generated from message google.protobuf.Empty\n */\nexport class Empty extends Message {\n    constructor(data) {\n        super();\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Empty().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Empty().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Empty().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Empty, a, b);\n    }\n}\nEmpty.runtime = proto3;\nEmpty.typeName = \"google.protobuf.Empty\";\nEmpty.fields = proto3.util.newFieldList(() => []);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `FieldMask` represents a set of symbolic field paths, for example:\n *\n *     paths: \"f.a\"\n *     paths: \"f.b.d\"\n *\n * Here `f` represents a field in some root message, `a` and `b`\n * fields in the message found in `f`, and `d` a field found in the\n * message in `f.b`.\n *\n * Field masks are used to specify a subset of fields that should be\n * returned by a get operation or modified by an update operation.\n * Field masks also have a custom JSON encoding (see below).\n *\n * # Field Masks in Projections\n *\n * When used in the context of a projection, a response message or\n * sub-message is filtered by the API to only contain those fields as\n * specified in the mask. For example, if the mask in the previous\n * example is applied to a response message as follows:\n *\n *     f {\n *       a : 22\n *       b {\n *         d : 1\n *         x : 2\n *       }\n *       y : 13\n *     }\n *     z: 8\n *\n * The result will not contain specific values for fields x,y and z\n * (their value will be set to the default, and omitted in proto text\n * output):\n *\n *\n *     f {\n *       a : 22\n *       b {\n *         d : 1\n *       }\n *     }\n *\n * A repeated field is not allowed except at the last position of a\n * paths string.\n *\n * If a FieldMask object is not present in a get operation, the\n * operation applies to all fields (as if a FieldMask of all fields\n * had been specified).\n *\n * Note that a field mask does not necessarily apply to the\n * top-level response message. In case of a REST get operation, the\n * field mask applies directly to the response, but in case of a REST\n * list operation, the mask instead applies to each individual message\n * in the returned resource list. In case of a REST custom method,\n * other definitions may be used. Where the mask applies will be\n * clearly documented together with its declaration in the API.  In\n * any case, the effect on the returned resource/resources is required\n * behavior for APIs.\n *\n * # Field Masks in Update Operations\n *\n * A field mask in update operations specifies which fields of the\n * targeted resource are going to be updated. The API is required\n * to only change the values of the fields as specified in the mask\n * and leave the others untouched. If a resource is passed in to\n * describe the updated values, the API ignores the values of all\n * fields not covered by the mask.\n *\n * If a repeated field is specified for an update operation, new values will\n * be appended to the existing repeated field in the target resource. Note that\n * a repeated field is only allowed in the last position of a `paths` string.\n *\n * If a sub-message is specified in the last position of the field mask for an\n * update operation, then new value will be merged into the existing sub-message\n * in the target resource.\n *\n * For example, given the target message:\n *\n *     f {\n *       b {\n *         d: 1\n *         x: 2\n *       }\n *       c: [1]\n *     }\n *\n * And an update message:\n *\n *     f {\n *       b {\n *         d: 10\n *       }\n *       c: [2]\n *     }\n *\n * then if the field mask is:\n *\n *  paths: [\"f.b\", \"f.c\"]\n *\n * then the result will be:\n *\n *     f {\n *       b {\n *         d: 10\n *         x: 2\n *       }\n *       c: [1, 2]\n *     }\n *\n * An implementation may provide options to override this default behavior for\n * repeated and message fields.\n *\n * In order to reset a field's value to the default, the field must\n * be in the mask and set to the default value in the provided resource.\n * Hence, in order to reset all fields of a resource, provide a default\n * instance of the resource and set all fields in the mask, or do\n * not provide a mask as described below.\n *\n * If a field mask is not present on update, the operation applies to\n * all fields (as if a field mask of all fields has been specified).\n * Note that in the presence of schema evolution, this may mean that\n * fields the client does not know and has therefore not filled into\n * the request will be reset to their default. If this is unwanted\n * behavior, a specific service may require a client to always specify\n * a field mask, producing an error if not.\n *\n * As with get operations, the location of the resource which\n * describes the updated values in the request message depends on the\n * operation kind. In any case, the effect of the field mask is\n * required to be honored by the API.\n *\n * ## Considerations for HTTP REST\n *\n * The HTTP kind of an update operation which uses a field mask must\n * be set to PATCH instead of PUT in order to satisfy HTTP semantics\n * (PUT must only be used for full updates).\n *\n * # JSON Encoding of Field Masks\n *\n * In JSON, a field mask is encoded as a single string where paths are\n * separated by a comma. Fields name in each path are converted\n * to/from lower-camel naming conventions.\n *\n * As an example, consider the following message declarations:\n *\n *     message Profile {\n *       User user = 1;\n *       Photo photo = 2;\n *     }\n *     message User {\n *       string display_name = 1;\n *       string address = 2;\n *     }\n *\n * In proto a field mask for `Profile` may look as such:\n *\n *     mask {\n *       paths: \"user.display_name\"\n *       paths: \"photo\"\n *     }\n *\n * In JSON, the same mask is represented as below:\n *\n *     {\n *       mask: \"user.displayName,photo\"\n *     }\n *\n * # Field Masks and Oneof Fields\n *\n * Field masks treat fields in oneofs just as regular fields. Consider the\n * following message:\n *\n *     message SampleMessage {\n *       oneof test_oneof {\n *         string name = 4;\n *         SubMessage sub_message = 9;\n *       }\n *     }\n *\n * The field mask can be:\n *\n *     mask {\n *       paths: \"name\"\n *     }\n *\n * Or:\n *\n *     mask {\n *       paths: \"sub_message\"\n *     }\n *\n * Note that oneof type names (\"test_oneof\" in this case) cannot be used in\n * paths.\n *\n * ## Field Mask Verification\n *\n * The implementation of any API method which has a FieldMask type field in the\n * request should verify the included field paths, and return an\n * `INVALID_ARGUMENT` error if any path is unmappable.\n *\n * @generated from message google.protobuf.FieldMask\n */\nexport class FieldMask extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The set of field mask paths.\n         *\n         * @generated from field: repeated string paths = 1;\n         */\n        this.paths = [];\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        // Converts snake_case to protoCamelCase according to the convention\n        // used by protoc to convert a field name to a JSON name.\n        function protoCamelCase(snakeCase) {\n            let capNext = false;\n            const b = [];\n            for (let i = 0; i < snakeCase.length; i++) {\n                let c = snakeCase.charAt(i);\n                switch (c) {\n                    case '_':\n                        capNext = true;\n                        break;\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9':\n                        b.push(c);\n                        capNext = false;\n                        break;\n                    default:\n                        if (capNext) {\n                            capNext = false;\n                            c = c.toUpperCase();\n                        }\n                        b.push(c);\n                        break;\n                }\n            }\n            return b.join('');\n        }\n        return this.paths.map(p => {\n            if (p.match(/_[0-9]?_/g) || p.match(/[A-Z]/g)) {\n                throw new Error(\"cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name \\\"\" + p + \"\\\" is irreversible\");\n            }\n            return protoCamelCase(p);\n        }).join(\",\");\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(\"cannot decode google.protobuf.FieldMask from JSON: \" + proto3.json.debug(json));\n        }\n        if (json === \"\") {\n            return this;\n        }\n        function camelToSnake(str) {\n            if (str.includes(\"_\")) {\n                throw new Error(\"cannot decode google.protobuf.FieldMask from JSON: path names must be lowerCamelCase\");\n            }\n            const sc = str.replace(/[A-Z]/g, letter => \"_\" + letter.toLowerCase());\n            return (sc[0] === \"_\") ? sc.substring(1) : sc;\n        }\n        this.paths = json.split(\",\").map(camelToSnake);\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new FieldMask().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldMask().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldMask().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(FieldMask, a, b);\n    }\n}\nFieldMask.runtime = proto3;\nFieldMask.typeName = \"google.protobuf.FieldMask\";\nFieldMask.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"paths\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// @generated by protoc-gen-es v1.10.1 with parameter \"bootstrap_wkt=true,ts_nocheck=false,target=ts\"\n// @generated from file google/protobuf/struct.proto (package google.protobuf, syntax proto3)\n/* eslint-disable */\nimport { proto3 } from \"../../proto3.js\";\nimport { Message } from \"../../message.js\";\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n * The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from enum google.protobuf.NullValue\n */\nexport var NullValue;\n(function (NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from enum value: NULL_VALUE = 0;\n     */\n    NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// Retrieve enum metadata with: proto3.getEnumType(NullValue)\nproto3.util.setEnumType(NullValue, \"google.protobuf.NullValue\", [\n    { no: 0, name: \"NULL_VALUE\" },\n]);\n/**\n * `Struct` represents a structured data value, consisting of fields\n * which map to dynamically typed values. In some languages, `Struct`\n * might be supported by a native representation. For example, in\n * scripting languages like JS a struct is represented as an\n * object. The details of that representation are described together\n * with the proto support for the language.\n *\n * The JSON representation for `Struct` is JSON object.\n *\n * @generated from message google.protobuf.Struct\n */\nexport class Struct extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Unordered map of dynamically typed values.\n         *\n         * @generated from field: map<string, google.protobuf.Value> fields = 1;\n         */\n        this.fields = {};\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        const json = {};\n        for (const [k, v] of Object.entries(this.fields)) {\n            json[k] = v.toJson(options);\n        }\n        return json;\n    }\n    fromJson(json, options) {\n        if (typeof json != \"object\" || json == null || Array.isArray(json)) {\n            throw new Error(\"cannot decode google.protobuf.Struct from JSON \" + proto3.json.debug(json));\n        }\n        for (const [k, v] of Object.entries(json)) {\n            this.fields[k] = Value.fromJson(v);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Struct().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Struct().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Struct().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Struct, a, b);\n    }\n}\nStruct.runtime = proto3;\nStruct.typeName = \"google.protobuf.Struct\";\nStruct.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"fields\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: { kind: \"message\", T: Value } },\n]);\n/**\n * `Value` represents a dynamically typed value which can be either\n * null, a number, a string, a boolean, a recursive struct value, or a\n * list of values. A producer of value is expected to set one of these\n * variants. Absence of any variant indicates an error.\n *\n * The JSON representation for `Value` is JSON value.\n *\n * @generated from message google.protobuf.Value\n */\nexport class Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The kind of value.\n         *\n         * @generated from oneof google.protobuf.Value.kind\n         */\n        this.kind = { case: undefined };\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        switch (this.kind.case) {\n            case \"nullValue\":\n                return null;\n            case \"numberValue\":\n                if (!Number.isFinite(this.kind.value)) {\n                    throw new Error(\"google.protobuf.Value cannot be NaN or Infinity\");\n                }\n                return this.kind.value;\n            case \"boolValue\":\n                return this.kind.value;\n            case \"stringValue\":\n                return this.kind.value;\n            case \"structValue\":\n            case \"listValue\":\n                return this.kind.value.toJson(Object.assign(Object.assign({}, options), { emitDefaultValues: true }));\n        }\n        throw new Error(\"google.protobuf.Value must have a value\");\n    }\n    fromJson(json, options) {\n        switch (typeof json) {\n            case \"number\":\n                this.kind = { case: \"numberValue\", value: json };\n                break;\n            case \"string\":\n                this.kind = { case: \"stringValue\", value: json };\n                break;\n            case \"boolean\":\n                this.kind = { case: \"boolValue\", value: json };\n                break;\n            case \"object\":\n                if (json === null) {\n                    this.kind = { case: \"nullValue\", value: NullValue.NULL_VALUE };\n                }\n                else if (Array.isArray(json)) {\n                    this.kind = { case: \"listValue\", value: ListValue.fromJson(json) };\n                }\n                else {\n                    this.kind = { case: \"structValue\", value: Struct.fromJson(json) };\n                }\n                break;\n            default:\n                throw new Error(\"cannot decode google.protobuf.Value from JSON \" + proto3.json.debug(json));\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Value, a, b);\n    }\n}\nValue.runtime = proto3;\nValue.typeName = \"google.protobuf.Value\";\nValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"null_value\", kind: \"enum\", T: proto3.getEnumType(NullValue), oneof: \"kind\" },\n    { no: 2, name: \"number_value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */, oneof: \"kind\" },\n    { no: 3, name: \"string_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"kind\" },\n    { no: 4, name: \"bool_value\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"kind\" },\n    { no: 5, name: \"struct_value\", kind: \"message\", T: Struct, oneof: \"kind\" },\n    { no: 6, name: \"list_value\", kind: \"message\", T: ListValue, oneof: \"kind\" },\n]);\n/**\n * `ListValue` is a wrapper around a repeated field of values.\n *\n * The JSON representation for `ListValue` is JSON array.\n *\n * @generated from message google.protobuf.ListValue\n */\nexport class ListValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Repeated field of dynamically typed values.\n         *\n         * @generated from field: repeated google.protobuf.Value values = 1;\n         */\n        this.values = [];\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return this.values.map(v => v.toJson());\n    }\n    fromJson(json, options) {\n        if (!Array.isArray(json)) {\n            throw new Error(\"cannot decode google.protobuf.ListValue from JSON \" + proto3.json.debug(json));\n        }\n        for (let e of json) {\n            this.values.push(Value.fromJson(e));\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new ListValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ListValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ListValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(ListValue, a, b);\n    }\n}\nListValue.runtime = proto3;\nListValue.typeName = \"google.protobuf.ListValue\";\nListValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"values\", kind: \"message\", T: Value, repeated: true },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\nimport { ScalarType } from \"../../scalar.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\n/**\n * Wrapper message for `double`.\n *\n * The JSON representation for `DoubleValue` is JSON number.\n *\n * @generated from message google.protobuf.DoubleValue\n */\nexport class DoubleValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The double value.\n         *\n         * @generated from field: double value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.DOUBLE, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.DOUBLE, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.DoubleValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new DoubleValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DoubleValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DoubleValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(DoubleValue, a, b);\n    }\n}\nDoubleValue.runtime = proto3;\nDoubleValue.typeName = \"google.protobuf.DoubleValue\";\nDoubleValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n]);\nDoubleValue.fieldWrapper = {\n    wrapField(value) {\n        return new DoubleValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `float`.\n *\n * The JSON representation for `FloatValue` is JSON number.\n *\n * @generated from message google.protobuf.FloatValue\n */\nexport class FloatValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The float value.\n         *\n         * @generated from field: float value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.FLOAT, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.FLOAT, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.FloatValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new FloatValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FloatValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FloatValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(FloatValue, a, b);\n    }\n}\nFloatValue.runtime = proto3;\nFloatValue.typeName = \"google.protobuf.FloatValue\";\nFloatValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n]);\nFloatValue.fieldWrapper = {\n    wrapField(value) {\n        return new FloatValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `int64`.\n *\n * The JSON representation for `Int64Value` is JSON string.\n *\n * @generated from message google.protobuf.Int64Value\n */\nexport class Int64Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The int64 value.\n         *\n         * @generated from field: int64 value = 1;\n         */\n        this.value = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.INT64, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.INT64, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.Int64Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Int64Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Int64Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Int64Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Int64Value, a, b);\n    }\n}\nInt64Value.runtime = proto3;\nInt64Value.typeName = \"google.protobuf.Int64Value\";\nInt64Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n]);\nInt64Value.fieldWrapper = {\n    wrapField(value) {\n        return new Int64Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `uint64`.\n *\n * The JSON representation for `UInt64Value` is JSON string.\n *\n * @generated from message google.protobuf.UInt64Value\n */\nexport class UInt64Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The uint64 value.\n         *\n         * @generated from field: uint64 value = 1;\n         */\n        this.value = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.UINT64, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.UINT64, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.UInt64Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new UInt64Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UInt64Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UInt64Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(UInt64Value, a, b);\n    }\n}\nUInt64Value.runtime = proto3;\nUInt64Value.typeName = \"google.protobuf.UInt64Value\";\nUInt64Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n]);\nUInt64Value.fieldWrapper = {\n    wrapField(value) {\n        return new UInt64Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `int32`.\n *\n * The JSON representation for `Int32Value` is JSON number.\n *\n * @generated from message google.protobuf.Int32Value\n */\nexport class Int32Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The int32 value.\n         *\n         * @generated from field: int32 value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.INT32, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.INT32, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.Int32Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Int32Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Int32Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Int32Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Int32Value, a, b);\n    }\n}\nInt32Value.runtime = proto3;\nInt32Value.typeName = \"google.protobuf.Int32Value\";\nInt32Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\nInt32Value.fieldWrapper = {\n    wrapField(value) {\n        return new Int32Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `uint32`.\n *\n * The JSON representation for `UInt32Value` is JSON number.\n *\n * @generated from message google.protobuf.UInt32Value\n */\nexport class UInt32Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The uint32 value.\n         *\n         * @generated from field: uint32 value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.UINT32, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.UINT32, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.UInt32Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new UInt32Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UInt32Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UInt32Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(UInt32Value, a, b);\n    }\n}\nUInt32Value.runtime = proto3;\nUInt32Value.typeName = \"google.protobuf.UInt32Value\";\nUInt32Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n]);\nUInt32Value.fieldWrapper = {\n    wrapField(value) {\n        return new UInt32Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `bool`.\n *\n * The JSON representation for `BoolValue` is JSON `true` and `false`.\n *\n * @generated from message google.protobuf.BoolValue\n */\nexport class BoolValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The bool value.\n         *\n         * @generated from field: bool value = 1;\n         */\n        this.value = false;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.BOOL, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.BOOL, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.BoolValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new BoolValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new BoolValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new BoolValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(BoolValue, a, b);\n    }\n}\nBoolValue.runtime = proto3;\nBoolValue.typeName = \"google.protobuf.BoolValue\";\nBoolValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n]);\nBoolValue.fieldWrapper = {\n    wrapField(value) {\n        return new BoolValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `string`.\n *\n * The JSON representation for `StringValue` is JSON string.\n *\n * @generated from message google.protobuf.StringValue\n */\nexport class StringValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The string value.\n         *\n         * @generated from field: string value = 1;\n         */\n        this.value = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.STRING, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.STRING, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.StringValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new StringValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new StringValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new StringValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(StringValue, a, b);\n    }\n}\nStringValue.runtime = proto3;\nStringValue.typeName = \"google.protobuf.StringValue\";\nStringValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\nStringValue.fieldWrapper = {\n    wrapField(value) {\n        return new StringValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `bytes`.\n *\n * The JSON representation for `BytesValue` is JSON string.\n *\n * @generated from message google.protobuf.BytesValue\n */\nexport class BytesValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The bytes value.\n         *\n         * @generated from field: bytes value = 1;\n         */\n        this.value = new Uint8Array(0);\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.BYTES, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.BYTES, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.BytesValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new BytesValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new BytesValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new BytesValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(BytesValue, a, b);\n    }\n}\nBytesValue.runtime = proto3;\nBytesValue.typeName = \"google.protobuf.BytesValue\";\nBytesValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n]);\nBytesValue.fieldWrapper = {\n    wrapField(value) {\n        return new BytesValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { proto3 } from \"./proto3.js\";\nimport { proto2 } from \"./proto2.js\";\nimport { ScalarType } from \"./scalar.js\";\nimport { localName } from \"./private/names.js\";\nimport { Timestamp } from \"./google/protobuf/timestamp_pb.js\";\nimport { Duration } from \"./google/protobuf/duration_pb.js\";\nimport { Any } from \"./google/protobuf/any_pb.js\";\nimport { Empty } from \"./google/protobuf/empty_pb.js\";\nimport { FieldMask } from \"./google/protobuf/field_mask_pb.js\";\nimport { ListValue, NullValue, Struct, Value, } from \"./google/protobuf/struct_pb.js\";\nimport { getEnumType } from \"./private/enum.js\";\nimport { BoolValue, BytesValue, DoubleValue, FloatValue, Int32Value, Int64Value, StringValue, UInt32Value, UInt64Value, } from \"./google/protobuf/wrappers_pb.js\";\nimport { FieldDescriptorProto_Label, FieldDescriptorProto_Type, FileDescriptorSet, } from \"./google/protobuf/descriptor_pb.js\";\nimport { createDescriptorSet } from \"./create-descriptor-set.js\";\nimport { isMessage } from \"./is-message.js\";\n// well-known message types with specialized JSON representation\nconst wkMessages = [\n    Any,\n    Duration,\n    Empty,\n    FieldMask,\n    Struct,\n    Value,\n    ListValue,\n    Timestamp,\n    Duration,\n    DoubleValue,\n    FloatValue,\n    Int64Value,\n    Int32Value,\n    UInt32Value,\n    UInt64Value,\n    BoolValue,\n    StringValue,\n    BytesValue,\n];\n// well-known enum types with specialized JSON representation\nconst wkEnums = [getEnumType(NullValue)];\n/**\n * Create a registry from a set of descriptors. The types returned by this\n * registry behave exactly like types from generated code.\n *\n * This function accepts google.protobuf.FileDescriptorSet in serialized or\n * deserialized form. Alternatively, it also accepts a DescriptorSet (see\n * createDescriptorSet()).\n *\n * By default, all well-known types with a specialized JSON representation\n * are replaced with their generated counterpart in this package.\n */\nexport function createRegistryFromDescriptors(input, replaceWkt = true) {\n    const set = input instanceof Uint8Array || isMessage(input, FileDescriptorSet)\n        ? createDescriptorSet(input)\n        : input;\n    const enums = new Map();\n    const messages = new Map();\n    const extensions = new Map();\n    const extensionsByExtendee = new Map();\n    const services = {};\n    if (replaceWkt) {\n        for (const mt of wkMessages) {\n            messages.set(mt.typeName, mt);\n        }\n        for (const et of wkEnums) {\n            enums.set(et.typeName, et);\n        }\n    }\n    return {\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findEnum(typeName) {\n            const existing = enums.get(typeName);\n            if (existing) {\n                return existing;\n            }\n            const desc = set.enums.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const runtime = desc.file.syntax == \"proto3\" ? proto3 : proto2;\n            const type = runtime.makeEnumType(typeName, desc.values.map((u) => ({\n                no: u.number,\n                name: u.name,\n                localName: localName(u),\n            })), {});\n            enums.set(typeName, type);\n            return type;\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findMessage(typeName) {\n            const existing = messages.get(typeName);\n            if (existing) {\n                return existing;\n            }\n            const desc = set.messages.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const runtime = desc.file.syntax == \"proto3\" ? proto3 : proto2;\n            const fields = [];\n            const type = runtime.makeMessageType(typeName, () => fields, {\n                localName: localName(desc),\n            });\n            messages.set(typeName, type);\n            for (const field of desc.fields) {\n                fields.push(makeFieldInfo(field, this));\n            }\n            return type;\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findService(typeName) {\n            const existing = services[typeName];\n            if (existing) {\n                return existing;\n            }\n            const desc = set.services.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const methods = {};\n            for (const method of desc.methods) {\n                const I = resolve(method.input, this, method);\n                const O = resolve(method.output, this, method);\n                methods[localName(method)] = {\n                    name: method.name,\n                    I,\n                    O,\n                    kind: method.methodKind,\n                    idempotency: method.idempotency,\n                    // We do not surface options at this time\n                    // options: {},\n                };\n            }\n            return (services[typeName] = {\n                typeName: desc.typeName,\n                methods,\n            });\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findExtensionFor(typeName, no) {\n            var _a;\n            if (!set.messages.has(typeName)) {\n                return undefined;\n            }\n            let extensionsByNo = extensionsByExtendee.get(typeName);\n            if (!extensionsByNo) {\n                // maintain a lookup for extension desc by number\n                extensionsByNo = new Map();\n                extensionsByExtendee.set(typeName, extensionsByNo);\n                for (const desc of set.extensions.values()) {\n                    if (desc.extendee.typeName == typeName) {\n                        extensionsByNo.set(desc.number, desc);\n                    }\n                }\n            }\n            const desc = (_a = extensionsByExtendee.get(typeName)) === null || _a === void 0 ? void 0 : _a.get(no);\n            return desc ? this.findExtension(desc.typeName) : undefined;\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findExtension(typeName) {\n            const existing = extensions.get(typeName);\n            if (existing) {\n                return existing;\n            }\n            const desc = set.extensions.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const extendee = resolve(desc.extendee, this, desc);\n            const runtime = desc.file.syntax == \"proto3\" ? proto3 : proto2;\n            const ext = runtime.makeExtension(typeName, extendee, makeFieldInfo(desc, this));\n            extensions.set(typeName, ext);\n            return ext;\n        },\n    };\n}\nfunction makeFieldInfo(desc, registry) {\n    var _a;\n    const f = {\n        kind: desc.fieldKind,\n        no: desc.number,\n        name: desc.name,\n        jsonName: desc.jsonName,\n        delimited: desc.proto.type == FieldDescriptorProto_Type.GROUP,\n        repeated: desc.repeated,\n        packed: desc.packed,\n        oneof: (_a = desc.oneof) === null || _a === void 0 ? void 0 : _a.name,\n        opt: desc.optional,\n        req: desc.proto.label === FieldDescriptorProto_Label.REQUIRED,\n    };\n    switch (desc.fieldKind) {\n        case \"map\": {\n            assert(desc.kind == \"field\"); // maps are not allowed for extensions\n            let T;\n            switch (desc.mapValue.kind) {\n                case \"scalar\":\n                    T = desc.mapValue.scalar;\n                    break;\n                case \"enum\": {\n                    T = resolve(desc.mapValue.enum, registry, desc);\n                    break;\n                }\n                case \"message\": {\n                    T = resolve(desc.mapValue.message, registry, desc);\n                    break;\n                }\n            }\n            f.K = desc.mapKey;\n            f.V = {\n                kind: desc.mapValue.kind,\n                T,\n            };\n            break;\n        }\n        case \"message\": {\n            f.T = resolve(desc.message, registry, desc);\n            break;\n        }\n        case \"enum\": {\n            f.T = resolve(desc.enum, registry, desc);\n            f.default = desc.getDefaultValue();\n            break;\n        }\n        case \"scalar\": {\n            f.L = desc.longType;\n            f.T = desc.scalar;\n            f.default = desc.getDefaultValue();\n            break;\n        }\n    }\n    return f;\n}\nfunction resolve(desc, registry, context) {\n    const type = desc.kind == \"message\"\n        ? registry.findMessage(desc.typeName)\n        : registry.findEnum(desc.typeName);\n    assert(type, `${desc.toString()}\" for ${context.toString()} not found`);\n    return type;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../../message.js\";\nimport { proto2 } from \"../../../proto2.js\";\nimport { FileDescriptorProto, GeneratedCodeInfo } from \"../descriptor_pb.js\";\n/**\n * The version number of protocol compiler.\n *\n * @generated from message google.protobuf.compiler.Version\n */\nexport class Version extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Version().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Version().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Version().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(Version, a, b);\n    }\n}\nVersion.runtime = proto2;\nVersion.typeName = \"google.protobuf.compiler.Version\";\nVersion.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"major\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"minor\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 3, name: \"patch\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"suffix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n]);\n/**\n * An encoded CodeGeneratorRequest is written to the plugin's stdin.\n *\n * @generated from message google.protobuf.compiler.CodeGeneratorRequest\n */\nexport class CodeGeneratorRequest extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The .proto files that were explicitly listed on the command-line.  The\n         * code generator should generate code only for these files.  Each file's\n         * descriptor will be included in proto_file, below.\n         *\n         * @generated from field: repeated string file_to_generate = 1;\n         */\n        this.fileToGenerate = [];\n        /**\n         * FileDescriptorProtos for all files in files_to_generate and everything\n         * they import.  The files will appear in topological order, so each file\n         * appears before any file that imports it.\n         *\n         * Note: the files listed in files_to_generate will include runtime-retention\n         * options only, but all other files will include source-retention options.\n         * The source_file_descriptors field below is available in case you need\n         * source-retention options for files_to_generate.\n         *\n         * protoc guarantees that all proto_files will be written after\n         * the fields above, even though this is not technically guaranteed by the\n         * protobuf wire format.  This theoretically could allow a plugin to stream\n         * in the FileDescriptorProtos and handle them one by one rather than read\n         * the entire set into memory at once.  However, as of this writing, this\n         * is not similarly optimized on protoc's end -- it will store all fields in\n         * memory at once before sending them to the plugin.\n         *\n         * Type names of fields and extensions in the FileDescriptorProto are always\n         * fully qualified.\n         *\n         * @generated from field: repeated google.protobuf.FileDescriptorProto proto_file = 15;\n         */\n        this.protoFile = [];\n        /**\n         * File descriptors with all options, including source-retention options.\n         * These descriptors are only provided for the files listed in\n         * files_to_generate.\n         *\n         * @generated from field: repeated google.protobuf.FileDescriptorProto source_file_descriptors = 17;\n         */\n        this.sourceFileDescriptors = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CodeGeneratorRequest().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CodeGeneratorRequest().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CodeGeneratorRequest().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(CodeGeneratorRequest, a, b);\n    }\n}\nCodeGeneratorRequest.runtime = proto2;\nCodeGeneratorRequest.typeName = \"google.protobuf.compiler.CodeGeneratorRequest\";\nCodeGeneratorRequest.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"file_to_generate\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"parameter\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 15, name: \"proto_file\", kind: \"message\", T: FileDescriptorProto, repeated: true },\n    { no: 17, name: \"source_file_descriptors\", kind: \"message\", T: FileDescriptorProto, repeated: true },\n    { no: 3, name: \"compiler_version\", kind: \"message\", T: Version, opt: true },\n]);\n/**\n * The plugin writes an encoded CodeGeneratorResponse to stdout.\n *\n * @generated from message google.protobuf.compiler.CodeGeneratorResponse\n */\nexport class CodeGeneratorResponse extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.compiler.CodeGeneratorResponse.File file = 15;\n         */\n        this.file = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CodeGeneratorResponse().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CodeGeneratorResponse().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CodeGeneratorResponse().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(CodeGeneratorResponse, a, b);\n    }\n}\nCodeGeneratorResponse.runtime = proto2;\nCodeGeneratorResponse.typeName = \"google.protobuf.compiler.CodeGeneratorResponse\";\nCodeGeneratorResponse.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"error\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"supported_features\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 3, name: \"minimum_edition\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"maximum_edition\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 15, name: \"file\", kind: \"message\", T: CodeGeneratorResponse_File, repeated: true },\n]);\n/**\n * Sync with code_generator.h.\n *\n * @generated from enum google.protobuf.compiler.CodeGeneratorResponse.Feature\n */\nexport var CodeGeneratorResponse_Feature;\n(function (CodeGeneratorResponse_Feature) {\n    /**\n     * @generated from enum value: FEATURE_NONE = 0;\n     */\n    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * @generated from enum value: FEATURE_PROTO3_OPTIONAL = 1;\n     */\n    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature[\"PROTO3_OPTIONAL\"] = 1] = \"PROTO3_OPTIONAL\";\n    /**\n     * @generated from enum value: FEATURE_SUPPORTS_EDITIONS = 2;\n     */\n    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature[\"SUPPORTS_EDITIONS\"] = 2] = \"SUPPORTS_EDITIONS\";\n})(CodeGeneratorResponse_Feature || (CodeGeneratorResponse_Feature = {}));\n// Retrieve enum metadata with: proto2.getEnumType(CodeGeneratorResponse_Feature)\nproto2.util.setEnumType(CodeGeneratorResponse_Feature, \"google.protobuf.compiler.CodeGeneratorResponse.Feature\", [\n    { no: 0, name: \"FEATURE_NONE\" },\n    { no: 1, name: \"FEATURE_PROTO3_OPTIONAL\" },\n    { no: 2, name: \"FEATURE_SUPPORTS_EDITIONS\" },\n]);\n/**\n * Represents a single generated file.\n *\n * @generated from message google.protobuf.compiler.CodeGeneratorResponse.File\n */\nexport class CodeGeneratorResponse_File extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CodeGeneratorResponse_File().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CodeGeneratorResponse_File().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CodeGeneratorResponse_File().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(CodeGeneratorResponse_File, a, b);\n    }\n}\nCodeGeneratorResponse_File.runtime = proto2;\nCodeGeneratorResponse_File.typeName = \"google.protobuf.compiler.CodeGeneratorResponse.File\";\nCodeGeneratorResponse_File.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"insertion_point\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 15, name: \"content\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 16, name: \"generated_code_info\", kind: \"message\", T: GeneratedCodeInfo, opt: true },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `SourceContext` represents information about the source of a\n * protobuf element, like the file in which it is defined.\n *\n * @generated from message google.protobuf.SourceContext\n */\nexport class SourceContext extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The path-qualified name of the .proto file that contained the associated\n         * protobuf element.  For example: `\"google/protobuf/source_context.proto\"`.\n         *\n         * @generated from field: string file_name = 1;\n         */\n        this.fileName = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new SourceContext().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new SourceContext().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new SourceContext().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(SourceContext, a, b);\n    }\n}\nSourceContext.runtime = proto3;\nSourceContext.typeName = \"google.protobuf.SourceContext\";\nSourceContext.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"file_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// @generated by protoc-gen-es v1.10.1 with parameter \"bootstrap_wkt=true,ts_nocheck=false,target=ts\"\n// @generated from file google/protobuf/type.proto (package google.protobuf, syntax proto3)\n/* eslint-disable */\nimport { proto3 } from \"../../proto3.js\";\nimport { Message } from \"../../message.js\";\nimport { SourceContext } from \"./source_context_pb.js\";\nimport { Any } from \"./any_pb.js\";\n/**\n * The syntax in which a protocol buffer element is defined.\n *\n * @generated from enum google.protobuf.Syntax\n */\nexport var Syntax;\n(function (Syntax) {\n    /**\n     * Syntax `proto2`.\n     *\n     * @generated from enum value: SYNTAX_PROTO2 = 0;\n     */\n    Syntax[Syntax[\"PROTO2\"] = 0] = \"PROTO2\";\n    /**\n     * Syntax `proto3`.\n     *\n     * @generated from enum value: SYNTAX_PROTO3 = 1;\n     */\n    Syntax[Syntax[\"PROTO3\"] = 1] = \"PROTO3\";\n    /**\n     * Syntax `editions`.\n     *\n     * @generated from enum value: SYNTAX_EDITIONS = 2;\n     */\n    Syntax[Syntax[\"EDITIONS\"] = 2] = \"EDITIONS\";\n})(Syntax || (Syntax = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Syntax)\nproto3.util.setEnumType(Syntax, \"google.protobuf.Syntax\", [\n    { no: 0, name: \"SYNTAX_PROTO2\" },\n    { no: 1, name: \"SYNTAX_PROTO3\" },\n    { no: 2, name: \"SYNTAX_EDITIONS\" },\n]);\n/**\n * A protocol buffer message type.\n *\n * @generated from message google.protobuf.Type\n */\nexport class Type extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The fully qualified message name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * The list of fields.\n         *\n         * @generated from field: repeated google.protobuf.Field fields = 2;\n         */\n        this.fields = [];\n        /**\n         * The list of types appearing in `oneof` definitions in this type.\n         *\n         * @generated from field: repeated string oneofs = 3;\n         */\n        this.oneofs = [];\n        /**\n         * The protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 4;\n         */\n        this.options = [];\n        /**\n         * The source syntax.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 6;\n         */\n        this.syntax = Syntax.PROTO2;\n        /**\n         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.\n         *\n         * @generated from field: string edition = 7;\n         */\n        this.edition = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Type().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Type().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Type().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Type, a, b);\n    }\n}\nType.runtime = proto3;\nType.typeName = \"google.protobuf.Type\";\nType.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"fields\", kind: \"message\", T: Field, repeated: true },\n    { no: 3, name: \"oneofs\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 5, name: \"source_context\", kind: \"message\", T: SourceContext },\n    { no: 6, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n    { no: 7, name: \"edition\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n/**\n * A single field of a message type.\n *\n * @generated from message google.protobuf.Field\n */\nexport class Field extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The field type.\n         *\n         * @generated from field: google.protobuf.Field.Kind kind = 1;\n         */\n        this.kind = Field_Kind.TYPE_UNKNOWN;\n        /**\n         * The field cardinality.\n         *\n         * @generated from field: google.protobuf.Field.Cardinality cardinality = 2;\n         */\n        this.cardinality = Field_Cardinality.UNKNOWN;\n        /**\n         * The field number.\n         *\n         * @generated from field: int32 number = 3;\n         */\n        this.number = 0;\n        /**\n         * The field name.\n         *\n         * @generated from field: string name = 4;\n         */\n        this.name = \"\";\n        /**\n         * The field type URL, without the scheme, for message or enumeration\n         * types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.\n         *\n         * @generated from field: string type_url = 6;\n         */\n        this.typeUrl = \"\";\n        /**\n         * The index of the field type in `Type.oneofs`, for message or enumeration\n         * types. The first type has index 1; zero means the type is not in the list.\n         *\n         * @generated from field: int32 oneof_index = 7;\n         */\n        this.oneofIndex = 0;\n        /**\n         * Whether to use alternative packed wire representation.\n         *\n         * @generated from field: bool packed = 8;\n         */\n        this.packed = false;\n        /**\n         * The protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 9;\n         */\n        this.options = [];\n        /**\n         * The field JSON name.\n         *\n         * @generated from field: string json_name = 10;\n         */\n        this.jsonName = \"\";\n        /**\n         * The string value of the default value of this field. Proto2 syntax only.\n         *\n         * @generated from field: string default_value = 11;\n         */\n        this.defaultValue = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Field().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Field().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Field().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Field, a, b);\n    }\n}\nField.runtime = proto3;\nField.typeName = \"google.protobuf.Field\";\nField.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"kind\", kind: \"enum\", T: proto3.getEnumType(Field_Kind) },\n    { no: 2, name: \"cardinality\", kind: \"enum\", T: proto3.getEnumType(Field_Cardinality) },\n    { no: 3, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"oneof_index\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 8, name: \"packed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 10, name: \"json_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 11, name: \"default_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n/**\n * Basic field types.\n *\n * @generated from enum google.protobuf.Field.Kind\n */\nexport var Field_Kind;\n(function (Field_Kind) {\n    /**\n     * Field type unknown.\n     *\n     * @generated from enum value: TYPE_UNKNOWN = 0;\n     */\n    Field_Kind[Field_Kind[\"TYPE_UNKNOWN\"] = 0] = \"TYPE_UNKNOWN\";\n    /**\n     * Field type double.\n     *\n     * @generated from enum value: TYPE_DOUBLE = 1;\n     */\n    Field_Kind[Field_Kind[\"TYPE_DOUBLE\"] = 1] = \"TYPE_DOUBLE\";\n    /**\n     * Field type float.\n     *\n     * @generated from enum value: TYPE_FLOAT = 2;\n     */\n    Field_Kind[Field_Kind[\"TYPE_FLOAT\"] = 2] = \"TYPE_FLOAT\";\n    /**\n     * Field type int64.\n     *\n     * @generated from enum value: TYPE_INT64 = 3;\n     */\n    Field_Kind[Field_Kind[\"TYPE_INT64\"] = 3] = \"TYPE_INT64\";\n    /**\n     * Field type uint64.\n     *\n     * @generated from enum value: TYPE_UINT64 = 4;\n     */\n    Field_Kind[Field_Kind[\"TYPE_UINT64\"] = 4] = \"TYPE_UINT64\";\n    /**\n     * Field type int32.\n     *\n     * @generated from enum value: TYPE_INT32 = 5;\n     */\n    Field_Kind[Field_Kind[\"TYPE_INT32\"] = 5] = \"TYPE_INT32\";\n    /**\n     * Field type fixed64.\n     *\n     * @generated from enum value: TYPE_FIXED64 = 6;\n     */\n    Field_Kind[Field_Kind[\"TYPE_FIXED64\"] = 6] = \"TYPE_FIXED64\";\n    /**\n     * Field type fixed32.\n     *\n     * @generated from enum value: TYPE_FIXED32 = 7;\n     */\n    Field_Kind[Field_Kind[\"TYPE_FIXED32\"] = 7] = \"TYPE_FIXED32\";\n    /**\n     * Field type bool.\n     *\n     * @generated from enum value: TYPE_BOOL = 8;\n     */\n    Field_Kind[Field_Kind[\"TYPE_BOOL\"] = 8] = \"TYPE_BOOL\";\n    /**\n     * Field type string.\n     *\n     * @generated from enum value: TYPE_STRING = 9;\n     */\n    Field_Kind[Field_Kind[\"TYPE_STRING\"] = 9] = \"TYPE_STRING\";\n    /**\n     * Field type group. Proto2 syntax only, and deprecated.\n     *\n     * @generated from enum value: TYPE_GROUP = 10;\n     */\n    Field_Kind[Field_Kind[\"TYPE_GROUP\"] = 10] = \"TYPE_GROUP\";\n    /**\n     * Field type message.\n     *\n     * @generated from enum value: TYPE_MESSAGE = 11;\n     */\n    Field_Kind[Field_Kind[\"TYPE_MESSAGE\"] = 11] = \"TYPE_MESSAGE\";\n    /**\n     * Field type bytes.\n     *\n     * @generated from enum value: TYPE_BYTES = 12;\n     */\n    Field_Kind[Field_Kind[\"TYPE_BYTES\"] = 12] = \"TYPE_BYTES\";\n    /**\n     * Field type uint32.\n     *\n     * @generated from enum value: TYPE_UINT32 = 13;\n     */\n    Field_Kind[Field_Kind[\"TYPE_UINT32\"] = 13] = \"TYPE_UINT32\";\n    /**\n     * Field type enum.\n     *\n     * @generated from enum value: TYPE_ENUM = 14;\n     */\n    Field_Kind[Field_Kind[\"TYPE_ENUM\"] = 14] = \"TYPE_ENUM\";\n    /**\n     * Field type sfixed32.\n     *\n     * @generated from enum value: TYPE_SFIXED32 = 15;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SFIXED32\"] = 15] = \"TYPE_SFIXED32\";\n    /**\n     * Field type sfixed64.\n     *\n     * @generated from enum value: TYPE_SFIXED64 = 16;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SFIXED64\"] = 16] = \"TYPE_SFIXED64\";\n    /**\n     * Field type sint32.\n     *\n     * @generated from enum value: TYPE_SINT32 = 17;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SINT32\"] = 17] = \"TYPE_SINT32\";\n    /**\n     * Field type sint64.\n     *\n     * @generated from enum value: TYPE_SINT64 = 18;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SINT64\"] = 18] = \"TYPE_SINT64\";\n})(Field_Kind || (Field_Kind = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Field_Kind)\nproto3.util.setEnumType(Field_Kind, \"google.protobuf.Field.Kind\", [\n    { no: 0, name: \"TYPE_UNKNOWN\" },\n    { no: 1, name: \"TYPE_DOUBLE\" },\n    { no: 2, name: \"TYPE_FLOAT\" },\n    { no: 3, name: \"TYPE_INT64\" },\n    { no: 4, name: \"TYPE_UINT64\" },\n    { no: 5, name: \"TYPE_INT32\" },\n    { no: 6, name: \"TYPE_FIXED64\" },\n    { no: 7, name: \"TYPE_FIXED32\" },\n    { no: 8, name: \"TYPE_BOOL\" },\n    { no: 9, name: \"TYPE_STRING\" },\n    { no: 10, name: \"TYPE_GROUP\" },\n    { no: 11, name: \"TYPE_MESSAGE\" },\n    { no: 12, name: \"TYPE_BYTES\" },\n    { no: 13, name: \"TYPE_UINT32\" },\n    { no: 14, name: \"TYPE_ENUM\" },\n    { no: 15, name: \"TYPE_SFIXED32\" },\n    { no: 16, name: \"TYPE_SFIXED64\" },\n    { no: 17, name: \"TYPE_SINT32\" },\n    { no: 18, name: \"TYPE_SINT64\" },\n]);\n/**\n * Whether a field is optional, required, or repeated.\n *\n * @generated from enum google.protobuf.Field.Cardinality\n */\nexport var Field_Cardinality;\n(function (Field_Cardinality) {\n    /**\n     * For fields with unknown cardinality.\n     *\n     * @generated from enum value: CARDINALITY_UNKNOWN = 0;\n     */\n    Field_Cardinality[Field_Cardinality[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * For optional fields.\n     *\n     * @generated from enum value: CARDINALITY_OPTIONAL = 1;\n     */\n    Field_Cardinality[Field_Cardinality[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /**\n     * For required fields. Proto2 syntax only.\n     *\n     * @generated from enum value: CARDINALITY_REQUIRED = 2;\n     */\n    Field_Cardinality[Field_Cardinality[\"REQUIRED\"] = 2] = \"REQUIRED\";\n    /**\n     * For repeated fields.\n     *\n     * @generated from enum value: CARDINALITY_REPEATED = 3;\n     */\n    Field_Cardinality[Field_Cardinality[\"REPEATED\"] = 3] = \"REPEATED\";\n})(Field_Cardinality || (Field_Cardinality = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Field_Cardinality)\nproto3.util.setEnumType(Field_Cardinality, \"google.protobuf.Field.Cardinality\", [\n    { no: 0, name: \"CARDINALITY_UNKNOWN\" },\n    { no: 1, name: \"CARDINALITY_OPTIONAL\" },\n    { no: 2, name: \"CARDINALITY_REQUIRED\" },\n    { no: 3, name: \"CARDINALITY_REPEATED\" },\n]);\n/**\n * Enum type definition.\n *\n * @generated from message google.protobuf.Enum\n */\nexport class Enum extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Enum type name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * Enum value definitions.\n         *\n         * @generated from field: repeated google.protobuf.EnumValue enumvalue = 2;\n         */\n        this.enumvalue = [];\n        /**\n         * Protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 3;\n         */\n        this.options = [];\n        /**\n         * The source syntax.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 5;\n         */\n        this.syntax = Syntax.PROTO2;\n        /**\n         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.\n         *\n         * @generated from field: string edition = 6;\n         */\n        this.edition = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Enum().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Enum().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Enum().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Enum, a, b);\n    }\n}\nEnum.runtime = proto3;\nEnum.typeName = \"google.protobuf.Enum\";\nEnum.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"enumvalue\", kind: \"message\", T: EnumValue, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 4, name: \"source_context\", kind: \"message\", T: SourceContext },\n    { no: 5, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n    { no: 6, name: \"edition\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n/**\n * Enum value definition.\n *\n * @generated from message google.protobuf.EnumValue\n */\nexport class EnumValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Enum value name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * Enum value number.\n         *\n         * @generated from field: int32 number = 2;\n         */\n        this.number = 0;\n        /**\n         * Protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 3;\n         */\n        this.options = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(EnumValue, a, b);\n    }\n}\nEnumValue.runtime = proto3;\nEnumValue.typeName = \"google.protobuf.EnumValue\";\nEnumValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"options\", kind: \"message\", T: Option, repeated: true },\n]);\n/**\n * A protocol buffer option, which can be attached to a message, field,\n * enumeration, etc.\n *\n * @generated from message google.protobuf.Option\n */\nexport class Option extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The option's name. For protobuf built-in options (options defined in\n         * descriptor.proto), this is the short name. For example, `\"map_entry\"`.\n         * For custom options, it should be the fully-qualified name. For example,\n         * `\"google.api.http\"`.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Option().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Option().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Option().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Option, a, b);\n    }\n}\nOption.runtime = proto3;\nOption.typeName = \"google.protobuf.Option\";\nOption.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"value\", kind: \"message\", T: Any },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { Option, Syntax } from \"./type_pb.js\";\nimport { SourceContext } from \"./source_context_pb.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * Api is a light-weight descriptor for an API Interface.\n *\n * Interfaces are also described as \"protocol buffer services\" in some contexts,\n * such as by the \"service\" keyword in a .proto file, but they are different\n * from API Services, which represent a concrete implementation of an interface\n * as opposed to simply a description of methods and bindings. They are also\n * sometimes simply referred to as \"APIs\" in other contexts, such as the name of\n * this message itself. See https://cloud.google.com/apis/design/glossary for\n * detailed terminology.\n *\n * @generated from message google.protobuf.Api\n */\nexport class Api extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The fully qualified name of this interface, including package name\n         * followed by the interface's simple name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * The methods of this interface, in unspecified order.\n         *\n         * @generated from field: repeated google.protobuf.Method methods = 2;\n         */\n        this.methods = [];\n        /**\n         * Any metadata attached to the interface.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 3;\n         */\n        this.options = [];\n        /**\n         * A version string for this interface. If specified, must have the form\n         * `major-version.minor-version`, as in `1.10`. If the minor version is\n         * omitted, it defaults to zero. If the entire version field is empty, the\n         * major version is derived from the package name, as outlined below. If the\n         * field is not empty, the version in the package name will be verified to be\n         * consistent with what is provided here.\n         *\n         * The versioning schema uses [semantic\n         * versioning](http://semver.org) where the major version number\n         * indicates a breaking change and the minor version an additive,\n         * non-breaking change. Both version numbers are signals to users\n         * what to expect from different versions, and should be carefully\n         * chosen based on the product plan.\n         *\n         * The major version is also reflected in the package name of the\n         * interface, which must end in `v<major-version>`, as in\n         * `google.feature.v1`. For major versions 0 and 1, the suffix can\n         * be omitted. Zero major versions must only be used for\n         * experimental, non-GA interfaces.\n         *\n         *\n         * @generated from field: string version = 4;\n         */\n        this.version = \"\";\n        /**\n         * Included interfaces. See [Mixin][].\n         *\n         * @generated from field: repeated google.protobuf.Mixin mixins = 6;\n         */\n        this.mixins = [];\n        /**\n         * The source syntax of the service.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 7;\n         */\n        this.syntax = Syntax.PROTO2;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Api().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Api().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Api().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Api, a, b);\n    }\n}\nApi.runtime = proto3;\nApi.typeName = \"google.protobuf.Api\";\nApi.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"methods\", kind: \"message\", T: Method, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 4, name: \"version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"source_context\", kind: \"message\", T: SourceContext },\n    { no: 6, name: \"mixins\", kind: \"message\", T: Mixin, repeated: true },\n    { no: 7, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n]);\n/**\n * Method represents a method of an API interface.\n *\n * @generated from message google.protobuf.Method\n */\nexport class Method extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The simple name of this method.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * A URL of the input message type.\n         *\n         * @generated from field: string request_type_url = 2;\n         */\n        this.requestTypeUrl = \"\";\n        /**\n         * If true, the request is streamed.\n         *\n         * @generated from field: bool request_streaming = 3;\n         */\n        this.requestStreaming = false;\n        /**\n         * The URL of the output message type.\n         *\n         * @generated from field: string response_type_url = 4;\n         */\n        this.responseTypeUrl = \"\";\n        /**\n         * If true, the response is streamed.\n         *\n         * @generated from field: bool response_streaming = 5;\n         */\n        this.responseStreaming = false;\n        /**\n         * Any metadata attached to the method.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 6;\n         */\n        this.options = [];\n        /**\n         * The source syntax of this method.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 7;\n         */\n        this.syntax = Syntax.PROTO2;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Method().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Method().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Method().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Method, a, b);\n    }\n}\nMethod.runtime = proto3;\nMethod.typeName = \"google.protobuf.Method\";\nMethod.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"request_type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"request_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"response_type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"response_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 7, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n]);\n/**\n * Declares an API Interface to be included in this interface. The including\n * interface must redeclare all the methods from the included interface, but\n * documentation and options are inherited as follows:\n *\n * - If after comment and whitespace stripping, the documentation\n *   string of the redeclared method is empty, it will be inherited\n *   from the original method.\n *\n * - Each annotation belonging to the service config (http,\n *   visibility) which is not set in the redeclared method will be\n *   inherited.\n *\n * - If an http annotation is inherited, the path pattern will be\n *   modified as follows. Any version prefix will be replaced by the\n *   version of the including interface plus the [root][] path if\n *   specified.\n *\n * Example of a simple mixin:\n *\n *     package google.acl.v1;\n *     service AccessControl {\n *       // Get the underlying ACL object.\n *       rpc GetAcl(GetAclRequest) returns (Acl) {\n *         option (google.api.http).get = \"/v1/{resource=**}:getAcl\";\n *       }\n *     }\n *\n *     package google.storage.v2;\n *     service Storage {\n *       rpc GetAcl(GetAclRequest) returns (Acl);\n *\n *       // Get a data record.\n *       rpc GetData(GetDataRequest) returns (Data) {\n *         option (google.api.http).get = \"/v2/{resource=**}\";\n *       }\n *     }\n *\n * Example of a mixin configuration:\n *\n *     apis:\n *     - name: google.storage.v2.Storage\n *       mixins:\n *       - name: google.acl.v1.AccessControl\n *\n * The mixin construct implies that all methods in `AccessControl` are\n * also declared with same name and request/response types in\n * `Storage`. A documentation generator or annotation processor will\n * see the effective `Storage.GetAcl` method after inherting\n * documentation and annotations as follows:\n *\n *     service Storage {\n *       // Get the underlying ACL object.\n *       rpc GetAcl(GetAclRequest) returns (Acl) {\n *         option (google.api.http).get = \"/v2/{resource=**}:getAcl\";\n *       }\n *       ...\n *     }\n *\n * Note how the version in the path pattern changed from `v1` to `v2`.\n *\n * If the `root` field in the mixin is specified, it should be a\n * relative path under which inherited HTTP paths are placed. Example:\n *\n *     apis:\n *     - name: google.storage.v2.Storage\n *       mixins:\n *       - name: google.acl.v1.AccessControl\n *         root: acls\n *\n * This implies the following inherited HTTP annotation:\n *\n *     service Storage {\n *       // Get the underlying ACL object.\n *       rpc GetAcl(GetAclRequest) returns (Acl) {\n *         option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\";\n *       }\n *       ...\n *     }\n *\n * @generated from message google.protobuf.Mixin\n */\nexport class Mixin extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The fully qualified name of the interface which is included.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * If non-empty specifies a path under which inherited HTTP paths\n         * are rooted.\n         *\n         * @generated from field: string root = 2;\n         */\n        this.root = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Mixin().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Mixin().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Mixin().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Mixin, a, b);\n    }\n}\nMixin.runtime = proto3;\nMixin.typeName = \"google.protobuf.Mixin\";\nMixin.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"root\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n", null, null, null, null, null, null, null, null, null, null, null, "// src/charSet.ts\nfunction indexCharacterSet(options) {\n  const dicts = createCharSetDicts(options.chars);\n  const limits = integerLimits(\n    dicts,\n    options.firstPositive,\n    options.mostPositive,\n    options.mostNegative\n  );\n  const jitterRange = options.jitterRange ?? Math.floor(Math.pow(dicts.length, 3) / 5);\n  const paddingRange = paddingDict(jitterRange, dicts.length);\n  return {\n    chars: options.chars,\n    byChar: dicts.byChar,\n    byCode: dicts.byCode,\n    length: dicts.length,\n    first: dicts.byCode[0],\n    last: dicts.byCode[dicts.length - 1],\n    firstPositive: limits.firstPositive,\n    mostPositive: limits.mostPositive,\n    firstNegative: limits.firstNegative,\n    mostNegative: limits.mostNegative,\n    jitterRange,\n    paddingDict: paddingRange\n  };\n}\nfunction createCharSetDicts(charSet) {\n  const byCode = {};\n  const byChar = {};\n  const length = charSet.length;\n  for (let i = 0; i < length; i++) {\n    const char = charSet[i];\n    byCode[i] = char;\n    byChar[char] = i;\n  }\n  return {\n    byCode,\n    byChar,\n    length\n  };\n}\nfunction integerLimits(dicts, firstPositive, mostPositive, mostNegative) {\n  const firstPositiveIndex = firstPositive ? dicts.byChar[firstPositive] : Math.ceil(dicts.length / 2);\n  const mostPositiveIndex = mostPositive ? dicts.byChar[mostPositive] : dicts.length - 1;\n  const mostNegativeIndex = mostNegative ? dicts.byChar[mostNegative] : 0;\n  if (firstPositiveIndex === void 0 || mostPositiveIndex === void 0 || mostNegativeIndex === void 0) {\n    throw new Error(\"invalid charSet\");\n  }\n  if (mostPositiveIndex - firstPositiveIndex < 3) {\n    throw new Error(\n      \"mostPositive must be at least 3 characters away from neutral\"\n    );\n  }\n  if (firstPositiveIndex - mostNegativeIndex < 3) {\n    throw new Error(\n      \"mostNegative must be at least 3 characters away from neutral\"\n    );\n  }\n  return {\n    firstPositive: dicts.byCode[firstPositiveIndex],\n    mostPositive: dicts.byCode[mostPositiveIndex],\n    firstNegative: dicts.byCode[firstPositiveIndex - 1],\n    mostNegative: dicts.byCode[mostNegativeIndex]\n  };\n}\nfunction paddingDict(jitterRange, charSetLength) {\n  const paddingDict2 = {};\n  let distance = 0;\n  for (let i = 0; i < 100; i++) {\n    paddingDict2[i] = Math.pow(charSetLength, i);\n    if (paddingDict2[i] > jitterRange) {\n      break;\n    }\n  }\n  return paddingDict2;\n}\nvar _base62CharSet = null;\nfunction base62CharSet() {\n  if (_base62CharSet)\n    return _base62CharSet;\n  return _base62CharSet = indexCharacterSet({\n    // Base62 are all the alphanumeric characters, database and user friendly\n    // For shorter strings and more room you could opt for more characters\n    chars: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n    // This gives us nice human readable keys to start with a0 a1 etc\n    firstPositive: \"a\",\n    mostPositive: \"z\",\n    mostNegative: \"A\"\n  });\n}\n\n// src/integerLength.ts\nfunction distanceBetween(a, b, charSet) {\n  const indexA = charSet.byChar[a];\n  const indexB = charSet.byChar[b];\n  return Math.abs(indexA - indexB);\n}\nfunction integerLength(head, charSet) {\n  const firstChar = head[0];\n  if (firstChar > charSet.mostPositive || firstChar < charSet.mostNegative) {\n    throw new Error(\"invalid firstChar on key\");\n  }\n  if (firstChar === charSet.mostPositive) {\n    const firstLevel = distanceBetween(firstChar, charSet.firstPositive, charSet) + 1;\n    return firstLevel + integerLengthFromSecondLevel(head.slice(1), \"positive\", charSet);\n  }\n  if (firstChar === charSet.mostNegative) {\n    const firstLevel = distanceBetween(firstChar, charSet.firstNegative, charSet) + 1;\n    return firstLevel + integerLengthFromSecondLevel(head.slice(1), \"negative\", charSet);\n  }\n  const isPositiveRange = firstChar >= charSet.firstPositive;\n  if (isPositiveRange) {\n    return distanceBetween(firstChar, charSet.firstPositive, charSet) + 2;\n  } else {\n    return distanceBetween(firstChar, charSet.firstNegative, charSet) + 2;\n  }\n}\nfunction integerLengthFromSecondLevel(key, direction, charSet) {\n  const firstChar = key[0];\n  if (firstChar > charSet.mostPositive || firstChar < charSet.mostNegative) {\n    throw new Error(\"invalid firstChar on key\");\n  }\n  if (firstChar === charSet.mostPositive && direction === \"positive\") {\n    const totalPositiveRoom = distanceBetween(firstChar, charSet.mostNegative, charSet) + 1;\n    return totalPositiveRoom + integerLengthFromSecondLevel(key.slice(1), direction, charSet);\n  }\n  if (firstChar === charSet.mostNegative && direction === \"negative\") {\n    const totalNegativeRoom = distanceBetween(firstChar, charSet.mostPositive, charSet) + 1;\n    return totalNegativeRoom + integerLengthFromSecondLevel(key.slice(1), direction, charSet);\n  }\n  if (direction === \"positive\") {\n    return distanceBetween(firstChar, charSet.mostNegative, charSet) + 2;\n  } else {\n    return distanceBetween(firstChar, charSet.mostPositive, charSet) + 2;\n  }\n}\n\n// src/padToSameLength.ts\nfunction makeSameLength(a, b, pad, fillChar, forceLength) {\n  const max = forceLength ?? Math.max(a.length, b.length);\n  if (pad === \"start\") {\n    return [a.padStart(max, fillChar), b.padStart(max, fillChar)];\n  }\n  return [a.padEnd(max, fillChar), b.padEnd(max, fillChar)];\n}\n\n// src/keyAsNumber.ts\nfunction midPoint(lower, upper, charSet) {\n  let [paddedLower, paddedUpper] = makeSameLength(\n    lower,\n    upper,\n    \"end\",\n    charSet.first\n  );\n  let distance = lexicalDistance(paddedLower, paddedUpper, charSet);\n  if (distance === 1) {\n    paddedLower = paddedLower.padEnd(paddedLower.length + 1, charSet.first);\n    distance = charSet.length;\n  }\n  const mid = encodeToCharSet(Math.floor(distance / 2), charSet);\n  return addCharSetKeys(paddedLower, mid, charSet);\n}\nfunction lexicalDistance(a, b, charSet) {\n  const [lower, upper] = makeSameLength(a, b, \"end\", charSet.first).sort();\n  const distance = subtractCharSetKeys(upper, lower, charSet);\n  return decodeCharSetToNumber(distance, charSet);\n}\nfunction addCharSetKeys(a, b, charSet) {\n  const base = charSet.length;\n  const [paddedA, paddedB] = makeSameLength(a, b, \"start\", charSet.first);\n  const result = [];\n  let carry = 0;\n  for (let i = paddedA.length - 1; i >= 0; i--) {\n    const digitA = charSet.byChar[paddedA[i]];\n    const digitB = charSet.byChar[paddedB[i]];\n    const sum = digitA + digitB + carry;\n    carry = Math.floor(sum / base);\n    const remainder = sum % base;\n    result.unshift(charSet.byCode[remainder]);\n  }\n  if (carry > 0) {\n    result.unshift(charSet.byCode[carry]);\n  }\n  return result.join(\"\");\n}\nfunction subtractCharSetKeys(a, b, charSet, stripLeadingZeros = true) {\n  const base = charSet.length;\n  const [paddedA, paddedB] = makeSameLength(a, b, \"start\", charSet.first);\n  const result = [];\n  let borrow = 0;\n  for (let i = paddedA.length - 1; i >= 0; i--) {\n    let digitA = charSet.byChar[paddedA[i]];\n    const digitB = charSet.byChar[paddedB[i]] + borrow;\n    if (digitA < digitB) {\n      borrow = 1;\n      digitA += base;\n    } else {\n      borrow = 0;\n    }\n    const difference = digitA - digitB;\n    result.unshift(charSet.byCode[difference]);\n  }\n  if (borrow > 0) {\n    throw new Error(\n      \"Subtraction result is negative. Ensure a is greater than or equal to b.\"\n    );\n  }\n  while (stripLeadingZeros && result.length > 1 && result[0] === charSet.first) {\n    result.shift();\n  }\n  return result.join(\"\");\n}\nfunction incrementKey(key, charSet) {\n  return addCharSetKeys(key, charSet.byCode[1], charSet);\n}\nfunction decrementKey(key, charSet) {\n  return subtractCharSetKeys(key, charSet.byCode[1], charSet, false);\n}\nfunction encodeToCharSet(int, charSet) {\n  if (int === 0) {\n    return charSet.byCode[0];\n  }\n  let res = \"\";\n  const max = charSet.length;\n  while (int > 0) {\n    res = charSet.byCode[int % max] + res;\n    int = Math.floor(int / max);\n  }\n  return res;\n}\nfunction decodeCharSetToNumber(key, charSet) {\n  let res = 0;\n  const length = key.length;\n  const max = charSet.length;\n  for (let i = 0; i < length; i++) {\n    res += charSet.byChar[key[i]] * Math.pow(max, length - i - 1);\n  }\n  return res;\n}\n\n// src/integer.ts\nfunction startKey(charSet) {\n  return charSet.firstPositive + charSet.byCode[0];\n}\nfunction validInteger(integer, charSet) {\n  const length = integerLength(integer, charSet);\n  return length === integer.length;\n}\nfunction validateOrderKey(orderKey, charSet) {\n  getIntegerPart(orderKey, charSet);\n}\nfunction getIntegerPart(orderKey, charSet) {\n  const head = integerHead(orderKey, charSet);\n  const integerPartLength = integerLength(head, charSet);\n  if (integerPartLength > orderKey.length) {\n    throw new Error(\"invalid order key length: \" + orderKey);\n  }\n  return orderKey.slice(0, integerPartLength);\n}\nfunction validateInteger(integer, charSet) {\n  if (!validInteger(integer, charSet)) {\n    throw new Error(\"invalid integer length: \" + integer);\n  }\n}\nfunction incrementInteger(integer, charSet) {\n  validateInteger(integer, charSet);\n  const [head, digs] = splitInteger(integer, charSet);\n  const anyNonMaxedDigit = digs.split(\"\").some((d) => d !== charSet.byCode[charSet.length - 1]);\n  if (anyNonMaxedDigit) {\n    const newDigits = incrementKey(digs, charSet);\n    return head + newDigits;\n  }\n  const nextHead = incrementIntegerHead(head, charSet);\n  return startOnNewHead(nextHead, \"lower\", charSet);\n}\nfunction decrementInteger(integer, charSet) {\n  validateInteger(integer, charSet);\n  const [head, digs] = splitInteger(integer, charSet);\n  const anyNonLimitDigit = digs.split(\"\").some((d) => d !== charSet.byCode[0]);\n  if (anyNonLimitDigit) {\n    const newDigits = decrementKey(digs, charSet);\n    return head + newDigits;\n  }\n  const nextHead = decrementIntegerHead(head, charSet);\n  return startOnNewHead(nextHead, \"upper\", charSet);\n}\nfunction integerHead(integer, charSet) {\n  let i = 0;\n  if (integer[0] === charSet.mostPositive) {\n    while (integer[i] === charSet.mostPositive) {\n      i = i + 1;\n    }\n  }\n  if (integer[0] === charSet.mostNegative) {\n    while (integer[i] === charSet.mostNegative) {\n      i = i + 1;\n    }\n  }\n  return integer.slice(0, i + 1);\n}\nfunction splitInteger(integer, charSet) {\n  const head = integerHead(integer, charSet);\n  const tail = integer.slice(head.length);\n  return [head, tail];\n}\nfunction incrementIntegerHead(head, charSet) {\n  const inPositiveRange = head >= charSet.firstPositive;\n  const nextHead = incrementKey(head, charSet);\n  const headIsLimitMax = head[head.length - 1] === charSet.mostPositive;\n  const nextHeadIsLimitMax = nextHead[nextHead.length - 1] === charSet.mostPositive;\n  if (inPositiveRange && nextHeadIsLimitMax) {\n    return nextHead + charSet.mostNegative;\n  }\n  if (!inPositiveRange && headIsLimitMax) {\n    return head.slice(0, head.length - 1);\n  }\n  return nextHead;\n}\nfunction decrementIntegerHead(head, charSet) {\n  const inPositiveRange = head >= charSet.firstPositive;\n  const headIsLimitMin = head[head.length - 1] === charSet.mostNegative;\n  if (inPositiveRange && headIsLimitMin) {\n    const nextLevel = head.slice(0, head.length - 1);\n    return decrementKey(nextLevel, charSet);\n  }\n  if (!inPositiveRange && headIsLimitMin) {\n    return head + charSet.mostPositive;\n  }\n  return decrementKey(head, charSet);\n}\nfunction startOnNewHead(head, limit, charSet) {\n  const newLength = integerLength(head, charSet);\n  const fillChar = limit === \"upper\" ? charSet.byCode[charSet.length - 1] : charSet.byCode[0];\n  return head + fillChar.repeat(newLength - head.length);\n}\n\n// src/jittering.ts\nfunction jitterString(orderKey, charSet) {\n  const shift = encodeToCharSet(\n    Math.floor(Math.random() * charSet.jitterRange),\n    charSet\n  );\n  return addCharSetKeys(orderKey, shift, charSet);\n}\nfunction padAndJitterString(orderKey, numberOfChars, charSet) {\n  const paddedKey = orderKey.padEnd(\n    orderKey.length + numberOfChars,\n    charSet.first\n  );\n  return jitterString(paddedKey, charSet);\n}\nfunction paddingNeededForJitter(orderKey, b, charSet) {\n  const integer = getIntegerPart(orderKey, charSet);\n  const nextInteger = incrementInteger(integer, charSet);\n  let needed = 0;\n  if (b !== null) {\n    const distanceToB = lexicalDistance(orderKey, b, charSet);\n    if (distanceToB < charSet.jitterRange + 1) {\n      needed = Math.max(needed, paddingNeededForDistance(distanceToB, charSet));\n    }\n  }\n  const distanceToNextInteger = lexicalDistance(orderKey, nextInteger, charSet);\n  if (distanceToNextInteger < charSet.jitterRange + 1) {\n    needed = Math.max(\n      needed,\n      paddingNeededForDistance(distanceToNextInteger, charSet)\n    );\n  }\n  return needed;\n}\nfunction paddingNeededForDistance(distance, charSet) {\n  const gap = charSet.jitterRange - distance;\n  const firstBigger = Object.entries(charSet.paddingDict).find(\n    ([_key, value]) => {\n      return value > gap;\n    }\n  );\n  return firstBigger ? parseInt(firstBigger[0]) : 0;\n}\n\n// src/generateKeyBetween.ts\nfunction generateKeyBetween(lower, upper, charSet = base62CharSet()) {\n  if (lower !== null) {\n    validateOrderKey(lower, charSet);\n  }\n  if (upper !== null) {\n    validateOrderKey(upper, charSet);\n  }\n  if (lower === null && upper === null) {\n    return startKey(charSet);\n  }\n  if (lower === null) {\n    const integer = getIntegerPart(upper, charSet);\n    return decrementInteger(integer, charSet);\n  }\n  if (upper === null) {\n    const integer = getIntegerPart(lower, charSet);\n    return incrementInteger(integer, charSet);\n  }\n  if (lower >= upper) {\n    throw new Error(lower + \" >= \" + upper);\n  }\n  return midPoint(lower, upper, charSet);\n}\nfunction generateNKeysBetween(a, b, n, charSet = base62CharSet()) {\n  return spreadGeneratorResults(\n    a,\n    b,\n    n,\n    charSet,\n    generateKeyBetween,\n    generateNKeysBetween\n  );\n}\nfunction generateJitteredKeyBetween(lower, upper, charSet = base62CharSet()) {\n  const key = generateKeyBetween(lower, upper, charSet);\n  const paddingNeeded = paddingNeededForJitter(key, upper, charSet);\n  if (paddingNeeded) {\n    return padAndJitterString(key, paddingNeeded, charSet);\n  }\n  return jitterString(key, charSet);\n}\nfunction generateNJitteredKeysBetween(lower, upper, n, charSet = base62CharSet()) {\n  return spreadGeneratorResults(\n    lower,\n    upper,\n    n,\n    charSet,\n    generateJitteredKeyBetween,\n    generateNJitteredKeysBetween\n  );\n}\nfunction spreadGeneratorResults(lower, upper, n, charSet, generateKey, generateNKeys) {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [generateKey(lower, upper, charSet)];\n  }\n  if (upper == null) {\n    let newUpper = generateKey(lower, upper, charSet);\n    const result = [newUpper];\n    for (let i = 0; i < n - 1; i++) {\n      newUpper = generateKey(newUpper, upper, charSet);\n      result.push(newUpper);\n    }\n    return result;\n  }\n  if (lower == null) {\n    let newLower = generateKey(lower, upper, charSet);\n    const result = [newLower];\n    for (let i = 0; i < n - 1; i++) {\n      newLower = generateKey(lower, newLower, charSet);\n      result.push(newLower);\n    }\n    result.reverse();\n    return result;\n  }\n  const mid = Math.floor(n / 2);\n  const midOrderKey = generateKey(lower, upper, charSet);\n  return [\n    ...generateNKeys(lower, midOrderKey, mid, charSet),\n    midOrderKey,\n    ...generateNKeys(midOrderKey, upper, n - mid - 1, charSet)\n  ];\n}\n\n// src/IndexGenerator.ts\nvar IndexGenerator = class {\n  charSet;\n  useJitter;\n  list;\n  useGroups;\n  groupIdLength;\n  constructor(list, options = {}) {\n    this.charSet = options.charSet ?? base62CharSet();\n    this.useJitter = options.useJitter ?? true;\n    this.list = list;\n    this.useGroups = !!options.groupIdLength && options.groupIdLength > 0;\n    this.groupIdLength = options.groupIdLength ?? 0;\n  }\n  /**\n   * Updates the list that the generator uses to generate keys.\n   * The generator will not mutate the internal list when generating keys.\n   */\n  updateList(list) {\n    this.list = [...list].sort();\n  }\n  /**\n   * Generate any number of keys at the start of the list (before the first key).\n   * Optionally you can supply a groupId to generate keys at the start of a specific group.\n   */\n  nKeysStart(n, groupId) {\n    this.validateGroupId(groupId);\n    return this.generateNKeysBetween(\n      null,\n      this.firstOfGroup(groupId),\n      n,\n      groupId\n    );\n  }\n  /**\n   * Generate a single key at the start of the list (before the first key).\n   * Optionally you can supply a groupId to generate a key at the start of a specific group.\n   */\n  keyStart(groupId) {\n    this.validateGroupId(groupId);\n    return this.nKeysStart(1, groupId)[0];\n  }\n  /**\n   * Generate any number of keys at the end of the list (after the last key).\n   * Optionally you can supply a groupId to generate keys at the end of a specific group.\n   */\n  nKeysEnd(n, groupId) {\n    this.validateGroupId(groupId);\n    return this.generateNKeysBetween(\n      this.lastOfGroup(groupId),\n      null,\n      n,\n      groupId\n    );\n  }\n  /**\n   * Generate a single key at the end of the list (after the last key).\n   * Optionally you can supply a groupId to generate a key at the end of a specific group.\n   */\n  keyEnd(groupId) {\n    this.validateGroupId(groupId);\n    return this.nKeysEnd(1, groupId)[0];\n  }\n  /**\n   * Generate any number of keys behind a specific key and in front of the next key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  nKeysAfter(orderKey, n) {\n    const keyAfter = this.getKeyAfter(orderKey);\n    return this.generateNKeysBetween(\n      orderKey,\n      keyAfter,\n      n,\n      this.groupId(orderKey)\n    );\n  }\n  /**\n   * Generate a single key behind a specific key and in front of the next key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  keyAfter(orderKey) {\n    return this.nKeysAfter(orderKey, 1)[0];\n  }\n  /**\n   * Generate any number of keys in front of a specific key and behind the previous key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  nKeysBefore(orderKey, n) {\n    const keyBefore = this.getKeyBefore(orderKey);\n    return this.generateNKeysBetween(\n      keyBefore,\n      orderKey,\n      n,\n      this.groupId(orderKey)\n    );\n  }\n  /**\n   * Generate a single key in front of a specific key and behind the previous key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  keyBefore(orderKey) {\n    return this.nKeysBefore(orderKey, 1)[0];\n  }\n  /**\n   * private function responsible for calling the correct generate function\n   */\n  generateNKeysBetween(lowerKey, upperKey, n, groupId) {\n    const lower = this.groupLessKey(lowerKey);\n    const upper = this.groupLessKey(upperKey);\n    const keys = this.useJitter ? generateNJitteredKeysBetween(lower, upper, n, this.charSet) : generateNKeysBetween(lower, upper, n, this.charSet);\n    return !groupId ? keys : keys.map((key) => groupId + key);\n  }\n  /**\n   * get the key before the supplied orderKey, if it exists and is in the same group\n   */\n  getKeyBefore(orderKey) {\n    const index = this.list.indexOf(orderKey);\n    if (index === -1) {\n      throw new Error(`orderKey is not in the list`);\n    }\n    const before = this.list[index - 1];\n    return !!before && this.isSameGroup(orderKey, before) ? before : null;\n  }\n  /**\n   * get the key after the supplied orderKey, if it exists and is in the same group\n   */\n  getKeyAfter(orderKey) {\n    const index = this.list.indexOf(orderKey);\n    if (index === -1) {\n      throw new Error(`orderKey is not in the list`);\n    }\n    const after = this.list[index + 1];\n    return !!after && this.isSameGroup(orderKey, after) ? after : null;\n  }\n  /**\n   * get the first key of the group (or the first key of the list if not using groups)\n   */\n  firstOfGroup(groupId) {\n    if (!this.useGroups)\n      return this.list[0] ?? null;\n    const first = this.list.find((key) => this.isPartOfGroup(key, groupId));\n    return first ?? null;\n  }\n  /**\n   * get the last key of the group (or the last key of the list if not using groups)\n   */\n  lastOfGroup(groupId) {\n    if (!this.useGroups)\n      return this.list[this.list.length - 1] ?? null;\n    const allGroupItems = this.list.filter(\n      (key) => this.isPartOfGroup(key, groupId)\n    );\n    const last = allGroupItems[allGroupItems.length - 1];\n    return last ?? null;\n  }\n  /**\n   * throw an error if the groupId is invalid or supplied when not using groups\n   */\n  validateGroupId(groupId) {\n    if (!this.useGroups) {\n      if (groupId) {\n        console.warn(\"groupId should not used when not using groups\");\n      }\n      return;\n    }\n    if (!groupId) {\n      throw new Error(\"groupId is required when using groups\");\n    }\n    if (groupId.length !== this.groupIdLength) {\n      throw new Error(`groupId must be the lenght supplied in the options`);\n    }\n  }\n  /**\n   * get the groupId from the orderKey\n   */\n  groupId(orderKey) {\n    if (!this.useGroups)\n      return void 0;\n    return this.splitIntoGroupIdAndOrderKey(orderKey)[0];\n  }\n  /**\n   * remove the groupId from the orderKey\n   */\n  groupLessKey(orderKey) {\n    if (!this.useGroups)\n      return orderKey;\n    return this.splitIntoGroupIdAndOrderKey(orderKey)[1];\n  }\n  /**\n   * split the orderKey into groupId and key\n   * if not using groups, orderKey will be the same as key\n   */\n  splitIntoGroupIdAndOrderKey(orderKey) {\n    if (!this.useGroups || !orderKey) {\n      return [void 0, orderKey];\n    }\n    const groupId = orderKey.substring(0, this.groupIdLength);\n    const key = orderKey.substring(this.groupIdLength);\n    return [groupId, key];\n  }\n  /**\n   * check if two keys are in the same group\n   * if not using groups, keys will always be in the same group\n   */\n  isSameGroup(a, b) {\n    if (!this.useGroups)\n      return true;\n    const [aGroupId] = this.splitIntoGroupIdAndOrderKey(a);\n    const [bGroupId] = this.splitIntoGroupIdAndOrderKey(b);\n    return aGroupId === bGroupId;\n  }\n  /**\n   * check if the key is part of the group\n   * if not using groups, key will always be part of the group\n   */\n  isPartOfGroup(orderKey, groupId) {\n    if (!this.useGroups)\n      return true;\n    const [keyGroupId] = this.splitIntoGroupIdAndOrderKey(orderKey);\n    return keyGroupId === groupId;\n  }\n};\nexport {\n  IndexGenerator,\n  base62CharSet,\n  generateJitteredKeyBetween,\n  generateKeyBetween,\n  generateNJitteredKeysBetween,\n  generateNKeysBetween,\n  indexCharacterSet\n};\n", null, null, null],
  "mappings": "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;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;;QAGV,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;;QAGV,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;;QAGV,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;;QAGV,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;U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ACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;;QAGV,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,MAAM;;EAER;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,YAAY;UACV;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;UAER;YACE,cAAc;YACd,MAAM;YACN,MAAM;;;QAGV,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;;EAER;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;;MAER;QACE,cAAc;QACd,MAAM;QACN,MAAM;;;IAGV,MAAM;IACN,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",
  "names": ["VoteOption", "abi", "abi", "abi", "abi", "abi", "URL", "URL", "type", "types", "make", "GOAL_TYPE", "REGION_TYPE", "RELATED_TOPICS_PROPERTY", "GOAL_TYPE", "REGION_TYPE", "RELATED_TOPICS_PROPERTY", "make", "make", "make", "err", "l", "_a", "_b", "i", "td", "err", "fl", "Deflate", "AsyncDeflate", "Inflate", "AsyncInflate", "Gzip", "Gunzip", "AsyncGunzip", "Zlib", "Unzlib", "AsyncUnzlib", "Decompress", "AsyncDecompress", "err", "DecodeUTF8", "_a", "EncodeUTF8", "_a", "fl", "ZipPassThrough", "ZipDeflate", "AsyncZipDeflate", "err", "Zip", "err", "_a", "_b", "UnzipPassThrough", "UnzipInflate", "AsyncUnzipInflate", "err", "Unzip", "_a", "err", "dat", "final", "decoder", "bits", "_a", "_a", "localName", "bits", "ScalarType", "LongType", "WireType", "localName", "localName", "localName", "_a", "makeReadOptions", "makeWriteOptions", "_a", "readField", "writeField", "localName", "readScalar", "writeScalar", "localName", "val", "a", "b", "localName", "_a", "_b", "MethodKind", "MethodIdempotency", "Edition", "ExtensionRangeOptions_VerificationState", "FieldDescriptorProto_Type", "FieldDescriptorProto_Label", "FileOptions_OptimizeMode", "FieldOptions_CType", "FieldOptions_JSType", "FieldOptions_OptionRetention", "FieldOptions_OptionTargetType", "MethodOptions_IdempotencyLevel", "FeatureSet_FieldPresence", "FeatureSet_EnumType", "FeatureSet_RepeatedFieldEncoding", "FeatureSet_Utf8Validation", "FeatureSet_MessageEncoding", "FeatureSet_JsonFormat", "GeneratedCodeInfo_Annotation_Semantic", "FieldNumber", "_a", "protoCamelCase", "NullValue", "_Value", "CodeGeneratorResponse_Feature", "Syntax", "Field_Kind", "Field_Cardinality", "DataType", "Value", "unsetEntityValues", "unsetRelationFields", "generate", "max", "generate", "isValid", "_a", "_b"]
}
