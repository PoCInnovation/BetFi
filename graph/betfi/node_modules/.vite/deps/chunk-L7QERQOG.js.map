{
  "version": 3,
  "sources": ["../../solady/js/solady.js", "../../@graphprotocol/hypergraph/src/connect/index.ts", "../../@graphprotocol/hypergraph/src/messages/index.ts", "../../@noble/ciphers/src/_arx.ts", "../../@noble/ciphers/src/_poly1305.ts", "../../@noble/ciphers/src/chacha.ts", "../../@graphprotocol/hypergraph/src/messages/decrypt-message.ts", "../../@noble/ciphers/src/crypto.ts", "../../@noble/ciphers/src/webcrypto.ts", "../../@graphprotocol/hypergraph/src/messages/encrypt-message.ts", "../../@graphprotocol/hypergraph/src/messages/serialize.ts", "../../@graphprotocol/hypergraph/src/utils/index.ts", "../../@graphprotocol/hypergraph/src/utils/assertExhaustive.ts", "../../base-x/src/esm/index.js", "../../bs58/src/esm/index.js", "../../bs58check/src/esm/base.js", "../../bs58check/src/esm/index.js", "../../@graphprotocol/hypergraph/src/utils/automergeId.ts", "../../@graphprotocol/hypergraph/src/utils/internal/base58Utils.ts", "../../@graphprotocol/hypergraph/src/utils/base58.ts", "../../@graphprotocol/hypergraph/src/utils/generateId.ts", "../../@noble/secp256k1/index.js", "../../@graphprotocol/hypergraph/src/utils/hexBytesAddressUtils.ts", "../../@graphprotocol/hypergraph/src/utils/isRelationField.ts", "../../@graphprotocol/hypergraph/src/utils/jsc.ts", "../../@graphprotocol/hypergraph/src/utils/stringToUint8Array.ts", "../../@graphprotocol/hypergraph/src/messages/signed-update-message.ts", "../../@graphprotocol/hypergraph/src/inboxes/types.ts", "../../@graphprotocol/hypergraph/src/space-events/index.ts", "../../@graphprotocol/hypergraph/src/space-events/accept-invitation.ts", "../../@graphprotocol/hypergraph/src/space-events/hash-event.ts", "../../@graphprotocol/hypergraph/src/types.ts", "../../@graphprotocol/hypergraph/src/space-events/types.ts", "../../@graphprotocol/hypergraph/src/space-events/apply-event.ts", "../../@graphprotocol/hypergraph/src/space-events/create-inbox.ts", "../../@graphprotocol/hypergraph/src/space-events/create-invitation.ts", "../../@graphprotocol/hypergraph/src/space-events/create-space.ts", "../../@graphprotocol/hypergraph/src/space-events/delete-space.ts", "../../@graphprotocol/hypergraph/src/messages/types.ts", "../../@graphprotocol/hypergraph/src/connect/types.ts", "../../@graphprotocol/hypergraph/src/connect/auth-storage.ts", "../../@graphprotocol/hypergraph/src/key/index.ts", "../../@serenity-kit/noble-sodium/src/constants.ts", "../../@noble/ciphers/src/salsa.ts", "../../@noble/curves/src/abstract/edwards.ts", "../../@noble/curves/src/abstract/montgomery.ts", "../../@noble/curves/src/ed25519.ts", "../../@serenity-kit/noble-sodium/src/crypto-box-easy.ts", "../../@serenity-kit/noble-sodium/src/crypto-box-key-pair.ts", "../../@serenity-kit/noble-sodium/src/crypto-box-open-easy.ts", "../../@noble/hashes/src/blake2b.ts", "../../@serenity-kit/noble-sodium/src/crypto-box-seal-open.ts", "../../@serenity-kit/noble-sodium/src/crypto-box-seal.ts", "../../@graphprotocol/hypergraph/src/key/key-box.ts", "../../@graphprotocol/hypergraph/src/key/encrypt-key.ts", "../../@graphprotocol/hypergraph/src/key/create-key.ts", "../../@graphprotocol/hypergraph/src/key/decrypt-key.ts", "../../@graphprotocol/hypergraph/src/connect/create-identity-keys.ts", "../../@graphprotocol/hypergraph/src/connect/create-app-identity.ts", "../../@graphprotocol/hypergraph/src/connect/create-auth-url.ts", "../../@graphprotocol/hypergraph/src/connect/create-callback-params.ts", "../../@noble/hashes/src/hkdf.ts", "../../@graphprotocol/hypergraph/src/connect/identity-encryption.ts", "../../@graphprotocol/hypergraph/src/identity/prove-ownership.ts", "../../@graphprotocol/hypergraph/src/store-connect.ts", "../../@xstate/store/dist/store-f80a6837.esm.js", "../../@graphprotocol/hypergraph/src/inboxes/merge-messages.ts", "../../@graphprotocol/grc-20/contracts.ts", "../../@rhinestone/module-sdk/account/api/getAccount.ts", "../../@rhinestone/module-sdk/constants.ts", "../../@rhinestone/module-sdk/common/queries/account.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/constants/abis.ts", "../../@rhinestone/module-sdk/common/constants.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/getInstalledModules.ts", "../../@rhinestone/module-sdk/module/types.ts", "../../@rhinestone/module-sdk/common/utils.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/isModuleInstalled.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/installModule.ts", "../../@rhinestone/module-sdk/common/getPrevModule.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/uninstallModule.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/encode1271Signature.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/encode1271Hash.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/encodeModuleInstallationData.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/encodeModuleUninstallationData.ts", "../../@rhinestone/module-sdk/account/utils.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/api/encodeValidatorNonce.ts", "../../@rhinestone/module-sdk/account/erc7579-implementation/index.ts", "../../@rhinestone/module-sdk/account/kernel/api/getInstalledModules.ts", "../../@rhinestone/module-sdk/account/kernel/constants/abis.ts", "../../@rhinestone/module-sdk/account/kernel/types.ts", "../../@rhinestone/module-sdk/account/kernel/api/isModuleInstalled.ts", "../../@rhinestone/module-sdk/account/kernel/api/installModule.ts", "../../@rhinestone/module-sdk/account/kernel/api/uninstallModule.ts", "../../@rhinestone/module-sdk/account/kernel/api/encode1271Signature.ts", "../../@rhinestone/module-sdk/account/kernel/api/encode1271Hash.ts", "../../@rhinestone/module-sdk/account/kernel/api/encodeModuleInstallationData.ts", "../../@rhinestone/module-sdk/account/kernel/api/encodeModuleUninstallationData.ts", "../../@rhinestone/module-sdk/account/kernel/api/utils.ts", "../../@rhinestone/module-sdk/account/kernel/api/encodeValidatorNonce.ts", "../../@rhinestone/module-sdk/account/kernel/index.ts", "../../@rhinestone/module-sdk/account/nexus/constants/abis.ts", "../../@rhinestone/module-sdk/account/nexus/api/getInstalledModules.ts", "../../@rhinestone/module-sdk/account/nexus/api/isModuleInstalled.ts", "../../@rhinestone/module-sdk/account/nexus/api/installModule.ts", "../../@rhinestone/module-sdk/account/nexus/api/uninstallModule.ts", "../../@rhinestone/module-sdk/account/nexus/api/encode1271Signature.ts", "../../@rhinestone/module-sdk/account/nexus/api/encode1271Hash.ts", "../../@rhinestone/module-sdk/account/nexus/api/encodeModuleInstallationData.ts", "../../@rhinestone/module-sdk/account/nexus/api/encodeModuleUninstallationData.ts", "../../@rhinestone/module-sdk/account/nexus/api/encodeValidatorNonce.ts", "../../@rhinestone/module-sdk/account/nexus/index.ts", "../../@rhinestone/module-sdk/account/safe/constants/abis.ts", "../../@rhinestone/module-sdk/account/safe/api/getInstalledModules.ts", "../../@rhinestone/module-sdk/account/safe/api/isModuleInstalled.ts", "../../@rhinestone/module-sdk/account/safe/api/installModule.ts", "../../@rhinestone/module-sdk/account/safe/api/uninstallModule.ts", "../../@rhinestone/module-sdk/account/safe/api/encode1271Signature.ts", "../../@rhinestone/module-sdk/account/safe/api/encode1271Hash.ts", "../../@rhinestone/module-sdk/account/safe/types.ts", "../../@rhinestone/module-sdk/account/safe/api/encodeModuleInstallationData.ts", "../../@rhinestone/module-sdk/account/safe/api/encodeModuleUninstallationData.ts", "../../@rhinestone/module-sdk/account/safe/api/encodeValidatorNonce.ts", "../../@rhinestone/module-sdk/account/safe/index.ts", "../../@rhinestone/module-sdk/account/api/getAccountImplementation.ts", "../../@rhinestone/module-sdk/account/api/encodeValidatorNonce.ts", "../../@rhinestone/module-sdk/module/ownable-validator/constants.ts", "../../@rhinestone/module-sdk/module/ownable-validator/installation.ts", "../../@rhinestone/module-sdk/module/ownable-validator/usage.ts", "../../@rhinestone/module-sdk/module/hook-multi-plexer/types.ts", "../../@rhinestone/module-sdk/module/smart-sessions/abi.ts", "../../@rhinestone/module-sdk/module/smart-sessions/types.ts", "../../@rhinestone/module-sdk/module/smart-sessions/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/usage.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/spending-limits-policy/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/sudo-policy/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/universal-action-policy/constants.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/universal-action-policy/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/time-frame-policy/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/usage-limit-policy/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/value-limit-policy/installation.ts", "../../@rhinestone/module-sdk/module/smart-sessions/policies/universal-action-policy/types.ts", "../../@rhinestone/module-sdk/module/registry/constants.ts", "../../@rhinestone/module-sdk/module/zk-email-recovery/universal-email-recovery/constants.ts", "../../permissionless/actions/erc7579/accountId.ts", "../../permissionless/actions/erc7579/installModule.ts", "../../permissionless/actions/erc7579/installModules.ts", "../../permissionless/actions/erc7579/isModuleInstalled.ts", "../../permissionless/utils/encodeUninstallModule.ts", "../../permissionless/actions/erc7579/uninstallModule.ts", "../../permissionless/actions/erc7579/uninstallModules.ts", "../../permissionless/actions/erc7579.ts", "../../@graphprotocol/hypergraph/dist/connect/abis/MainVotingPlugin.json", "../../@graphprotocol/hypergraph/dist/connect/abis/PersonalSpaceAdminPlugin.json", "../../@graphprotocol/hypergraph/src/connect/abis.ts", "../../@graphprotocol/hypergraph/src/connect/smart-account.ts", "../../@graphprotocol/hypergraph/src/connect/login.ts", "../../@graphprotocol/hypergraph/src/connect/parse-auth-params.ts", "../../@graphprotocol/hypergraph/src/connect/parse-callback-params.ts", "../../@graphprotocol/hypergraph/src/entity/index.ts", "../../@graphprotocol/hypergraph/src/entity/hasValidTypesProperty.ts", "../../@graphprotocol/hypergraph/src/entity/getEntityRelations.ts", "../../@graphprotocol/hypergraph/src/entity/findOne.ts", "../../@graphprotocol/hypergraph/src/entity/create.ts", "../../@graphprotocol/hypergraph/src/entity/delete.ts", "../../@graphprotocol/hypergraph/src/entity/variant-schema.ts", "../../@graphprotocol/hypergraph/src/entity/entity.ts", "../../@graphprotocol/hypergraph/src/utils/internal/deep-merge.ts", "../../@graphprotocol/hypergraph/src/entity/decodedEntitiesCache.ts", "../../@graphprotocol/hypergraph/src/entity/entityRelationParentsMap.ts", "../../@graphprotocol/hypergraph/src/entity/findMany.ts", "../../@graphprotocol/hypergraph/src/entity/removeRelation.ts", "../../@graphprotocol/hypergraph/src/entity/update.ts", "../../@graphprotocol/hypergraph/src/identity/index.ts", "../../@graphprotocol/hypergraph/src/identity/auth-storage.ts", "../../@graphprotocol/hypergraph/src/store.ts", "../../@graphprotocol/hypergraph/src/identity/get-verified-identity.ts", "../../@graphprotocol/hypergraph/src/identity/identity-encryption.ts", "../../@graphprotocol/hypergraph/src/identity/logout.ts", "../../@graphprotocol/hypergraph/src/identity/types.ts", "../../@graphprotocol/hypergraph/src/inboxes/index.ts", "../../@graphprotocol/hypergraph/src/inboxes/create-inbox.ts", "../../@graphprotocol/hypergraph/src/inboxes/get-list-inboxes.ts", "../../@graphprotocol/hypergraph/src/inboxes/message-encryption.ts", "../../@graphprotocol/hypergraph/src/inboxes/recover-inbox-message-signer.ts", "../../@graphprotocol/hypergraph/src/inboxes/message-validation.ts", "../../@graphprotocol/hypergraph/src/inboxes/prepare-message.ts", "../../@graphprotocol/hypergraph/src/inboxes/recover-inbox-creator.ts", "../../@graphprotocol/hypergraph/src/inboxes/send-message.ts", "../../@graphprotocol/hypergraph/src/space-info/index.ts", "../../@graphprotocol/hypergraph/src/space-info/types.ts", "../../@graphprotocol/hypergraph/src/space-info/decrypt-space-info.ts", "../../@graphprotocol/hypergraph/src/space-info/encrypt-and-sign-space-info.ts", "../../@graphprotocol/hypergraph/src/type/type.ts"],
  "sourcesContent": ["/**\n * Accompanying JavaScript library for Solady.\n *\n * To install:\n * \n * ```\n * npm install solady\n * ```\n *\n * Module exports:\n * \n * - `LibZip`\n *   - `flzCompress(data)`: Compresses hex encoded data with FastLZ.\n *   - `flzDecompress(data)`: Decompresses hex encoded data with FastLZ.\n *   - `cdCompress(data)`: Compresses hex encoded calldata.\n *   - `cdDecompress(data)`: Decompresses hex encoded calldata.\n *   \n * - `ERC1967Factory`\n *   - `address`: Canonical address of Solady's ERC1967Factory.\n *   - `abi`: ABI of Solady's ERC1967Factory.\n *\n * @module solady\n */\n(function(global, factory) {\n\n    \"use strict\";\n\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        module.exports = factory(global, 1);\n        if (typeof exports === \"object\") {\n            exports.LibZip = module.exports.LibZip;\n            exports.ERC1967Factory = module.exports.ERC1967Factory;\n        }\n    } else {\n        factory(global);\n    }\n\n})(typeof window !== \"undefined\" ? window : this, function(window, noGlobal) {\n\n    \"use strict\";\n\n    var solady = {};\n\n    /*============================================================*/\n    /*                     LibZip Operations                      */\n    /*============================================================*/\n\n    // See: https://github.com/vectorized/solady/blob/main/src/utils/LibZip.sol\n\n    /**\n     * FastLZ and calldata compression / decompression functions.\n     * @namespace\n     * @alias module:solady.LibZip\n     */\n    var LibZip = {};\n\n    solady.LibZip = LibZip;\n\n    function hexString(data) {\n        if (typeof data === \"string\" || data instanceof String) {\n            if (data = data.match(/^[\\s\\uFEFF\\xA0]*(0[Xx])?([0-9A-Fa-f]*)[\\s\\uFEFF\\xA0]*$/)) {\n                if (data[2].length % 2) {\n                    throw new Error(\"Hex string length must be a multiple of 2.\");\n                }\n                return data[2];\n            }\n        }\n        throw new Error(\"Data must be a hex string.\");\n    }\n\n    function byteToString(b) {\n        return (b | 0x100).toString(16).slice(1);\n    }\n\n    function parseByte(data, i) {\n        return parseInt(data.substr(i, 2), 16);\n    }\n\n    function hexToBytes(data) {\n        var a = [], i = 0;\n        for (; i < data.length; i += 2) a.push(parseByte(data, i));\n        return a;\n    }\n\n    function bytesToHex(a) {\n        var o = \"0x\", i = 0;\n        for (; i < a.length; o += byteToString(a[i++])) ;\n        return o;\n    }\n\n    /**\n     * Compresses hex encoded data with the FastLZ LZ77 algorithm.\n     * @param {string} data A hex encoded string representing the original data.\n     * @returns {string} The compressed result as a hex encoded string.\n     */\n    LibZip.flzCompress = function(data) {\n        var ib = hexToBytes(hexString(data)), b = ib.length - 4;\n        var ht = [], ob = [], a = 0, i = 2, o = 0, j, s, h, d, c, l, r, p, q, e;\n\n        function u24(i) {\n            return ib[i] | (ib[++i] << 8) | (ib[++i] << 16);\n        }\n\n        function hash(x) {\n            return ((2654435769 * x) >> 19) & 8191;\n        }\n\n        function literals(r, s) {\n            while (r >= 32) for (ob[o++] = 31, j = 32; j--; r--) ob[o++] = ib[s++];\n            if (r) for (ob[o++] = r - 1; r--; ) ob[o++] = ib[s++];\n        }\n\n        while (i < b - 9) {\n            do {\n                r = ht[h = hash(s = u24(i))] || 0;\n                c = (d = (ht[h] = i) - r) < 8192 ? u24(r) : 0x1000000;\n            } while (i < b - 9 && i++ && s != c);\n            if (i >= b - 9) break;\n            if (--i > a) literals(i - a, a);\n            for (l = 0, p = r + 3, q = i + 3, e = b - q; l < e; l++) e *= ib[p + l] === ib[q + l];\n            i += l;\n            for (--d; l > 262; l -= 262) ob[o++] = 224 + (d >> 8), ob[o++] = 253, ob[o++] = d & 255;\n            if (l < 7) ob[o++] = (l << 5) + (d >> 8), ob[o++] = d & 255;\n            else ob[o++] = 224 + (d >> 8), ob[o++] = l - 7, ob[o++] = d & 255;\n            ht[hash(u24(i))] = i++, ht[hash(u24(i))] = i++, a = i;\n        }\n        literals(b + 4 - a, a);\n        return bytesToHex(ob);\n    }\n\n    /**\n     * Decompresses hex encoded data with the FastLZ LZ77 algorithm.\n     * @param {string} data A hex encoded string representing the compressed data.\n     * @returns {string} The decompressed result as a hex encoded string.\n     */\n    LibZip.flzDecompress = function(data) {\n        var ib = hexToBytes(hexString(data)), i = 0, o = 0, l, f, t, r, h, ob = [];\n        while (i < ib.length) {\n            if (!(t = ib[i] >> 5)) {\n                for (l = 1 + ib[i++]; l--;) ob[o++] = ib[i++];\n            } else {\n                f = 256 * (ib[i] & 31) + ib[i + 2 - (t = t < 7)];\n                l = t ? 2 + (ib[i] >> 5) : 9 + ib[i + 1];\n                i = i + 3 - t;\n                r = o - f - 1;\n                while (l--) ob[o++] = ob[r++];\n            }\n        }\n        return bytesToHex(ob);\n    }\n\n    /**\n     * Compresses hex encoded calldata.\n     * @param {string} data A hex encoded string representing the original data.\n     * @returns {string} The compressed result as a hex encoded string.\n     */\n    LibZip.cdCompress = function(data) {\n        data = hexString(data);\n        var o = \"0x\", z = 0, y = 0, i = 0, c;\n\n        function pushByte(b) {\n            o += byteToString(((o.length < 4 * 2 + 2) * 0xff) ^ b);\n        }\n\n        function rle(v, d) {\n            pushByte(0x00);\n            pushByte(d - 1 + v * 0x80);\n        }\n\n        for (; i < data.length; i += 2) {\n            c = parseByte(data, i);\n            if (!c) {\n                if (y) rle(1, y), y = 0;\n                if (++z === 0x80) rle(0, 0x80), z = 0;\n                continue;\n            }\n            if (c === 0xff) {\n                if (z) rle(0, z), z = 0;\n                if (++y === 0x20) rle(1, 0x20), y = 0;\n                continue;\n            }\n            if (y) rle(1, y), y = 0;\n            if (z) rle(0, z), z = 0;\n            pushByte(c);\n        }\n        if (y) rle(1, y), y = 0;\n        if (z) rle(0, z), z = 0;\n        return o;\n    }\n\n    /**\n     * Decompresses hex encoded calldata.\n     * @param {string} data A hex encoded string representing the compressed data.\n     * @returns {string} The decompressed result as a hex encoded string.\n     */\n    LibZip.cdDecompress = function(data) {\n        data = hexString(data);\n        var o = \"0x\", i = 0, j, c, s;\n\n        while (i < data.length) {\n            c = ((i < 4 * 2) * 0xff) ^ parseByte(data, i);\n            i += 2;\n            if (!c) {\n                c = ((i < 4 * 2) * 0xff) ^ parseByte(data, i);\n                s = (c & 0x7f) + 1;\n                i += 2;\n                for (j = 0; j < s; ++j) o += byteToString((c >> 7 && j < 32) * 0xff);\n                continue;\n            }\n            o += byteToString(c);\n        }\n        return o;\n    }\n\n    /*============================================================*/\n    /*                       ERC1967Factory                       */\n    /*============================================================*/\n\n    // See: https://github.com/vectorized/solady/blob/main/src/utils/ERC1967Factory.sol\n\n    /**\n     * ERC1967Factory canonical address and ABI.\n     * @namespace\n     * @alias module:solady.ERC1967Factory\n     */\n    var ERC1967Factory = {};\n\n    solady.ERC1967Factory = ERC1967Factory;\n\n    /**\n     * Canonical address of Solady's ERC1967Factory.\n     * @type {string}\n     */\n    ERC1967Factory.address = \"0x0000000000006396FF2a80c067f99B3d2Ab4Df24\";\n\n    /**\n     * ABI of Solady's ERC1967Factory.\n     * @type {Object}\n     */\n    ERC1967Factory.abi = JSON.parse('[{0:[],1:\"DeploymentFailed\"96\"SaltDoesNotStartWithCaller\"96\"Unauthorized\"96\"UpgradeFailed\",2:3959790,9791],1:\"AdminChanged\",2:10959790,9792,9791],1:\"Deployed\",2:10959790,9792],1:\"Upgraded\",2:10},{0:[{90],1:\"adminOf\",12:[{9199{0:[{90,{91],1:\"changeAdmin\",12:[],13:\"nonpayable\",2:15},{0:[{92,{91],1:\"deploy\",12:[{9098,{0:[{92,{91,{94],1:\"deployAndCall\",12:[{9098,{0:[{92,{91,{93],1:\"deployDeterministic\",12:[{9098,{0:[{92,{91,{93,{94],1:\"deployDeterministicAndCall\",12:[{9098,{0:[],1:\"initCodeHash\",12:[{6:19,1:\"result\",2:19}99{0:[{93],1:\"predictDeterministicAddress\",12:[{6:7,1:\"predicted\",2:7}99{0:[{90,{92],1:\"upgrade\",12:[98,{0:[{90,{92,{94],1:\"upgradeAndCall\",12:[98]'.replace(/9\\d/g, function (m) { return [\"6:7,1:8,2:7}\",\"6:7,1:9,2:7}\",\"6:7,1:11,2:7}\",\"6:19,1:20,2:19}\",\"6:17,1:18,2:17}\",\"},{4:false,0:[\",\",2:3},{0:[],1:\",\"{5:true,\",\"],13:16,2:15}\",\"],13:14,2:15},\"][m-90] }).replace(/\\d+/g, function (m) { return '\"' + (\"inputs,name,type,error,anonymous,indexed,internalType,address,proxy,admin,event,implementation,outputs,stateMutability,view,function,payable,bytes,data,bytes32,salt\".split(\",\")[m]) + '\"' }));\n\n    /*--------------------------- END ----------------------------*/\n\n    if (typeof define === \"function\" && define.amd) {\n        define(\"solady\", [], function() {\n            return solady\n        });\n    }\n\n    if (!noGlobal) {\n        window.solady = solady;\n    }\n\n    return solady;\n});\n", "export * from './auth-storage.js';\nexport * from './create-app-identity.js';\nexport * from './create-auth-url.js';\nexport * from './create-callback-params.js';\nexport * from './identity-encryption.js';\nexport * from './login.js';\nexport * from './parse-auth-params.js';\nexport * from './parse-callback-params.js';\nexport * from './smart-account.js';\nexport * from './types.js';\n", "export * from './decrypt-message.js';\nexport * from './encrypt-message.js';\nexport * from './serialize.js';\nexport * from './signed-update-message.js';\nexport * from './types.js';\n", "/**\n * Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.\n\nRFC8439 requires multi-step cipher stream, where\nauthKey starts with counter: 0, actual msg with counter: 1.\n\nFor this, we need a way to re-use nonce / counter:\n\n    const counter = new Uint8Array(4);\n    chacha(..., counter, ...); // counter is now 1\n    chacha(..., counter, ...); // counter is now 2\n\nThis is complicated:\n\n- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB\n- Original papers don't allow mutating counters\n- Counter overflow is undefined [^1]\n- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it\n- Caveat: Cannot be re-used through all cases:\n- * chacha has (counter | nonce)\n- * xchacha has (nonce16 | counter | nonce16)\n- Idea B: separate nonce / counter and provide separate API for counter re-use\n- Caveat: there are different counter sizes depending on an algorithm.\n- salsa & chacha also differ in structures of key & sigma:\n  salsa20:      s[0] | k(4) | s[1] | nonce(2) | ctr(2) | s[2] | k(4) | s[3]\n  chacha:       s(4) | k(8) | ctr(1) | nonce(3)\n  chacha20orig: s(4) | k(8) | ctr(2) | nonce(2)\n- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`\n- Caveat: we can't re-use counter array\n\nxchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\n\n[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\n[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\n\n * @module\n */\n// prettier-ignore\nimport {\n  type XorStream, abool, abytes, anumber, checkOpts, clean, copyBytes, u32\n} from './utils.ts';\n\n// We can't make top-level var depend on utils.utf8ToBytes\n// because it's not present in all envs. Creating a similar fn here\nconst _utf8ToBytes = (str: string) => Uint8Array.from(str.split('').map((c) => c.charCodeAt(0)));\nconst sigma16 = _utf8ToBytes('expand 16-byte k');\nconst sigma32 = _utf8ToBytes('expand 32-byte k');\nconst sigma16_32 = u32(sigma16);\nconst sigma32_32 = u32(sigma32);\n\nexport function rotl(a: number, b: number): number {\n  return (a << b) | (a >>> (32 - b));\n}\n\n/** Ciphers must use u32 for efficiency. */\nexport type CipherCoreFn = (\n  sigma: Uint32Array,\n  key: Uint32Array,\n  nonce: Uint32Array,\n  output: Uint32Array,\n  counter: number,\n  rounds?: number\n) => void;\n\n/** Method which extends key + short nonce into larger nonce / diff key. */\nexport type ExtendNonceFn = (\n  sigma: Uint32Array,\n  key: Uint32Array,\n  input: Uint32Array,\n  output: Uint32Array\n) => void;\n\n/** ARX cipher options.\n * * `allowShortKeys` for 16-byte keys\n * * `counterLength` in bytes\n * * `counterRight`: right: `nonce|counter`; left: `counter|nonce`\n * */\nexport type CipherOpts = {\n  allowShortKeys?: boolean; // Original salsa / chacha allow 16-byte keys\n  extendNonceFn?: ExtendNonceFn;\n  counterLength?: number;\n  counterRight?: boolean;\n  rounds?: number;\n};\n\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(b: Uint8Array) {\n  return b.byteOffset % 4 === 0;\n}\n\n// Salsa and Chacha block length is always 512-bit\nconst BLOCK_LEN = 64;\nconst BLOCK_LEN32 = 16;\n\n// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]\n// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]\nconst MAX_COUNTER = 2 ** 32 - 1;\n\nconst U32_EMPTY = new Uint32Array();\nfunction runCipher(\n  core: CipherCoreFn,\n  sigma: Uint32Array,\n  key: Uint32Array,\n  nonce: Uint32Array,\n  data: Uint8Array,\n  output: Uint8Array,\n  counter: number,\n  rounds: number\n): void {\n  const len = data.length;\n  const block = new Uint8Array(BLOCK_LEN);\n  const b32 = u32(block);\n  // Make sure that buffers aligned to 4 bytes\n  const isAligned = isAligned32(data) && isAligned32(output);\n  const d32 = isAligned ? u32(data) : U32_EMPTY;\n  const o32 = isAligned ? u32(output) : U32_EMPTY;\n  for (let pos = 0; pos < len; counter++) {\n    core(sigma, key, nonce, b32, counter, rounds);\n    if (counter >= MAX_COUNTER) throw new Error('arx: counter overflow');\n    const take = Math.min(BLOCK_LEN, len - pos);\n    // aligned to 4 bytes\n    if (isAligned && take === BLOCK_LEN) {\n      const pos32 = pos / 4;\n      if (pos % 4 !== 0) throw new Error('arx: invalid block position');\n      for (let j = 0, posj: number; j < BLOCK_LEN32; j++) {\n        posj = pos32 + j;\n        o32[posj] = d32[posj] ^ b32[j];\n      }\n      pos += BLOCK_LEN;\n      continue;\n    }\n    for (let j = 0, posj; j < take; j++) {\n      posj = pos + j;\n      output[posj] = data[posj] ^ block[j];\n    }\n    pos += take;\n  }\n}\n\n/** Creates ARX-like (ChaCha, Salsa) cipher stream from core function. */\nexport function createCipher(core: CipherCoreFn, opts: CipherOpts): XorStream {\n  const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = checkOpts(\n    { allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 },\n    opts\n  );\n  if (typeof core !== 'function') throw new Error('core must be a function');\n  anumber(counterLength);\n  anumber(rounds);\n  abool(counterRight);\n  abool(allowShortKeys);\n  return (\n    key: Uint8Array,\n    nonce: Uint8Array,\n    data: Uint8Array,\n    output?: Uint8Array,\n    counter = 0\n  ): Uint8Array => {\n    abytes(key);\n    abytes(nonce);\n    abytes(data);\n    const len = data.length;\n    if (output === undefined) output = new Uint8Array(len);\n    abytes(output);\n    anumber(counter);\n    if (counter < 0 || counter >= MAX_COUNTER) throw new Error('arx: counter overflow');\n    if (output.length < len)\n      throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);\n    const toClean = [];\n\n    // Key & sigma\n    // key=16 -> sigma16, k=key|key\n    // key=32 -> sigma32, k=key\n    let l = key.length;\n    let k: Uint8Array;\n    let sigma: Uint32Array;\n    if (l === 32) {\n      toClean.push((k = copyBytes(key)));\n      sigma = sigma32_32;\n    } else if (l === 16 && allowShortKeys) {\n      k = new Uint8Array(32);\n      k.set(key);\n      k.set(key, 16);\n      sigma = sigma16_32;\n      toClean.push(k);\n    } else {\n      throw new Error(`arx: invalid 32-byte key, got length=${l}`);\n    }\n\n    // Nonce\n    // salsa20:      8   (8-byte counter)\n    // chacha20orig: 8   (8-byte counter)\n    // chacha20:     12  (4-byte counter)\n    // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)\n    // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)\n    // Align nonce to 4 bytes\n    if (!isAligned32(nonce)) toClean.push((nonce = copyBytes(nonce)));\n\n    const k32 = u32(k);\n    // hsalsa & hchacha: handle extended nonce\n    if (extendNonceFn) {\n      if (nonce.length !== 24) throw new Error(`arx: extended nonce must be 24 bytes`);\n      extendNonceFn(sigma, k32, u32(nonce.subarray(0, 16)), k32);\n      nonce = nonce.subarray(16);\n    }\n\n    // Handle nonce counter\n    const nonceNcLen = 16 - counterLength;\n    if (nonceNcLen !== nonce.length)\n      throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);\n\n    // Pad counter when nonce is 64 bit\n    if (nonceNcLen !== 12) {\n      const nc = new Uint8Array(12);\n      nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\n      nonce = nc;\n      toClean.push(nonce);\n    }\n    const n32 = u32(nonce);\n    runCipher(core, sigma, k32, n32, data, output, counter, rounds);\n    clean(...toClean);\n    return output;\n  };\n}\n", "/**\n * Poly1305 ([PDF](https://cr.yp.to/mac/poly1305-20050329.pdf),\n * [wiki](https://en.wikipedia.org/wiki/Poly1305))\n * is a fast and parallel secret-key message-authentication code suitable for\n * a wide variety of applications. It was standardized in\n * [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and is now used in TLS 1.3.\n *\n * Polynomial MACs are not perfect for every situation:\n * they lack Random Key Robustness: the MAC can be forged, and can't be used in PAKE schemes.\n * See [invisible salamanders attack](https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/).\n * To combat invisible salamanders, `hash(key)` can be included in ciphertext,\n * however, this would violate ciphertext indistinguishability:\n * an attacker would know which key was used - so `HKDF(key, i)`\n * could be used instead.\n *\n * Check out [original website](https://cr.yp.to/mac.html).\n * @module\n */\nimport { Hash, type Input, abytes, aexists, aoutput, clean, toBytes } from './utils.ts';\n\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a: Uint8Array, i: number) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\nclass Poly1305 implements Hash<Poly1305> {\n  readonly blockLen = 16;\n  readonly outputLen = 16;\n  private buffer = new Uint8Array(16);\n  private r = new Uint16Array(10);\n  private h = new Uint16Array(10);\n  private pad = new Uint16Array(8);\n  private pos = 0;\n  protected finished = false;\n\n  constructor(key: Input) {\n    key = toBytes(key);\n    abytes(key, 32);\n    const t0 = u8to16(key, 0);\n    const t1 = u8to16(key, 2);\n    const t2 = u8to16(key, 4);\n    const t3 = u8to16(key, 6);\n    const t4 = u8to16(key, 8);\n    const t5 = u8to16(key, 10);\n    const t6 = u8to16(key, 12);\n    const t7 = u8to16(key, 14);\n\n    // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n    this.r[0] = t0 & 0x1fff;\n    this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n    this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n    this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n    this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n    this.r[5] = (t4 >>> 1) & 0x1ffe;\n    this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n    this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n    this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n    this.r[9] = (t7 >>> 5) & 0x007f;\n    for (let i = 0; i < 8; i++) this.pad[i] = u8to16(key, 16 + 2 * i);\n  }\n\n  private process(data: Uint8Array, offset: number, isLast = false) {\n    const hibit = isLast ? 0 : 1 << 11;\n    const { h, r } = this;\n    const r0 = r[0];\n    const r1 = r[1];\n    const r2 = r[2];\n    const r3 = r[3];\n    const r4 = r[4];\n    const r5 = r[5];\n    const r6 = r[6];\n    const r7 = r[7];\n    const r8 = r[8];\n    const r9 = r[9];\n\n    const t0 = u8to16(data, offset + 0);\n    const t1 = u8to16(data, offset + 2);\n    const t2 = u8to16(data, offset + 4);\n    const t3 = u8to16(data, offset + 6);\n    const t4 = u8to16(data, offset + 8);\n    const t5 = u8to16(data, offset + 10);\n    const t6 = u8to16(data, offset + 12);\n    const t7 = u8to16(data, offset + 14);\n\n    let h0 = h[0] + (t0 & 0x1fff);\n    let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n    let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n    let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n    let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n    let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n    let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n    let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n    let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n    let h9 = h[9] + ((t7 >>> 5) | hibit);\n\n    let c = 0;\n\n    let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n    c = d0 >>> 13;\n    d0 &= 0x1fff;\n    d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n    c += d0 >>> 13;\n    d0 &= 0x1fff;\n\n    let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n    c = d1 >>> 13;\n    d1 &= 0x1fff;\n    d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n    c += d1 >>> 13;\n    d1 &= 0x1fff;\n\n    let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n    c = d2 >>> 13;\n    d2 &= 0x1fff;\n    d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n    c += d2 >>> 13;\n    d2 &= 0x1fff;\n\n    let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n    c = d3 >>> 13;\n    d3 &= 0x1fff;\n    d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n    c += d3 >>> 13;\n    d3 &= 0x1fff;\n\n    let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n    c = d4 >>> 13;\n    d4 &= 0x1fff;\n    d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n    c += d4 >>> 13;\n    d4 &= 0x1fff;\n\n    let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n    c = d5 >>> 13;\n    d5 &= 0x1fff;\n    d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n    c += d5 >>> 13;\n    d5 &= 0x1fff;\n\n    let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n    c = d6 >>> 13;\n    d6 &= 0x1fff;\n    d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n    c += d6 >>> 13;\n    d6 &= 0x1fff;\n\n    let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n    c = d7 >>> 13;\n    d7 &= 0x1fff;\n    d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n    c += d7 >>> 13;\n    d7 &= 0x1fff;\n\n    let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n    c = d8 >>> 13;\n    d8 &= 0x1fff;\n    d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n    c += d8 >>> 13;\n    d8 &= 0x1fff;\n\n    let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n    c = d9 >>> 13;\n    d9 &= 0x1fff;\n    d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n    c += d9 >>> 13;\n    d9 &= 0x1fff;\n\n    c = ((c << 2) + c) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = c >>> 13;\n    d1 += c;\n\n    h[0] = d0;\n    h[1] = d1;\n    h[2] = d2;\n    h[3] = d3;\n    h[4] = d4;\n    h[5] = d5;\n    h[6] = d6;\n    h[7] = d7;\n    h[8] = d8;\n    h[9] = d9;\n  }\n\n  private finalize() {\n    const { h, pad } = this;\n    const g = new Uint16Array(10);\n    let c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    for (let i = 2; i < 10; i++) {\n      h[i] += c;\n      c = h[i] >>> 13;\n      h[i] &= 0x1fff;\n    }\n    h[0] += c * 5;\n    c = h[0] >>> 13;\n    h[0] &= 0x1fff;\n    h[1] += c;\n    c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    h[2] += c;\n\n    g[0] = h[0] + 5;\n    c = g[0] >>> 13;\n    g[0] &= 0x1fff;\n    for (let i = 1; i < 10; i++) {\n      g[i] = h[i] + c;\n      c = g[i] >>> 13;\n      g[i] &= 0x1fff;\n    }\n    g[9] -= 1 << 13;\n\n    let mask = (c ^ 1) - 1;\n    for (let i = 0; i < 10; i++) g[i] &= mask;\n    mask = ~mask;\n    for (let i = 0; i < 10; i++) h[i] = (h[i] & mask) | g[i];\n    h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n    h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n    h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n    h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n    h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n    h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n    h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n    h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n\n    let f = h[0] + pad[0];\n    h[0] = f & 0xffff;\n    for (let i = 1; i < 8; i++) {\n      f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n      h[i] = f & 0xffff;\n    }\n    clean(g);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { buffer, blockLen } = this;\n    const len = data.length;\n\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input\n      if (take === blockLen) {\n        for (; blockLen <= len - pos; pos += blockLen) this.process(data, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(buffer, 0, false);\n        this.pos = 0;\n      }\n    }\n    return this;\n  }\n  destroy() {\n    clean(this.h, this.r, this.buffer, this.pad);\n  }\n  digestInto(out: Uint8Array) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    const { buffer, h } = this;\n    let { pos } = this;\n    if (pos) {\n      buffer[pos++] = 1;\n      for (; pos < 16; pos++) buffer[pos] = 0;\n      this.process(buffer, 0, true);\n    }\n    this.finalize();\n    let opos = 0;\n    for (let i = 0; i < 8; i++) {\n      out[opos++] = h[i] >>> 0;\n      out[opos++] = h[i] >>> 8;\n    }\n    return out;\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n}\n\nexport type CHash = ReturnType<typeof wrapConstructorWithKey>;\nexport function wrapConstructorWithKey<H extends Hash<H>>(\n  hashCons: (key: Input) => Hash<H>\n): {\n  (msg: Input, key: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(key: Input): Hash<H>;\n} {\n  const hashC = (msg: Input, key: Input): Uint8Array => hashCons(key).update(toBytes(msg)).digest();\n  const tmp = hashCons(new Uint8Array(32));\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (key: Input) => hashCons(key);\n  return hashC;\n}\n\n/** Poly1305 MAC from RFC 8439. */\nexport const poly1305: CHash = wrapConstructorWithKey((key) => new Poly1305(key));\n", "/**\n * [ChaCha20](https://cr.yp.to/chacha.html) stream cipher, released\n * in 2008. Developed after Salsa20, ChaCha aims to increase diffusion per round.\n * It was standardized in [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and\n * is now used in TLS 1.3.\n *\n * [XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)\n * extended-nonce variant is also provided. Similar to XSalsa, it's safe to use with\n * randomly-generated nonces.\n *\n * Check out [PDF](http://cr.yp.to/chacha/chacha-20080128.pdf) and\n * [wiki](https://en.wikipedia.org/wiki/Salsa20).\n * @module\n */\nimport { createCipher, rotl } from './_arx.ts';\nimport { poly1305 } from './_poly1305.ts';\nimport {\n  type ARXCipher,\n  type CipherWithOutput,\n  type XorStream,\n  clean,\n  equalBytes,\n  getOutput,\n  u64Lengths,\n  wrapCipher,\n} from './utils.ts';\n\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(\n  s: Uint32Array, k: Uint32Array, n: Uint32Array, out: Uint32Array, cnt: number, rounds = 20\n): void {\n  let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3],   // Key      Key     Key     Key\n    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7],   // Key      Key     Key     Key\n    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2];    // Counter  Counter\tNonce   Nonce\n  // Save state to temporary variables\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  for (let r = 0; r < rounds; r += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  // Write output\n  let oi = 0;\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(\n  s: Uint32Array, k: Uint32Array, i: Uint32Array, o32: Uint32Array\n): void {\n  let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3],\n      x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3],\n      x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7],\n      x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];\n  for (let r = 0; r < 20; r += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  let oi = 0;\n  o32[oi++] = x00; o32[oi++] = x01;\n  o32[oi++] = x02; o32[oi++] = x03;\n  o32[oi++] = x12; o32[oi++] = x13;\n  o32[oi++] = x14; o32[oi++] = x15;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nexport const chacha20orig: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 8,\n  allowShortKeys: true,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  allowShortKeys: false,\n});\n\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nexport const xchacha20: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 8,\n  extendNonceFn: hchacha,\n  allowShortKeys: false,\n});\n\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nexport const chacha8: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  rounds: 8,\n});\n\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nexport const chacha12: XorStream = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  rounds: 12,\n});\n\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h: ReturnType<typeof poly1305.create>, msg: Uint8Array) => {\n  h.update(msg);\n  const left = msg.length % 16;\n  if (left) h.update(ZEROS16.subarray(left));\n};\n\nconst ZEROS32 = /* @__PURE__ */ new Uint8Array(32);\nfunction computeTag(\n  fn: XorStream,\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  AAD?: Uint8Array\n): Uint8Array {\n  const authKey = fn(key, nonce, ZEROS32);\n  const h = poly1305.create(authKey);\n  if (AAD) updatePadded(h, AAD);\n  updatePadded(h, data);\n  const num = u64Lengths(data.length, AAD ? AAD.length : 0, true);\n  h.update(num);\n  const res = h.digest();\n  clean(authKey, num);\n  return res;\n}\n\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead =\n  (xorStream: XorStream) =>\n  (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): CipherWithOutput => {\n    const tagLength = 16;\n    return {\n      encrypt(plaintext: Uint8Array, output?: Uint8Array) {\n        const plength = plaintext.length;\n        output = getOutput(plength + tagLength, output, false);\n        output.set(plaintext);\n        const oPlain = output.subarray(0, -tagLength);\n        xorStream(key, nonce, oPlain, oPlain, 1);\n        const tag = computeTag(xorStream, key, nonce, oPlain, AAD);\n        output.set(tag, plength); // append tag\n        clean(tag);\n        return output;\n      },\n      decrypt(ciphertext: Uint8Array, output?: Uint8Array) {\n        output = getOutput(ciphertext.length - tagLength, output, false);\n        const data = ciphertext.subarray(0, -tagLength);\n        const passedTag = ciphertext.subarray(-tagLength);\n        const tag = computeTag(xorStream, key, nonce, data, AAD);\n        if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\n        output.set(ciphertext.subarray(0, -tagLength));\n        xorStream(key, nonce, output, output, 1); // start stream with i=1\n        clean(tag);\n        return output;\n      },\n    };\n  };\n\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n *\n * Unsafe to use random nonces under the same key, due to collision chance.\n * Prefer XChaCha instead.\n */\nexport const chacha20poly1305: ARXCipher = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 12, tagLength: 16 },\n  _poly1305_aead(chacha20)\n);\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n *\n * Can be safely used with random nonces (CSPRNG).\n * See [IRTF draft](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha).\n */\nexport const xchacha20poly1305: ARXCipher = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 24, tagLength: 16 },\n  _poly1305_aead(xchacha20)\n);\n", "import { xchacha20poly1305 } from '@noble/ciphers/chacha';\n\ninterface Params {\n  nonceAndCiphertext: Uint8Array;\n  secretKey: Uint8Array;\n}\n\nexport function decryptMessage({ nonceAndCiphertext, secretKey }: Params) {\n  const nonce = nonceAndCiphertext.subarray(0, 24);\n  const ciphertext = nonceAndCiphertext.subarray(24);\n  const cipher = xchacha20poly1305(secretKey, nonce);\n  return cipher.decrypt(ciphertext);\n}\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * WebCrypto-based AES gcm/ctr/cbc, `managedNonce` and `randomBytes`.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * node.js versions earlier than v19 don't declare it in global scope.\n * For node.js, package.js on#exports field mapping rewrites import\n * from `crypto` to `cryptoNode`, which imports native module.\n * Makes the utils un-importable in browsers without a bundler.\n * Once node.js 18 is deprecated, we can just drop the import.\n * @module\n */\n// Use full path so that Node.js can rewrite it to `cryptoNode.js`.\nimport { crypto } from '@noble/ciphers/crypto';\nimport { abytes, anumber, type AsyncCipher, type Cipher, concatBytes } from './utils.ts';\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n\nexport function getWebcryptoSubtle(): any {\n  if (crypto && typeof crypto.subtle === 'object' && crypto.subtle != null) return crypto.subtle;\n  throw new Error('crypto.subtle must be defined');\n}\n\ntype RemoveNonceInner<T extends any[], Ret> = ((...args: T) => Ret) extends (\n  arg0: any,\n  arg1: any,\n  ...rest: infer R\n) => any\n  ? (key: Uint8Array, ...args: R) => Ret\n  : never;\n\ntype RemoveNonce<T extends (...args: any) => any> = RemoveNonceInner<Parameters<T>, ReturnType<T>>;\ntype CipherWithNonce = ((key: Uint8Array, nonce: Uint8Array, ...args: any[]) => Cipher) & {\n  nonceLength: number;\n};\n\n/**\n * Uses CSPRG for nonce, nonce injected in ciphertext.\n * @example\n * const gcm = managedNonce(aes.gcm);\n * const ciphr = gcm(key).encrypt(data);\n * const plain = gcm(key).decrypt(ciph);\n */\nexport function managedNonce<T extends CipherWithNonce>(fn: T): RemoveNonce<T> {\n  const { nonceLength } = fn;\n  anumber(nonceLength);\n  return ((key: Uint8Array, ...args: any[]): any => ({\n    encrypt(plaintext: Uint8Array, ...argsEnc: any[]) {\n      const nonce = randomBytes(nonceLength);\n      const ciphertext = (fn(key, nonce, ...args).encrypt as any)(plaintext, ...argsEnc);\n      const out = concatBytes(nonce, ciphertext);\n      ciphertext.fill(0);\n      return out;\n    },\n    decrypt(ciphertext: Uint8Array, ...argsDec: any[]) {\n      const nonce = ciphertext.subarray(0, nonceLength);\n      const data = ciphertext.subarray(nonceLength);\n      return (fn(key, nonce, ...args).decrypt as any)(data, ...argsDec);\n    },\n  })) as RemoveNonce<T>;\n}\n\n// Overridable\n// @TODO\nexport const utils: {\n  encrypt: (key: Uint8Array, ...all: any[]) => Promise<Uint8Array>;\n  decrypt: (key: Uint8Array, ...all: any[]) => Promise<Uint8Array>;\n} = {\n  async encrypt(\n    key: Uint8Array,\n    keyParams: any,\n    cryptParams: any,\n    plaintext: Uint8Array\n  ): Promise<Uint8Array> {\n    const cr = getWebcryptoSubtle();\n    const iKey = await cr.importKey('raw', key, keyParams, true, ['encrypt']);\n    const ciphertext = await cr.encrypt(cryptParams, iKey, plaintext);\n    return new Uint8Array(ciphertext);\n  },\n  async decrypt(\n    key: Uint8Array,\n    keyParams: any,\n    cryptParams: any,\n    ciphertext: Uint8Array\n  ): Promise<Uint8Array> {\n    const cr = getWebcryptoSubtle();\n    const iKey = await cr.importKey('raw', key, keyParams, true, ['decrypt']);\n    const plaintext = await cr.decrypt(cryptParams, iKey, ciphertext);\n    return new Uint8Array(plaintext);\n  },\n};\n\nconst mode = {\n  CBC: 'AES-CBC',\n  CTR: 'AES-CTR',\n  GCM: 'AES-GCM',\n} as const;\ntype BlockMode = (typeof mode)[keyof typeof mode];\n\nfunction getCryptParams(algo: BlockMode, nonce: Uint8Array, AAD?: Uint8Array) {\n  if (algo === mode.CBC) return { name: mode.CBC, iv: nonce };\n  if (algo === mode.CTR) return { name: mode.CTR, counter: nonce, length: 64 };\n  if (algo === mode.GCM) {\n    if (AAD) return { name: mode.GCM, iv: nonce, additionalData: AAD };\n    else return { name: mode.GCM, iv: nonce };\n  }\n\n  throw new Error('unknown aes block mode');\n}\n\nfunction generate(algo: BlockMode) {\n  return (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): AsyncCipher => {\n    abytes(key);\n    abytes(nonce);\n    const keyParams = { name: algo, length: key.length * 8 };\n    const cryptParams = getCryptParams(algo, nonce, AAD);\n    let consumed = false;\n    return {\n      // keyLength,\n      encrypt(plaintext: Uint8Array) {\n        abytes(plaintext);\n        if (consumed) throw new Error('Cannot encrypt() twice with same key / nonce');\n        consumed = true;\n        return utils.encrypt(key, keyParams, cryptParams, plaintext);\n      },\n      decrypt(ciphertext: Uint8Array) {\n        abytes(ciphertext);\n        return utils.decrypt(key, keyParams, cryptParams, ciphertext);\n      },\n    };\n  };\n}\n\n/** AES-CBC, native webcrypto version */\nexport const cbc: (key: Uint8Array, iv: Uint8Array) => AsyncCipher = /* @__PURE__ */ (() =>\n  generate(mode.CBC))();\n/** AES-CTR, native webcrypto version */\nexport const ctr: (key: Uint8Array, nonce: Uint8Array) => AsyncCipher = /* @__PURE__ */ (() =>\n  generate(mode.CTR))();\n/** AES-GCM, native webcrypto version */\nexport const gcm: (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array) => AsyncCipher =\n  /* @__PURE__ */ (() => generate(mode.GCM))();\n\n// // Type tests\n// import { siv, gcm, ctr, ecb, cbc } from '../aes.ts';\n// import { xsalsa20poly1305 } from '../salsa.ts';\n// import { chacha20poly1305, xchacha20poly1305 } from '../chacha.ts';\n\n// const wsiv = managedNonce(siv);\n// const wgcm = managedNonce(gcm);\n// const wctr = managedNonce(ctr);\n// const wcbc = managedNonce(cbc);\n// const wsalsapoly = managedNonce(xsalsa20poly1305);\n// const wchacha = managedNonce(chacha20poly1305);\n// const wxchacha = managedNonce(xchacha20poly1305);\n\n// // should fail\n// const wcbc2 = managedNonce(managedNonce(cbc));\n// const wctr = managedNonce(ctr);\n", "import { xchacha20poly1305 } from '@noble/ciphers/chacha';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\n\ntype Params = {\n  message: Uint8Array;\n  secretKey: Uint8Array;\n};\n\nexport function encryptMessage({ message, secretKey }: Params) {\n  const nonce = randomBytes(24);\n  const cipher = xchacha20poly1305(secretKey, nonce);\n  const ciphertext = cipher.encrypt(message);\n  return new Uint8Array([...nonce, ...ciphertext]);\n}\n", "// biome-ignore lint/suspicious/noExplicitAny: same as stringify\nexport function serialize(obj: any): string {\n  return JSON.stringify(obj, (_key, value) => {\n    if (value instanceof Uint8Array) {\n      return { __type: 'Uint8Array', data: Array.from(value) };\n    }\n    if (value instanceof Date) {\n      return { __type: 'Date', data: value.toISOString() };\n    }\n    return value;\n  });\n}\n\nexport function deserialize(json: string): unknown {\n  return JSON.parse(json, (_key, value) => {\n    if (value && value.__type === 'Uint8Array') {\n      return value.data;\n    }\n    if (value && value.__type === 'Date') {\n      return new Date(value.data);\n    }\n    return value;\n  });\n}\n", "export * from './assertExhaustive.js';\nexport * from './automergeId.js';\nexport * from './base58.js';\nexport * from './generateId.js';\nexport * from './hexBytesAddressUtils.js';\nexport * from './isRelationField.js';\nexport * from './jsc.js';\nexport * from './stringToUint8Array.js';\n", "export const assertExhaustive = (_value: never, message = 'Reached unexpected case in exhaustive switch'): never => {\n  throw new Error(message);\n};\n", "// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  const BASE_MAP = new Uint8Array(256)\n  for (let j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    // eslint-disable-next-line no-empty\n    if (source instanceof Uint8Array) { } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    let psz = 0\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n    // Process the characters.\n    while (psz < source.length) {\n      // Find code of next character\n      const charCode = source.charCodeAt(psz)\n      // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n      // Decode character\n      let carry = BASE_MAP[charCode]\n      // Invalid character\n      if (carry === 255) { return }\n      let i = 0\n      for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    const vch = new Uint8Array(zeroes + (size - it4))\n    let j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode,\n    decodeUnsafe,\n    decode\n  }\n}\nexport default base\n", "import basex from 'base-x';\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nexport default basex(ALPHABET);\n", "'use strict';\nimport base58 from 'bs58';\nexport default function (checksumFn) {\n    // Encode a buffer as a base58-check encoded string\n    function encode(payload) {\n        var payloadU8 = Uint8Array.from(payload);\n        var checksum = checksumFn(payloadU8);\n        var length = payloadU8.length + 4;\n        var both = new Uint8Array(length);\n        both.set(payloadU8, 0);\n        both.set(checksum.subarray(0, 4), payloadU8.length);\n        return base58.encode(both);\n    }\n    function decodeRaw(buffer) {\n        var payload = buffer.slice(0, -4);\n        var checksum = buffer.slice(-4);\n        var newChecksum = checksumFn(payload);\n        // eslint-disable-next-line\n        if (checksum[0] ^ newChecksum[0] |\n            checksum[1] ^ newChecksum[1] |\n            checksum[2] ^ newChecksum[2] |\n            checksum[3] ^ newChecksum[3])\n            return;\n        return payload;\n    }\n    // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n    function decodeUnsafe(str) {\n        var buffer = base58.decodeUnsafe(str);\n        if (buffer == null)\n            return;\n        return decodeRaw(buffer);\n    }\n    function decode(str) {\n        var buffer = base58.decode(str);\n        var payload = decodeRaw(buffer);\n        if (payload == null)\n            throw new Error('Invalid checksum');\n        return payload;\n    }\n    return {\n        encode: encode,\n        decode: decode,\n        decodeUnsafe: decodeUnsafe\n    };\n}\n", "'use strict';\nimport { sha256 } from '@noble/hashes/sha256';\nimport bs58checkBase from './base.js';\n// SHA256(SHA256(buffer))\nfunction sha256x2(buffer) {\n    return sha256(sha256(buffer));\n}\nexport default bs58checkBase(sha256x2);\n", "import bs58check from 'bs58check';\nimport { parse as parseUuid, stringify as stringifyUuid } from 'uuid';\n\n/**\n * Converts a UUID into Base58Check\n */\nexport function idToAutomergeId(uuid: string) {\n  const payload = parseUuid(uuid);\n  return bs58check.encode(payload);\n}\n\n/**\n * Converts a Base58Check-encoded UUID back to UUID\n */\nexport function automergeIdToId(base58CheckUuid: string) {\n  const versionedPayload = bs58check.decode(base58CheckUuid);\n  return stringifyUuid(versionedPayload);\n}\n", "export const BASE58_ALLOWED_CHARS = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\nexport function decodeBase58(str: string) {\n  let x = BigInt(0);\n  for (let i = 0; i < str.length; i++) {\n    const charIndex = BASE58_ALLOWED_CHARS.indexOf(str[i]);\n    if (charIndex < 0) {\n      throw new Error('Invalid Base58 character');\n    }\n    x = x * 58n + BigInt(charIndex);\n  }\n\n  const bytes: number[] = [];\n  while (x > 0) {\n    bytes.push(Number(x % 256n));\n    x = x >> 8n;\n  }\n\n  bytes.reverse();\n  // Pad to 16 bytes for a UUID\n  while (bytes.length < 16) {\n    bytes.unshift(0);\n  }\n\n  return new Uint8Array(bytes);\n}\n\nexport function encodeBase58(data: Uint8Array) {\n  let x = BigInt(0);\n  for (const byte of data) {\n    x = (x << 8n) + BigInt(byte);\n  }\n\n  let encoded = '';\n  while (x > 0) {\n    const remainder = x % 58n;\n    x = x / 58n;\n    encoded = BASE58_ALLOWED_CHARS[Number(remainder)] + encoded;\n  }\n\n  // deal with leading zeros (0x00 bytes)\n  for (let i = 0; i < data.length && data[i] === 0; i++) {\n    encoded = `1${encoded}`;\n  }\n\n  return encoded;\n}\n", "import { BASE58_ALLOWED_CHARS } from './internal/base58Utils.js';\n\nexport type Base58 = string;\n\n/**\n * Base58 encodes the given string value.\n *\n * @example\n * ```ts\n * import { v4 as uuidv4 } from \"uuid\";\n *\n * const uuid = uuidv4(); // 92539817-7989-4083-ab80-e9c2b2b66669\n * const dashesRemoved = uuid.replaceAll(/-/g, \"\"); // 9253981779894083ab80e9c2b2b66669\n * const encoded = encodeBase58(dashesRemoved)\n * console.log(encoded) // K51CbDqxW35osbjPo5ZF77\n * ```\n *\n * @param val string to encode as base58\n * @returns the base58 encoded string\n */\nexport function encodeBase58(val: string): Base58 {\n  const hex = BigInt(`0x${val}`);\n  let remainder = hex;\n  const result: string[] = []; // Use an array to store encoded characters\n\n  while (remainder > 0n) {\n    const mod = remainder % 58n;\n    const base58CharAtMod = BASE58_ALLOWED_CHARS[Number(mod)];\n    if (base58CharAtMod) {\n      result.push(base58CharAtMod);\n    }\n    remainder = remainder / 58n;\n  }\n\n  // Reverse and join the array to get the final Base58 encoded string\n  return result.reverse().join('');\n}\n\nexport type UUID = string;\n\n/**\n * Expand the base58 encoded UUID back to its original UUID format\n *\n * @example\n * ```ts\n * const uuid = 92539817-7989-4083-ab80-e9c2b2b66669;\n * const encoded = encodeBase58(dashesRemoved); // K51CbDqxW35osbjPo5ZF77\n * const decoded = decodeBase58ToUUID(encoded); // 92539817-7989-4083-ab80-e9c2b2b66669\n *\n * expect(decoded).toEqual(uuid);\n * ```\n *\n * @param encoded base58 encoded UUID\n * @returns the expanded UUID from the base58 encoded value\n */\nexport function decodeBase58ToUUID(encoded: string): UUID {\n  let decoded = 0n;\n\n  for (const char of encoded) {\n    const index = BASE58_ALLOWED_CHARS.indexOf(char);\n    if (index === -1) {\n      throw new Error('Invalid Base58 character');\n    }\n    decoded = decoded * 58n + BigInt(index);\n  }\n\n  // Convert the bigint to a hex string, padded to 32 characters\n  let hexStr = decoded.toString(16);\n  hexStr = hexStr.padStart(32, '0'); // Ensure it is 32 characters\n\n  return [hexStr.slice(0, 8), hexStr.slice(8, 12), hexStr.slice(12, 16), hexStr.slice(16, 20), hexStr.slice(20)].join(\n    '-',\n  );\n}\n", "import { v4 as uuidv4 } from 'uuid';\n\n/**\n * Generate a v4 UUID.\n *\n * @example\n * ```\n * import { generateId } from '@graph-framework/utils'\n *\n * const id = generateId()\n * console.log(id)\n * ```\n *\n * @returns v4 UUID\n */\nexport function generateId() {\n  return uuidv4();\n}\n", "/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n/**\n * 4KB JS implementation of secp256k1 ECDSA / Schnorr signatures & ECDH.\n * Compliant with RFC6979 & BIP340.\n * @module\n */\n/**\n * Curve params. secp256k1 is short weierstrass / koblitz curve. Equation is y² == x³ + ax + b.\n * * P = `2n**256n-2n**32n-2n**977n` // field over which calculations are done\n * * N = `2n**256n - 0x14551231950b75fc4402da1732fc9bebfn` // group order, amount of curve points\n * * h = `1n` // cofactor\n * * a = `0n` // equation param\n * * b = `7n` // equation param\n * * Gx, Gy are coordinates of Generator / base point\n */\nconst secp256k1_CURVE = {\n    p: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn,\n    n: 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n,\n    h: 1n,\n    a: 0n,\n    b: 7n,\n    Gx: 0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798n,\n    Gy: 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8n,\n};\nconst { p: P, n: N, Gx, Gy, b: _b } = secp256k1_CURVE;\nconst L = 32; // field / group byte length\nconst L2 = 64;\n// Helpers and Precomputes sections are reused between libraries\n// ## Helpers\n// ----------\n// error helper, messes-up stack trace\nconst err = (m = '') => {\n    throw new Error(m);\n};\nconst isBig = (n) => typeof n === 'bigint'; // is big integer\nconst isStr = (s) => typeof s === 'string'; // is string\nconst isBytes = (a) => a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n/** assert is Uint8Array (of specific length) */\nconst abytes = (a, l) => !isBytes(a) || (typeof l === 'number' && l > 0 && a.length !== l)\n    ? err('Uint8Array expected')\n    : a;\n/** create Uint8Array */\nconst u8n = (len) => new Uint8Array(len);\nconst u8fr = (buf) => Uint8Array.from(buf);\nconst padh = (n, pad) => n.toString(16).padStart(pad, '0');\nconst bytesToHex = (b) => Array.from(abytes(b))\n    .map((e) => padh(e, 2))\n    .join('');\nconst C = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 }; // ASCII characters\nconst _ch = (ch) => {\n    if (ch >= C._0 && ch <= C._9)\n        return ch - C._0; // '2' => 50-48\n    if (ch >= C.A && ch <= C.F)\n        return ch - (C.A - 10); // 'B' => 66-(65-10)\n    if (ch >= C.a && ch <= C.f)\n        return ch - (C.a - 10); // 'b' => 98-(97-10)\n    return;\n};\nconst hexToBytes = (hex) => {\n    const e = 'hex invalid';\n    if (!isStr(hex))\n        return err(e);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        return err(e);\n    const array = u8n(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        // treat each char as ASCII\n        const n1 = _ch(hex.charCodeAt(hi)); // parse first char, multiply it by 16\n        const n2 = _ch(hex.charCodeAt(hi + 1)); // parse second char\n        if (n1 === undefined || n2 === undefined)\n            return err(e);\n        array[ai] = n1 * 16 + n2; // example: 'A9' => 10*16 + 9\n    }\n    return array;\n};\n/** normalize hex or ui8a to ui8a */\nconst toU8 = (a, len) => abytes(isStr(a) ? hexToBytes(a) : u8fr(abytes(a)), len);\nconst cr = () => globalThis?.crypto; // WebCrypto is available in all modern environments\nconst subtle = () => cr()?.subtle ?? err('crypto.subtle must be defined');\n// prettier-ignore\nconst concatBytes = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + abytes(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\n/** WebCrypto OS-level CSPRNG (random number generator). Will throw when not available. */\nconst randomBytes = (len = L) => {\n    const c = cr();\n    return c.getRandomValues(u8n(len));\n};\nconst big = BigInt;\nconst arange = (n, min, max, msg = 'bad number: out of range') => isBig(n) && min <= n && n < max ? n : err(msg);\n/** modular division */\nconst M = (a, b = P) => {\n    const r = a % b;\n    return r >= 0n ? r : b + r;\n};\nconst modN = (a) => M(a, N);\n/** Modular inversion using eucledian GCD (non-CT). No negative exponent for now. */\n// prettier-ignore\nconst invert = (num, md) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md);\n    let a = M(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) {\n        const q = b / a, r = b % a;\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? M(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst callHash = (name) => {\n    // @ts-ignore\n    const fn = etc[name];\n    if (typeof fn !== 'function')\n        err('hashes.' + name + ' not set');\n    return fn;\n};\nconst apoint = (p) => (p instanceof Point ? p : err('Point expected'));\n// ## End of Helpers\n// -----------------\n/** secp256k1 formula. Koblitz curves are subclass of weierstrass curves with a=0, making it x³+b */\nconst koblitz = (x) => M(M(x * x) * x + _b);\n/** assert is field element or 0 */\nconst afield0 = (n) => arange(n, 0n, P);\n/** assert is field element */\nconst afield = (n) => arange(n, 1n, P);\n/** assert is group elem */\nconst agroup = (n) => arange(n, 1n, N);\nconst isEven = (y) => (y & 1n) === 0n;\n/** create Uint8Array of byte n */\nconst u8of = (n) => Uint8Array.of(n);\nconst getPrefix = (y) => u8of(isEven(y) ? 0x02 : 0x03);\n/** lift_x from BIP340 calculates square root. Validates x, then validates root*root. */\nconst lift_x = (x) => {\n    // Let c = x³ + 7 mod p. Fail if x ≥ p. (also fail if x < 1)\n    const c = koblitz(afield(x));\n    // c = √y\n    // y = c^((p+1)/4) mod p\n    // This formula works for fields p = 3 mod 4 -- a special, fast case.\n    // Paper: \"Square Roots from 1;24,51,10 to Dan Shanks\".\n    let r = 1n;\n    for (let num = c, e = (P + 1n) / 4n; e > 0n; e >>= 1n) {\n        // powMod: modular exponentiation.\n        if (e & 1n)\n            r = (r * num) % P; // Uses exponentiation by squaring.\n        num = (num * num) % P; // Not constant-time.\n    }\n    return M(r * r) === c ? r : err('sqrt invalid'); // check if result is valid\n};\n/** Point in 3d xyz projective coordinates. 3d takes less inversions than 2d. */\nclass Point {\n    static BASE;\n    static ZERO;\n    px;\n    py;\n    pz;\n    constructor(px, py, pz) {\n        this.px = afield0(px);\n        this.py = afield(py); // y can't be 0 in Projective\n        this.pz = afield0(pz);\n        Object.freeze(this);\n    }\n    /** Convert Uint8Array or hex string to Point. */\n    static fromBytes(bytes) {\n        abytes(bytes);\n        let p = undefined;\n        // First byte is prefix, rest is data. There are 2 kinds: compressed & uncompressed:\n        // * [0x02 or 0x03][32-byte x coordinate]\n        // * [0x04]        [32-byte x coordinate][32-byte y coordinate]\n        const head = bytes[0];\n        const tail = bytes.subarray(1);\n        const x = sliceBytesNumBE(tail, 0, L);\n        const len = bytes.length;\n        // Compressed 33-byte point, 0x02 or 0x03 prefix\n        if (len === L + 1 && [0x02, 0x03].includes(head)) {\n            // Equation is y² == x³ + ax + b. We calculate y from x.\n            // y = √y²; there are two solutions: y, -y. Determine proper solution based on prefix\n            let y = lift_x(x);\n            const evenY = isEven(y);\n            const evenH = isEven(big(head));\n            if (evenH !== evenY)\n                y = M(-y);\n            p = new Point(x, y, 1n);\n        }\n        // Uncompressed 65-byte point, 0x04 prefix\n        if (len === L2 + 1 && head === 0x04)\n            p = new Point(x, sliceBytesNumBE(tail, L, L2), 1n);\n        // Validate point\n        return p ? p.assertValidity() : err('bad point: not on curve');\n    }\n    /** Equality check: compare points P&Q. */\n    equals(other) {\n        const { px: X1, py: Y1, pz: Z1 } = this;\n        const { px: X2, py: Y2, pz: Z2 } = apoint(other); // checks class equality\n        const X1Z2 = M(X1 * Z2);\n        const X2Z1 = M(X2 * Z1);\n        const Y1Z2 = M(Y1 * Z2);\n        const Y2Z1 = M(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n        return this.equals(I);\n    }\n    /** Flip point over y coordinate. */\n    negate() {\n        return new Point(this.px, M(-this.py), this.pz);\n    }\n    /** Point doubling: P+P, complete formula. */\n    double() {\n        return this.add(this);\n    }\n    /**\n     * Point addition: P+Q, complete, exception-free formula\n     * (Renes-Costello-Batina, algo 1 of [2015/1060](https://eprint.iacr.org/2015/1060)).\n     * Cost: `12M + 0S + 3*a + 3*b3 + 23add`.\n     */\n    // prettier-ignore\n    add(other) {\n        const { px: X1, py: Y1, pz: Z1 } = this;\n        const { px: X2, py: Y2, pz: Z2 } = apoint(other);\n        const a = 0n;\n        const b = _b;\n        let X3 = 0n, Y3 = 0n, Z3 = 0n;\n        const b3 = M(b * 3n);\n        let t0 = M(X1 * X2), t1 = M(Y1 * Y2), t2 = M(Z1 * Z2), t3 = M(X1 + Y1); // step 1\n        let t4 = M(X2 + Y2); // step 5\n        t3 = M(t3 * t4);\n        t4 = M(t0 + t1);\n        t3 = M(t3 - t4);\n        t4 = M(X1 + Z1);\n        let t5 = M(X2 + Z2); // step 10\n        t4 = M(t4 * t5);\n        t5 = M(t0 + t2);\n        t4 = M(t4 - t5);\n        t5 = M(Y1 + Z1);\n        X3 = M(Y2 + Z2); // step 15\n        t5 = M(t5 * X3);\n        X3 = M(t1 + t2);\n        t5 = M(t5 - X3);\n        Z3 = M(a * t4);\n        X3 = M(b3 * t2); // step 20\n        Z3 = M(X3 + Z3);\n        X3 = M(t1 - Z3);\n        Z3 = M(t1 + Z3);\n        Y3 = M(X3 * Z3);\n        t1 = M(t0 + t0); // step 25\n        t1 = M(t1 + t0);\n        t2 = M(a * t2);\n        t4 = M(b3 * t4);\n        t1 = M(t1 + t2);\n        t2 = M(t0 - t2); // step 30\n        t2 = M(a * t2);\n        t4 = M(t4 + t2);\n        t0 = M(t1 * t4);\n        Y3 = M(Y3 + t0);\n        t0 = M(t5 * t4); // step 35\n        X3 = M(t3 * X3);\n        X3 = M(X3 - t0);\n        t0 = M(t3 * t1);\n        Z3 = M(t5 * Z3);\n        Z3 = M(Z3 + t0); // step 40\n        return new Point(X3, Y3, Z3);\n    }\n    /**\n     * Point-by-scalar multiplication. Scalar must be in range 1 <= n < CURVE.n.\n     * Uses {@link wNAF} for base point.\n     * Uses fake point to mitigate side-channel leakage.\n     * @param n scalar by which point is multiplied\n     * @param safe safe mode guards against timing attacks; unsafe mode is faster\n     */\n    multiply(n, safe = true) {\n        if (!safe && n === 0n)\n            return I;\n        agroup(n);\n        if (n === 1n)\n            return this;\n        if (this.equals(G))\n            return wNAF(n).p;\n        // init result point & fake point\n        let p = I;\n        let f = G;\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) {\n            // if bit is present, add to point\n            // if not present, add to fake, for timing safety\n            if (n & 1n)\n                p = p.add(d);\n            else if (safe)\n                f = f.add(d);\n        }\n        return p;\n    }\n    /** Convert point to 2d xy affine point. (X, Y, Z) ∋ (x=X/Z, y=Y/Z) */\n    toAffine() {\n        const { px: x, py: y, pz: z } = this;\n        // fast-paths for ZERO point OR Z=1\n        if (this.equals(I))\n            return { x: 0n, y: 0n };\n        if (z === 1n)\n            return { x, y };\n        const iz = invert(z, P);\n        // (Z * Z^-1) must be 1, otherwise bad math\n        if (M(z * iz) !== 1n)\n            err('inverse invalid');\n        // x = X*Z^-1; y = Y*Z^-1\n        return { x: M(x * iz), y: M(y * iz) };\n    }\n    /** Checks if the point is valid and on-curve. */\n    assertValidity() {\n        const { x, y } = this.toAffine(); // convert to 2d xy affine point.\n        afield(x); // must be in range 1 <= x,y < P\n        afield(y);\n        // y² == x³ + ax + b, equation sides must be equal\n        return M(y * y) === koblitz(x) ? this : err('bad point: not on curve');\n    }\n    /** Converts point to 33/65-byte Uint8Array. */\n    toBytes(isCompressed = true) {\n        const { x, y } = this.assertValidity().toAffine();\n        const x32b = numTo32b(x);\n        if (isCompressed)\n            return concatBytes(getPrefix(y), x32b);\n        return concatBytes(u8of(0x04), x32b, numTo32b(y));\n    }\n    /** Create 3d xyz point from 2d xy. (0, 0) => (0, 1, 0), not (0, 0, 1) */\n    static fromAffine(ap) {\n        const { x, y } = ap;\n        return x === 0n && y === 0n ? I : new Point(x, y, 1n);\n    }\n    toHex(isCompressed) {\n        return bytesToHex(this.toBytes(isCompressed));\n    }\n    static fromPrivateKey(k) {\n        return G.multiply(toPrivScalar(k));\n    }\n    static fromHex(hex) {\n        return Point.fromBytes(toU8(hex));\n    }\n    get x() {\n        return this.toAffine().x;\n    }\n    get y() {\n        return this.toAffine().y;\n    }\n    toRawBytes(isCompressed) {\n        return this.toBytes(isCompressed);\n    }\n}\n/** Generator / base point */\nconst G = new Point(Gx, Gy, 1n);\n/** Identity / zero point */\nconst I = new Point(0n, 1n, 0n);\n// Static aliases\nPoint.BASE = G;\nPoint.ZERO = I;\n/** `Q = u1⋅G + u2⋅R`. Verifies Q is not ZERO. Unsafe: non-CT. */\nconst doubleScalarMulUns = (R, u1, u2) => {\n    return G.multiply(u1, false).add(R.multiply(u2, false)).assertValidity();\n};\nconst bytesToNumBE = (b) => big('0x' + (bytesToHex(b) || '0'));\nconst sliceBytesNumBE = (b, from, to) => bytesToNumBE(b.subarray(from, to));\nconst B256 = 2n ** 256n; // secp256k1 is weierstrass curve. Equation is x³ + ax + b.\n/** Number to 32b. Must be 0 <= num < B256. validate, pad, to bytes. */\nconst numTo32b = (num) => hexToBytes(padh(arange(num, 0n, B256), L2));\n/** Normalize private key to scalar (bigint). Verifies scalar is in range 1<s<N */\nconst toPrivScalar = (pr) => {\n    const num = isBig(pr) ? pr : bytesToNumBE(toU8(pr, L));\n    return arange(num, 1n, N, 'private key invalid 3');\n};\n/** For Signature malleability, validates sig.s is bigger than N/2. */\nconst highS = (n) => n > N >> 1n;\n/** Creates 33/65-byte public key from 32-byte private key. */\nconst getPublicKey = (privKey, isCompressed = true) => {\n    return G.multiply(toPrivScalar(privKey)).toBytes(isCompressed);\n};\n/** ECDSA Signature class. Supports only compact 64-byte representation, not DER. */\nclass Signature {\n    r;\n    s;\n    recovery;\n    constructor(r, s, recovery) {\n        this.r = agroup(r); // 1 <= r < N\n        this.s = agroup(s); // 1 <= s < N\n        if (recovery != null)\n            this.recovery = recovery;\n        Object.freeze(this);\n    }\n    /** Create signature from 64b compact (r || s) representation. */\n    static fromBytes(b) {\n        abytes(b, L2);\n        const r = sliceBytesNumBE(b, 0, L);\n        const s = sliceBytesNumBE(b, L, L2);\n        return new Signature(r, s);\n    }\n    toBytes() {\n        const { r, s } = this;\n        return concatBytes(numTo32b(r), numTo32b(s));\n    }\n    /** Copy signature, with newly added recovery bit. */\n    addRecoveryBit(bit) {\n        return new Signature(this.r, this.s, bit);\n    }\n    hasHighS() {\n        return highS(this.s);\n    }\n    toCompactRawBytes() {\n        return this.toBytes();\n    }\n    toCompactHex() {\n        return bytesToHex(this.toBytes());\n    }\n    recoverPublicKey(msg) {\n        return recoverPublicKey(this, msg);\n    }\n    static fromCompact(hex) {\n        return Signature.fromBytes(toU8(hex, L2));\n    }\n    assertValidity() {\n        return this;\n    }\n    normalizeS() {\n        const { r, s, recovery } = this;\n        return highS(s) ? new Signature(r, modN(-s), recovery) : this;\n    }\n}\n/**\n * RFC6979: ensure ECDSA msg is X bytes, convert to BigInt.\n * RFC suggests optional truncating via bits2octets.\n * FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits,\n * which matches bits2int. bits2int can produce res>N.\n */\nconst bits2int = (bytes) => {\n    const delta = bytes.length * 8 - 256;\n    if (delta > 1024)\n        err('msg invalid'); // our CUSTOM check, \"just-in-case\": prohibit long inputs\n    const num = bytesToNumBE(bytes);\n    return delta > 0 ? num >> big(delta) : num;\n};\n/** int2octets can't be used; pads small msgs with 0: BAD for truncation as per RFC vectors */\nconst bits2int_modN = (bytes) => modN(bits2int(abytes(bytes)));\nconst signOpts = { lowS: true };\nconst veriOpts = { lowS: true };\n// RFC6979 signature generation, preparation step.\nconst prepSig = (msgh, priv, opts = signOpts) => {\n    if (['der', 'recovered', 'canonical'].some((k) => k in opts))\n        // legacy opts\n        err('option not supported');\n    let { lowS, extraEntropy } = opts; // generates low-s sigs by default\n    if (lowS == null)\n        lowS = true; // RFC6979 3.2: we skip step A\n    const i2o = numTo32b; // int to octets\n    const h1i = bits2int_modN(toU8(msgh)); // msg bigint\n    const h1o = i2o(h1i); // msg octets\n    const d = toPrivScalar(priv); // validate private key, convert to bigint\n    const seed = [i2o(d), h1o]; // Step D of RFC6979 3.2\n    /** RFC6979 3.6: additional k' (optional). See {@link ExtraEntropy}. */\n    // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n    if (extraEntropy)\n        seed.push(extraEntropy === true ? randomBytes(L) : toU8(extraEntropy));\n    const m = h1i; // convert msg to bigint\n    // Converts signature params into point w r/s, checks result for validity.\n    // To transform k => Signature:\n    // q = k⋅G\n    // r = q.x mod n\n    // s = k^-1(m + rd) mod n\n    const k2sig = (kBytes) => {\n        // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n        // Important: all mod() calls here must be done over N\n        const k = bits2int(kBytes);\n        if (!(1n <= k && k < N))\n            return; // Check 0 < k < CURVE.n\n        const q = G.multiply(k).toAffine(); // q = k⋅G\n        const r = modN(q.x); // r = q.x mod n\n        if (r === 0n)\n            return;\n        const ik = invert(k, N); // k^-1 mod n, NOT mod P\n        const s = modN(ik * modN(m + modN(d * r))); // s = k^-1(m + rd) mod n\n        if (s === 0n)\n            return;\n        let normS = s; // normalized S\n        let recovery = (q.x === r ? 0 : 2) | Number(q.y & 1n); // recovery bit (2 or 3, when q.x > n)\n        if (lowS && highS(s)) {\n            // if lowS was passed, ensure s is always\n            normS = modN(-s); // in the bottom half of CURVE.n\n            recovery ^= 1;\n        }\n        return new Signature(r, normS, recovery); // use normS, not s\n    };\n    return { seed: concatBytes(...seed), k2sig };\n};\n// HMAC-DRBG from NIST 800-90. Minimal, non-full-spec - used for RFC6979 signatures.\nconst hmacDrbg = (asynchronous) => {\n    let v = u8n(L); // Steps B, C of RFC6979 3.2: set hashLen\n    let k = u8n(L); // In our case, it's always equal to L\n    let i = 0; // Iterations counter, will throw when over max\n    const NULL = u8n(0);\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const max = 1000;\n    const _e = 'drbg: tried 1000 values';\n    if (asynchronous) {\n        // asynchronous=true\n        // h = hmac(K || V || ...)\n        const h = (...b) => etc.hmacSha256Async(k, v, ...b);\n        const reseed = async (seed = NULL) => {\n            // HMAC-DRBG reseed() function. Steps D-G\n            k = await h(u8of(0x00), seed); // k = hmac(K || V || 0x00 || seed)\n            v = await h(); // v = hmac(K || V)\n            if (seed.length === 0)\n                return;\n            k = await h(u8of(0x01), seed); // k = hmac(K || V || 0x01 || seed)\n            v = await h(); // v = hmac(K || V)\n        };\n        // HMAC-DRBG generate() function\n        const gen = async () => {\n            if (i++ >= max)\n                err(_e);\n            v = await h(); // v = hmac(K || V)\n            return v; // this diverges from noble-curves: we don't allow arbitrary output len!\n        };\n        // Do not reuse returned fn for more than 1 sig:\n        // 1) it's slower (JIT screws up). 2. unsafe (async race conditions)\n        return async (seed, pred) => {\n            reset();\n            await reseed(seed); // Steps D-G\n            let res = undefined; // Step H: grind until k is in [1..n-1]\n            while (!(res = pred(await gen())))\n                await reseed(); // test predicate until it returns ok\n            reset();\n            return res;\n        };\n    }\n    else {\n        // asynchronous=false; same as above, but synchronous\n        // h = hmac(K || V || ...)\n        const h = (...b) => callHash('hmacSha256Sync')(k, v, ...b);\n        const reseed = (seed = NULL) => {\n            // HMAC-DRBG reseed() function. Steps D-G\n            k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n            v = h(); // v = hmac(k || v)\n            if (seed.length === 0)\n                return;\n            k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n            v = h(); // v = hmac(k || v)\n        };\n        // HMAC-DRBG generate() function\n        const gen = () => {\n            if (i++ >= max)\n                err(_e);\n            v = h(); // v = hmac(k || v)\n            return v; // this diverges from noble-curves: we don't allow arbitrary output len!\n        };\n        // Do not reuse returned fn for more than 1 sig:\n        // 1) it's slower (JIT screws up). 2. unsafe (async race conditions)\n        return (seed, pred) => {\n            reset();\n            reseed(seed); // Steps D-G\n            let res = undefined; // Step H: grind until k is in [1..n-1]\n            while (!(res = pred(gen())))\n                reseed(); // test predicate until it returns ok\n            reset();\n            return res;\n        };\n    }\n};\n/**\n * Sign a msg hash using secp256k1. Async.\n * Follows [SEC1](https://secg.org/sec1-v2.pdf) 4.1.2 & RFC6979.\n * It's suggested to enable hedging ({@link ExtraEntropy}) to prevent fault attacks.\n * @param msgh - message HASH, not message itself e.g. sha256(message)\n * @param priv - private key\n * @param opts - `lowS: true` prevents malleability, `extraEntropy: true` enables hedging\n */\nconst signAsync = async (msgh, priv, opts = signOpts) => {\n    // Re-run drbg until k2sig returns ok\n    const { seed, k2sig } = prepSig(msgh, priv, opts);\n    const sig = await hmacDrbg(true)(seed, k2sig);\n    return sig;\n};\n/**\n * Sign a msg hash using secp256k1.\n * Follows [SEC1](https://secg.org/sec1-v2.pdf) 4.1.2 & RFC6979.\n * It's suggested to enable hedging ({@link ExtraEntropy}) to prevent fault attacks.\n * @param msgh - message HASH, not message itself e.g. sha256(message)\n * @param priv - private key\n * @param opts - `lowS: true` prevents malleability, `extraEntropy: true` enables hedging\n * @example\n * const sig = sign(sha256('hello'), privKey, { extraEntropy: true }).toBytes();\n */\nconst sign = (msgh, priv, opts = signOpts) => {\n    // Re-run drbg until k2sig returns ok\n    const { seed, k2sig } = prepSig(msgh, priv, opts);\n    const sig = hmacDrbg(false)(seed, k2sig);\n    return sig;\n};\n/**\n * Verify a signature using secp256k1.\n * Follows [SEC1](https://secg.org/sec1-v2.pdf) 4.1.4.\n * Default lowS=true, prevents malleability.\n * @param sig - signature, 64-byte or Signature instance\n * @param msgh - message HASH, not message itself e.g. sha256(message)\n * @param pub - public key\n * @param opts - { lowS: true } is default, prohibits s >= CURVE.n/2 to prevent malleability\n */\nconst verify = (sig, msgh, pub, opts = veriOpts) => {\n    let { lowS } = opts;\n    if (lowS == null)\n        lowS = true;\n    if ('strict' in opts)\n        err('option not supported');\n    let sigg;\n    // Previous ver supported DER sigs.\n    // We throw error when DER is suspected now.\n    const rs = sig && typeof sig === 'object' && 'r' in sig;\n    if (!rs && toU8(sig).length !== L2)\n        err('signature must be 64 bytes');\n    try {\n        sigg = rs ? new Signature(sig.r, sig.s) : Signature.fromCompact(sig);\n        const h = bits2int_modN(toU8(msgh)); // Truncate hash\n        const P = Point.fromBytes(toU8(pub)); // Validate public key\n        const { r, s } = sigg;\n        if (lowS && highS(s))\n            return false; // lowS bans sig.s >= CURVE.n/2\n        const is = invert(s, N); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = doubleScalarMulUns(P, u1, u2).toAffine(); // R = u1⋅G + u2⋅P\n        // Stop if R is identity / zero point. Check is done inside `doubleScalarMulUns`\n        const v = modN(R.x); // R.x must be in N's field, not P's\n        return v === r; // mod(R.x, n) == r\n    }\n    catch (error) {\n        return false;\n    }\n};\n/**\n * ECDSA public key recovery. Requires msg hash and recovery id.\n * Follows [SEC1](https://secg.org/sec1-v2.pdf) 4.1.6.\n */\nconst recoverPublicKey = (sig, msgh) => {\n    const { r, s, recovery } = sig;\n    // 0 or 1 recovery id determines sign of \"y\" coordinate.\n    // 2 or 3 means q.x was >N.\n    if (![0, 1, 2, 3].includes(recovery))\n        err('recovery id invalid');\n    const h = bits2int_modN(toU8(msgh, L)); // Truncate hash\n    const radj = recovery === 2 || recovery === 3 ? r + N : r;\n    afield(radj); // ensure q.x is still a field element\n    const head = getPrefix(big(recovery)); // head is 0x02 or 0x03\n    const Rb = concatBytes(head, numTo32b(radj)); // concat head + r\n    const R = Point.fromBytes(Rb);\n    const ir = invert(radj, N); // r^-1\n    const u1 = modN(-h * ir); // -hr^-1\n    const u2 = modN(s * ir); // sr^-1\n    return doubleScalarMulUns(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n};\n/**\n * Elliptic Curve Diffie-Hellman (ECDH) on secp256k1.\n * Result is **NOT hashed**. Use hash or KDF on it if you need.\n * @param privA private key A\n * @param pubB public key B\n * @param isCompressed 33-byte (true) or 65-byte (false) output\n * @returns public key C\n */\nconst getSharedSecret = (privA, pubB, isCompressed = true) => {\n    return Point.fromBytes(toU8(pubB)).multiply(toPrivScalar(privA)).toBytes(isCompressed);\n};\n// FIPS 186 B.4.1 compliant key generation produces private keys with modulo bias being neglible.\n// takes >N+8 bytes, returns (hash mod n-1)+1\nconst hashToPrivateKey = (hash) => {\n    hash = toU8(hash);\n    if (hash.length < L + 8 || hash.length > 1024)\n        err('expected 40-1024b');\n    const num = M(bytesToNumBE(hash), N - 1n);\n    return numTo32b(num + 1n);\n};\nconst randomPrivateKey = () => hashToPrivateKey(randomBytes(L + 16)); // FIPS 186 B.4.1.\nconst _sha = 'SHA-256';\n/** Math, hex, byte helpers. Not in `utils` because utils share API with noble-curves. */\nconst etc = {\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    concatBytes: concatBytes,\n    bytesToNumberBE: bytesToNumBE,\n    numberToBytesBE: numTo32b,\n    mod: M,\n    invert: invert, // math utilities\n    hmacSha256Async: async (key, ...msgs) => {\n        const s = subtle();\n        const name = 'HMAC';\n        const k = await s.importKey('raw', key, { name, hash: { name: _sha } }, false, ['sign']);\n        return u8n(await s.sign(name, k, concatBytes(...msgs)));\n    },\n    hmacSha256Sync: undefined, // For TypeScript. Actual logic is below\n    hashToPrivateKey: hashToPrivateKey,\n    randomBytes: randomBytes,\n};\n/** Curve-specific utilities for private keys. */\nconst utils = {\n    normPrivateKeyToScalar: toPrivScalar,\n    isValidPrivateKey: (key) => {\n        try {\n            return !!toPrivScalar(key);\n        }\n        catch (e) {\n            return false;\n        }\n    },\n    randomPrivateKey: randomPrivateKey,\n    precompute: (w = 8, p = G) => {\n        p.multiply(3n);\n        w;\n        return p;\n    },\n};\n// ## Precomputes\n// --------------\nconst W = 8; // W is window size\nconst scalarBits = 256;\nconst pwindows = Math.ceil(scalarBits / W) + 1; // 33 for W=8\nconst pwindowSize = 2 ** (W - 1); // 128 for W=8\nconst precompute = () => {\n    const points = [];\n    let p = G;\n    let b = p;\n    for (let w = 0; w < pwindows; w++) {\n        b = p;\n        points.push(b);\n        for (let i = 1; i < pwindowSize; i++) {\n            b = b.add(p);\n            points.push(b);\n        } // i=1, bc we skip 0\n        p = b.double();\n    }\n    return points;\n};\nlet Gpows = undefined; // precomputes for base point G\n// const-time negate\nconst ctneg = (cnd, p) => {\n    const n = p.negate();\n    return cnd ? n : p;\n};\n/**\n * Precomputes give 12x faster getPublicKey(), 10x sign(), 2x verify() by\n * caching multiples of G (base point). Cache is stored in 32MB of RAM.\n * Any time `G.multiply` is done, precomputes are used.\n * Not used for getSharedSecret, which instead multiplies random pubkey `P.multiply`.\n *\n * w-ary non-adjacent form (wNAF) precomputation method is 10% slower than windowed method,\n * but takes 2x less RAM. RAM reduction is possible by utilizing `.subtract`.\n *\n * !! Precomputes can be disabled by commenting-out call of the wNAF() inside Point#multiply().\n */\nconst wNAF = (n) => {\n    const comp = Gpows || (Gpows = precompute());\n    let p = I;\n    let f = G; // f must be G, or could become I in the end\n    const pow_2_w = 2 ** W; // 256 for W=8\n    const maxNum = pow_2_w; // 256 for W=8\n    const mask = big(pow_2_w - 1); // 255 for W=8 == mask 0b11111111\n    const shiftBy = big(W); // 8 for W=8\n    for (let w = 0; w < pwindows; w++) {\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > pwindowSize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off = w * pwindowSize;\n        const offF = off; // offsets, evaluate both\n        const offP = off + Math.abs(wbits) - 1;\n        const isEven = w % 2 !== 0; // conditions, evaluate both\n        const isNeg = wbits < 0;\n        if (wbits === 0) {\n            // off == I: can't add it. Adding random offF instead.\n            f = f.add(ctneg(isEven, comp[offF])); // bits are 0: add garbage to fake point\n        }\n        else {\n            p = p.add(ctneg(isNeg, comp[offP])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n};\n// !! Remove the export below to easily use in REPL / browser console\nexport { secp256k1_CURVE as CURVE, etc, getPublicKey, getSharedSecret, Point, Point as ProjectivePoint, sign, signAsync, Signature, utils, verify, };\n", "import { bytesToHex as nobleBytesToHex, hexToBytes as nobleHexToBytes } from '@noble/ciphers/utils';\nimport { ProjectivePoint } from '@noble/secp256k1';\nimport type { Hex } from 'viem';\nimport { publicKeyToAddress as viemPublicKeyToAddress } from 'viem/accounts';\n\nexport const bytesToHex = (bytes: Uint8Array): string => {\n  return `0x${nobleBytesToHex(bytes)}`;\n};\n\nexport const hexToBytes = (hex: string): Uint8Array => {\n  return nobleHexToBytes(hex.slice(2));\n};\n\nfunction decompressPublicKey(compressedKey: string): string {\n  // Decompress the public key\n  const point = ProjectivePoint.fromHex(compressedKey.slice(2));\n\n  // Get the uncompressed public key\n  const uncompressedKey = point.toRawBytes(false); // `false` = uncompressed format\n  return bytesToHex(uncompressedKey);\n}\nexport const publicKeyToAddress = (publicKey: string): string => {\n  const uncompressedKey = decompressPublicKey(publicKey);\n  return viemPublicKeyToAddress(uncompressedKey as Hex);\n};\n", "import type * as Schema from 'effect/Schema';\n\nexport const isRelationField = (field: Schema.Schema.All | Schema.PropertySignature.All<PropertyKey>) => {\n  // TODO: improve this check\n  if (field.ast._tag === 'TupleType') {\n    return true;\n  }\n  return false;\n};\n", "export class NaNNotAllowedError extends Error {\n  constructor() {\n    super('NaN is not allowed');\n  }\n}\nexport class InfinityNotAllowedError extends Error {\n  constructor() {\n    super('Infinity is not allowed');\n  }\n}\n\n/**\n * JSON canonicalize function.\n * Creates crypto safe predictable canocalization of JSON as defined by RFC8785.\n *\n * @see https://tools.ietf.org/html/rfc8785\n * @see https://www.rfc-editor.org/rfc/rfc8785\n *\n * @example <caption>Primitive values</caption>\n * ```ts\n * import { canonicalize } from '@graph-framework/utils'\n *\n * console.log(canonicalize(null)) // 'null'\n * console.log(canonicalize(1)) // '1'\n * console.log(canonicalize(\"test\")) // \"string\"\n * console.log(canonicalize(true)) // 'true'\n * ```\n *\n * @example <caption>Objects</caption>\n * ```\n * import { canonicalize } from '@graph-framework/utils'\n *\n * const json = {\n *    from_account: '543 232 625-3',\n *    to_account: '321 567 636-4',\n *    amount: 500,\n *    currency: 'USD',\n * };\n * console.log(canonicalize(json)) // '{\"amount\":500,\"currency\":\"USD\",\"from_account\":\"543 232 625-3\",\"to_account\":\"321 567 636-4\"}'\n * ```\n *\n * @example <caption>Arrays</caption>\n * ```ts\n * import { canonicalize } from '@graph-framework/utils'\n *\n * console.log(canonicalize([1, 'text', null, true, false])) // '[1,\"text\",null,true,false]'\n * ```\n *\n * @param object object to JSC canonicalize\n * @throws NaNNotAllowedError if given object is of type number, but is not a valid number\n * @throws InfinityNotAllowedError if given object is of type number, but is the infinite number\n */\nexport function canonicalize<T = unknown>(object: T): string {\n  if (typeof object === 'number' && Number.isNaN(object)) {\n    throw new NaNNotAllowedError();\n  }\n  if (typeof object === 'number' && !Number.isFinite(object)) {\n    throw new InfinityNotAllowedError();\n  }\n\n  if (object === null || typeof object !== 'object') {\n    return JSON.stringify(object);\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: typeof T is unknown, cast to any to check\n  if ((object as any).toJSON instanceof Function) {\n    // biome-ignore lint/suspicious/noExplicitAny: typeof T is unknown, cast to any to check\n    return canonicalize((object as any).toJSON());\n  }\n\n  if (Array.isArray(object)) {\n    const values = object.reduce((t, cv) => {\n      if (cv === undefined || typeof cv === 'symbol') {\n        return t; // Skip undefined and symbol values entirely\n      }\n      const comma = t.length === 0 ? '' : ',';\n      return `${t}${comma}${canonicalize(cv)}`;\n    }, '');\n    return `[${values}]`;\n  }\n\n  const values = Object.keys(object)\n    .sort()\n    .reduce((t, cv) => {\n      // biome-ignore lint/suspicious/noExplicitAny: typeof T is unknown, cast to any to check\n      if ((object as any)[cv] === undefined || typeof (object as any)[cv] === 'symbol') {\n        return t;\n      }\n      const comma = t.length === 0 ? '' : ',';\n      // biome-ignore lint/suspicious/noExplicitAny: typeof T is unknown, cast to any to check\n      return `${t}${comma}${canonicalize(cv)}:${canonicalize((object as any)[cv])}`;\n    }, '');\n  return `{${values}}`;\n}\n", "const encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nexport const stringToUint8Array = (str: string): Uint8Array => {\n  return encoder.encode(str);\n};\n\nexport const uint8ArrayToString = (uint8Array: Uint8Array): string => {\n  return decoder.decode(uint8Array);\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex, canonicalize, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport { encryptMessage } from './encrypt-message.js';\nimport type { RequestCreateUpdate } from './types.js';\n\ninterface SignedMessageParams {\n  accountAddress: string;\n  updateId: string;\n  spaceId: string;\n  message: Uint8Array;\n  secretKey: string;\n  signaturePrivateKey: string;\n}\n\ninterface RecoverParams {\n  update: Uint8Array;\n  spaceId: string;\n  updateId: string;\n  signature: {\n    hex: string;\n    recovery: number;\n  };\n  accountAddress: string;\n}\n\nexport const signedUpdateMessage = ({\n  accountAddress,\n  updateId,\n  spaceId,\n  message,\n  secretKey,\n  signaturePrivateKey,\n}: SignedMessageParams): RequestCreateUpdate => {\n  const update = encryptMessage({\n    message,\n    secretKey: hexToBytes(secretKey),\n  });\n\n  const messageToSign = stringToUint8Array(\n    canonicalize({\n      accountAddress,\n      updateId,\n      update,\n      spaceId,\n    }),\n  );\n\n  const recoverySignature = secp256k1.sign(messageToSign, hexToBytes(signaturePrivateKey), { prehash: true });\n\n  const signature = {\n    hex: recoverySignature.toCompactHex(),\n    recovery: recoverySignature.recovery,\n  };\n\n  return {\n    type: 'create-update',\n    updateId,\n    update,\n    spaceId,\n    accountAddress,\n    signature,\n  };\n};\n\nexport const recoverUpdateMessageSigner = ({\n  update,\n  spaceId,\n  updateId,\n  signature,\n  accountAddress,\n}: RecoverParams | RequestCreateUpdate) => {\n  const recoveredSignature = secp256k1.Signature.fromCompact(signature.hex).addRecoveryBit(signature.recovery);\n  const signedMessage = stringToUint8Array(\n    canonicalize({\n      accountAddress,\n      updateId,\n      update,\n      spaceId,\n    }),\n  );\n  const signedMessageHash = sha256(signedMessage);\n  return bytesToHex(recoveredSignature.recoverPublicKey(signedMessageHash).toRawBytes(true));\n};\n", "import * as Schema from 'effect/Schema';\n\nexport const InboxSenderAuthPolicy = Schema.Union(\n  Schema.Literal('anonymous'),\n  Schema.Literal('optional_auth'),\n  Schema.Literal('requires_auth'),\n);\n\nexport type InboxSenderAuthPolicy = Schema.Schema.Type<typeof InboxSenderAuthPolicy>;\n", "export * from './accept-invitation.js';\nexport * from './apply-event.js';\nexport * from './create-inbox.js';\nexport * from './create-invitation.js';\nexport * from './create-space.js';\nexport * from './delete-space.js';\nexport * from './hash-event.js';\nexport * from './types.js';\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { Effect } from 'effect';\n\nimport { canonicalize, generateId, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport type { AcceptInvitationEvent, Author } from './types.js';\n\ntype Params = {\n  author: Author;\n  previousEventHash: string;\n};\n\nexport const acceptInvitation = ({\n  author,\n  previousEventHash,\n}: Params): Effect.Effect<AcceptInvitationEvent, undefined> => {\n  const transaction = {\n    id: generateId(),\n    type: 'accept-invitation' as const,\n    previousEventHash,\n  };\n  const encodedTransaction = stringToUint8Array(canonicalize(transaction));\n  const signatureResult = secp256k1.sign(encodedTransaction, hexToBytes(author.signaturePrivateKey), {\n    prehash: true,\n  });\n\n  return Effect.succeed({\n    transaction,\n    author: {\n      accountAddress: author.accountAddress,\n      signature: {\n        hex: signatureResult.toCompactHex(),\n        recovery: signatureResult.recovery,\n      },\n    },\n  });\n};\n", "import { blake3 } from '@noble/hashes/blake3';\n\nimport { bytesToHex, canonicalize } from '../utils/index.js';\n\nimport type { SpaceEvent } from './types.js';\n\nexport const hashEvent = (event: SpaceEvent): string => {\n  const hash = blake3(canonicalize(event));\n  return bytesToHex(hash);\n};\n", "import type { Id as Grc20Id } from '@graphprotocol/grc-20';\nimport * as Data from 'effect/Data';\nimport * as Schema from 'effect/Schema';\n\nexport const SignatureWithRecovery = Schema.Struct({\n  hex: Schema.String,\n  recovery: Schema.Number,\n});\n\nexport type SignatureWithRecovery = Schema.Schema.Type<typeof SignatureWithRecovery>;\n\nexport const ConnectAuthPayload = Schema.Struct({\n  expiry: Schema.Number,\n  encryptionPublicKey: Schema.String,\n  appId: Schema.String,\n});\n\nexport type ConnectAuthPayload = Schema.Schema.Type<typeof ConnectAuthPayload>;\n\nexport const ConnectCallbackResult = Schema.Struct({\n  appIdentityAddress: Schema.String,\n  appIdentityAddressPrivateKey: Schema.String,\n  accountAddress: Schema.String,\n  permissionId: Schema.String,\n  signaturePublicKey: Schema.String,\n  signaturePrivateKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n  encryptionPrivateKey: Schema.String,\n  sessionToken: Schema.String,\n  sessionTokenExpires: Schema.Date,\n  privateSpaces: Schema.Array(Schema.Struct({ id: Schema.String })),\n  publicSpaces: Schema.Array(Schema.Struct({ id: Schema.String })),\n});\n\nexport type ConnectCallbackResult = Schema.Schema.Type<typeof ConnectCallbackResult>;\n\nexport const ConnectCallbackDecryptedData = Schema.Struct({\n  ...ConnectCallbackResult.fields,\n  sessionTokenExpires: Schema.Number,\n  expiry: Schema.Number,\n});\n\nexport type ConnectCallbackDecryptedData = Schema.Schema.Type<typeof ConnectCallbackDecryptedData>;\n\nexport class FailedToParseConnectAuthUrl extends Data.TaggedError('FailedToParseConnectAuthUrl')<{\n  message: string;\n}> {}\n\nexport class FailedToParseAuthCallbackUrl extends Data.TaggedError('FailedToParseAuthCallbackUrl')<{\n  message: string;\n}> {}\n\nexport type MappingEntry = {\n  typeIds: Grc20Id.Id[];\n  properties?: {\n    [key: string]: Grc20Id.Id;\n  };\n  relations?: {\n    [key: string]: Grc20Id.Id;\n  };\n};\n\nexport type Mapping = {\n  [key: string]: MappingEntry;\n};\n", "import type { ParseError } from 'effect/ParseResult';\nimport * as Schema from 'effect/Schema';\nimport type { InvalidIdentityError } from '../identity/types.js';\nimport { InboxSenderAuthPolicy } from '../inboxes/types.js';\nimport { SignatureWithRecovery } from '../types.js';\n\nexport const EventAuthor = Schema.Struct({\n  accountAddress: Schema.String,\n  signature: SignatureWithRecovery,\n});\n\nexport type EventAuthor = Schema.Schema.Type<typeof Author>;\n\nexport const SpaceMember = Schema.Struct({\n  accountAddress: Schema.String,\n  role: Schema.Union(Schema.Literal('admin'), Schema.Literal('member')),\n});\n\nexport type SpaceMember = Schema.Schema.Type<typeof SpaceMember>;\n\nexport const SpaceInvitation = Schema.Struct({\n  inviteeAccountAddress: Schema.String,\n});\n\nexport type SpaceInvitation = Schema.Schema.Type<typeof SpaceInvitation>;\n\nexport const SpaceInbox = Schema.Struct({\n  inboxId: Schema.String,\n  encryptionPublicKey: Schema.String,\n  isPublic: Schema.Boolean,\n  authPolicy: InboxSenderAuthPolicy,\n  secretKey: Schema.String,\n});\n\nexport type SpaceInbox = Schema.Schema.Type<typeof SpaceInbox>;\n\nexport const SpaceState = Schema.Struct({\n  id: Schema.String,\n  invitations: Schema.Record({ key: Schema.String, value: SpaceInvitation }),\n  members: Schema.Record({ key: Schema.String, value: SpaceMember }),\n  removedMembers: Schema.Record({ key: Schema.String, value: SpaceMember }),\n  inboxes: Schema.Record({ key: Schema.String, value: SpaceInbox }),\n  lastEventHash: Schema.String,\n});\n\nexport type SpaceState = Schema.Schema.Type<typeof SpaceState>;\n\nexport const CreateSpaceEvent = Schema.Struct({\n  transaction: Schema.Struct({\n    type: Schema.Literal('create-space'),\n    id: Schema.String,\n    creatorAccountAddress: Schema.String,\n  }),\n  author: EventAuthor,\n});\n\nexport type CreateSpaceEvent = Schema.Schema.Type<typeof CreateSpaceEvent>;\n\nexport const DeleteSpaceEvent = Schema.Struct({\n  transaction: Schema.Struct({\n    type: Schema.Literal('delete-space'),\n    id: Schema.String,\n    previousEventHash: Schema.String,\n  }),\n  author: EventAuthor,\n});\n\nexport type DeleteSpaceEvent = Schema.Schema.Type<typeof DeleteSpaceEvent>;\n\nexport const CreateInvitationEvent = Schema.Struct({\n  transaction: Schema.Struct({\n    type: Schema.Literal('create-invitation'),\n    id: Schema.String,\n    inviteeAccountAddress: Schema.String,\n    previousEventHash: Schema.String,\n  }),\n  author: EventAuthor,\n});\n\nexport type CreateInvitationEvent = Schema.Schema.Type<typeof CreateInvitationEvent>;\n\nexport const CreateSpaceInboxEvent = Schema.Struct({\n  transaction: Schema.Struct({\n    type: Schema.Literal('create-space-inbox'),\n    id: Schema.String,\n    spaceId: Schema.String,\n    inboxId: Schema.String,\n    encryptionPublicKey: Schema.String,\n    secretKey: Schema.String,\n    isPublic: Schema.Boolean,\n    authPolicy: InboxSenderAuthPolicy,\n    previousEventHash: Schema.String,\n  }),\n  author: EventAuthor,\n});\n\nexport type CreateSpaceInboxEvent = Schema.Schema.Type<typeof CreateSpaceInboxEvent>;\n\nexport const AcceptInvitationEvent = Schema.Struct({\n  transaction: Schema.Struct({\n    id: Schema.String,\n    type: Schema.Literal('accept-invitation'),\n    previousEventHash: Schema.String,\n  }),\n  author: EventAuthor,\n});\n\nexport type AcceptInvitationEvent = Schema.Schema.Type<typeof AcceptInvitationEvent>;\n\nexport const SpaceEvent = Schema.Union(\n  CreateSpaceEvent,\n  DeleteSpaceEvent,\n  CreateInvitationEvent,\n  AcceptInvitationEvent,\n  CreateSpaceInboxEvent,\n);\n\nexport type SpaceEvent = Schema.Schema.Type<typeof SpaceEvent>;\n\nexport const Author = Schema.Struct({\n  accountAddress: Schema.String,\n  signaturePublicKey: Schema.String,\n  signaturePrivateKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n});\n\nexport type Author = Schema.Schema.Type<typeof Author>;\n\nexport class VerifySignatureError {\n  readonly _tag = 'VerifySignatureError';\n}\n\nexport class InvalidEventError {\n  readonly _tag = 'InvalidEventError';\n}\n\nexport type ApplyError = ParseError | VerifySignatureError | InvalidEventError | InvalidIdentityError;\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Effect, Schema } from 'effect';\nimport type { InvalidIdentityError, PublicIdentity } from '../identity/types.js';\nimport { canonicalize, stringToUint8Array } from '../utils/index.js';\nimport { hashEvent } from './hash-event.js';\nimport {\n  type ApplyError,\n  InvalidEventError,\n  SpaceEvent,\n  type SpaceInbox,\n  type SpaceInvitation,\n  type SpaceMember,\n  type SpaceState,\n  VerifySignatureError,\n} from './types.js';\n\ntype Params = {\n  state: SpaceState | undefined;\n  event: SpaceEvent;\n  getVerifiedIdentity: (accountAddress: string) => Effect.Effect<PublicIdentity, InvalidIdentityError>;\n};\n\nconst decodeSpaceEvent = Schema.decodeUnknownEither(SpaceEvent);\n\nexport const applyEvent = ({\n  state,\n  event: rawEvent,\n  getVerifiedIdentity,\n}: Params): Effect.Effect<SpaceState, ApplyError> => {\n  const decodedEvent = decodeSpaceEvent(rawEvent);\n  if (decodedEvent._tag === 'Left') {\n    return decodedEvent.left;\n  }\n  const event = decodedEvent.right;\n\n  if (event.transaction.type !== 'create-space') {\n    if (state === undefined) {\n      return Effect.fail(new InvalidEventError());\n    }\n    if (event.transaction.previousEventHash !== state.lastEventHash) {\n      return Effect.fail(new InvalidEventError());\n    }\n  }\n\n  const encodedTransaction = stringToUint8Array(canonicalize(event.transaction));\n\n  let signatureInstance = secp256k1.Signature.fromCompact(event.author.signature.hex);\n  signatureInstance = signatureInstance.addRecoveryBit(event.author.signature.recovery);\n  const authorPublicKey = `0x${signatureInstance.recoverPublicKey(sha256(encodedTransaction)).toHex()}`;\n\n  return Effect.gen(function* () {\n    const identity = yield* getVerifiedIdentity(event.author.accountAddress);\n    if (authorPublicKey !== identity.signaturePublicKey) {\n      yield* Effect.fail(new VerifySignatureError());\n    }\n\n    let id = '';\n    let members: { [accountAddress: string]: SpaceMember } = {};\n    let removedMembers: { [accountAddress: string]: SpaceMember } = {};\n    let invitations: { [id: string]: SpaceInvitation } = {};\n    let inboxes: { [inboxId: string]: SpaceInbox } = {};\n    if (event.transaction.type === 'create-space') {\n      id = event.transaction.id;\n      members[event.transaction.creatorAccountAddress] = {\n        accountAddress: event.transaction.creatorAccountAddress,\n        role: 'admin',\n      };\n    } else if (state !== undefined) {\n      id = state.id;\n      members = { ...state.members };\n      removedMembers = { ...state.removedMembers };\n      invitations = { ...state.invitations };\n      inboxes = { ...state.inboxes };\n      if (event.transaction.type === 'accept-invitation') {\n        // is already a member\n        if (members[event.author.accountAddress] !== undefined) {\n          yield* Effect.fail(new InvalidEventError());\n        }\n\n        // find the invitation\n        const result = Object.entries(invitations).find(\n          ([, invitation]) => invitation.inviteeAccountAddress === event.author.accountAddress,\n        );\n        if (!result) {\n          yield* Effect.fail(new InvalidEventError());\n        }\n\n        // @ts-expect-error type issue? we checked that result is not undefined before\n        const [id, invitation] = result;\n\n        members[invitation.inviteeAccountAddress] = {\n          accountAddress: invitation.inviteeAccountAddress,\n          role: 'member',\n        };\n        delete invitations[id];\n        if (removedMembers[event.author.accountAddress] !== undefined) {\n          delete removedMembers[event.author.accountAddress];\n        }\n      } else {\n        // check if the author is an admin\n        if (members[event.author.accountAddress]?.role !== 'admin') {\n          yield* Effect.fail(new InvalidEventError());\n        }\n\n        if (event.transaction.type === 'delete-space') {\n          removedMembers = { ...members };\n          members = {};\n          invitations = {};\n        } else if (event.transaction.type === 'create-invitation') {\n          if (members[event.transaction.inviteeAccountAddress] !== undefined) {\n            yield* Effect.fail(new InvalidEventError());\n          }\n          for (const invitation of Object.values(invitations)) {\n            if (invitation.inviteeAccountAddress === event.transaction.inviteeAccountAddress) {\n              yield* Effect.fail(new InvalidEventError());\n            }\n          }\n\n          invitations[event.transaction.id] = {\n            inviteeAccountAddress: event.transaction.inviteeAccountAddress,\n          };\n        } else if (event.transaction.type === 'create-space-inbox') {\n          if (inboxes[event.transaction.inboxId] !== undefined) {\n            yield* Effect.fail(new InvalidEventError());\n          }\n          inboxes[event.transaction.inboxId] = {\n            inboxId: event.transaction.inboxId,\n            encryptionPublicKey: event.transaction.encryptionPublicKey,\n            isPublic: event.transaction.isPublic,\n            authPolicy: event.transaction.authPolicy,\n            secretKey: event.transaction.secretKey,\n          };\n        } else {\n          // state is required for all events except create-space\n          yield* Effect.fail(new InvalidEventError());\n        }\n      }\n    }\n\n    return {\n      id,\n      members,\n      removedMembers,\n      invitations,\n      inboxes,\n      lastEventHash: hashEvent(event),\n    };\n  });\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { Effect } from 'effect';\nimport type { InboxSenderAuthPolicy } from '../inboxes/types.js';\nimport { canonicalize, generateId, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport type { Author, CreateSpaceInboxEvent } from './types.js';\n\nexport const createInbox = ({\n  author,\n  spaceId,\n  inboxId,\n  encryptionPublicKey,\n  secretKey,\n  isPublic,\n  authPolicy,\n  previousEventHash,\n}: {\n  author: Author;\n  spaceId: string;\n  inboxId: string;\n  encryptionPublicKey: string;\n  previousEventHash: string;\n  secretKey: string;\n  isPublic: boolean;\n  authPolicy: InboxSenderAuthPolicy;\n}): Effect.Effect<CreateSpaceInboxEvent, undefined> => {\n  const transaction = {\n    type: 'create-space-inbox' as const,\n    id: generateId(),\n    spaceId,\n    inboxId,\n    encryptionPublicKey,\n    secretKey,\n    isPublic,\n    authPolicy,\n    previousEventHash,\n  };\n  const signature = secp256k1.sign(\n    stringToUint8Array(canonicalize(transaction)),\n    hexToBytes(author.signaturePrivateKey),\n    { prehash: true },\n  );\n\n  // Create a SpaceEvent to create the inbox and sign it\n  const spaceEvent = {\n    transaction,\n    author: {\n      accountAddress: author.accountAddress,\n      signature: {\n        hex: signature.toCompactHex(),\n        recovery: signature.recovery,\n      },\n    },\n  } satisfies CreateSpaceInboxEvent;\n\n  return Effect.succeed(spaceEvent);\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { Effect } from 'effect';\n\nimport { canonicalize, generateId, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport type { Author, CreateInvitationEvent } from './types.js';\n\ntype Params = {\n  author: Author;\n  previousEventHash: string;\n  invitee: {\n    accountAddress: string;\n  };\n};\n\nexport const createInvitation = ({\n  author,\n  previousEventHash,\n  invitee,\n}: Params): Effect.Effect<CreateInvitationEvent, undefined> => {\n  const transaction = {\n    id: generateId(),\n    type: 'create-invitation' as const,\n    inviteeAccountAddress: invitee.accountAddress,\n    previousEventHash,\n  };\n  const encodedTransaction = stringToUint8Array(canonicalize(transaction));\n  const signatureResult = secp256k1.sign(encodedTransaction, hexToBytes(author.signaturePrivateKey), {\n    prehash: true,\n  });\n\n  return Effect.succeed({\n    transaction,\n    author: {\n      accountAddress: author.accountAddress,\n      signature: {\n        hex: signatureResult.toCompactHex(),\n        recovery: signatureResult.recovery,\n      },\n    },\n  });\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { Effect } from 'effect';\n\nimport { canonicalize, generateId, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport type { Author, CreateSpaceEvent } from './types.js';\n\ntype Params = {\n  author: Author;\n  spaceId?: string;\n};\n\nexport const createSpace = ({ author, spaceId }: Params): Effect.Effect<CreateSpaceEvent, undefined> => {\n  const transaction = {\n    type: 'create-space' as const,\n    id: spaceId ?? generateId(),\n    creatorAccountAddress: author.accountAddress,\n  };\n  const encodedTransaction = stringToUint8Array(canonicalize(transaction));\n  const signatureResult = secp256k1.sign(encodedTransaction, hexToBytes(author.signaturePrivateKey), {\n    prehash: true,\n  });\n\n  const event: CreateSpaceEvent = {\n    transaction,\n    author: {\n      accountAddress: author.accountAddress,\n      signature: {\n        hex: signatureResult.toCompactHex(),\n        recovery: signatureResult.recovery,\n      },\n    },\n  };\n\n  return Effect.succeed(event);\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { Effect } from 'effect';\n\nimport { canonicalize, hexToBytes, stringToUint8Array } from '../utils/index.js';\n\nimport type { Author, DeleteSpaceEvent, SpaceEvent } from './types.js';\n\ntype Params = {\n  author: Author;\n  id: string;\n  previousEventHash: string;\n};\n\nexport const deleteSpace = ({ author, id, previousEventHash }: Params): Effect.Effect<SpaceEvent, undefined> => {\n  const transaction = {\n    type: 'delete-space' as const,\n    id,\n    previousEventHash,\n  };\n  const encodedTransaction = stringToUint8Array(canonicalize(transaction));\n  const signatureResult = secp256k1.sign(encodedTransaction, hexToBytes(author.signaturePrivateKey), {\n    prehash: true,\n  });\n\n  const event: DeleteSpaceEvent = {\n    transaction,\n    author: {\n      accountAddress: author.accountAddress,\n      signature: {\n        hex: signatureResult.toCompactHex(),\n        recovery: signatureResult.recovery,\n      },\n    },\n  };\n  return Effect.succeed(event);\n};\n", "import * as Schema from 'effect/Schema';\n\nimport { InboxSenderAuthPolicy } from '../inboxes/types.js';\nimport {\n  AcceptInvitationEvent,\n  CreateInvitationEvent,\n  CreateSpaceEvent,\n  CreateSpaceInboxEvent,\n  SpaceEvent,\n} from '../space-events/index.js';\nimport { SignatureWithRecovery } from '../types.js';\nexport const SignedUpdate = Schema.Struct({\n  update: Schema.Uint8Array,\n  accountAddress: Schema.String,\n  signature: SignatureWithRecovery,\n  updateId: Schema.String,\n});\n\nexport const Updates = Schema.Struct({\n  updates: Schema.Array(SignedUpdate),\n  firstUpdateClock: Schema.Number,\n  lastUpdateClock: Schema.Number,\n});\n\nexport type Updates = Schema.Schema.Type<typeof Updates>;\n\nexport const KeyBox = Schema.Struct({\n  accountAddress: Schema.String,\n  ciphertext: Schema.String,\n  nonce: Schema.String,\n  authorPublicKey: Schema.String,\n});\n\nexport type KeyBox = Schema.Schema.Type<typeof KeyBox>;\n\nexport const KeyBoxWithKeyId = Schema.Struct({\n  ...KeyBox.fields,\n  id: Schema.String,\n});\n\nexport type KeyBoxWithKeyId = Schema.Schema.Type<typeof KeyBoxWithKeyId>;\n\nexport const IdentityKeyBox = Schema.Struct({\n  signer: Schema.String,\n  accountAddress: Schema.String,\n  ciphertext: Schema.String,\n  nonce: Schema.String,\n});\n\nexport type IdentityKeyBox = Schema.Schema.Type<typeof IdentityKeyBox>;\n\nexport const RequestCreateSpaceEvent = Schema.Struct({\n  type: Schema.Literal('create-space-event'),\n  spaceId: Schema.String,\n  event: CreateSpaceEvent,\n  keyBox: KeyBoxWithKeyId,\n  name: Schema.String,\n});\n\nexport type RequestCreateSpaceEvent = Schema.Schema.Type<typeof RequestCreateSpaceEvent>;\n\nexport const RequestConnectCreateSpaceEvent = Schema.Struct({\n  type: Schema.Literal('connect-create-space-event'),\n  accountAddress: Schema.String,\n  spaceId: Schema.String,\n  event: CreateSpaceEvent,\n  keyBox: KeyBoxWithKeyId,\n  infoContent: Schema.String,\n  infoSignature: SignatureWithRecovery,\n  name: Schema.String,\n});\n\nexport type RequestConnectCreateSpaceEvent = Schema.Schema.Type<typeof RequestConnectCreateSpaceEvent>;\n\nexport const RequestCreateInvitationEvent = Schema.Struct({\n  type: Schema.Literal('create-invitation-event'),\n  spaceId: Schema.String,\n  event: CreateInvitationEvent,\n  keyBoxes: Schema.Array(KeyBoxWithKeyId),\n});\n\nexport const RequestConnectAddAppIdentityToSpaces = Schema.Struct({\n  type: Schema.Literal('connect-add-app-identity-to-spaces'),\n  appIdentityAddress: Schema.String,\n  accountAddress: Schema.String,\n  spacesInput: Schema.Array(\n    Schema.Struct({\n      id: Schema.String,\n      keyBoxes: Schema.Array(KeyBoxWithKeyId),\n    }),\n  ),\n});\n\nexport type RequestConnectAddAppIdentityToSpaces = Schema.Schema.Type<typeof RequestConnectAddAppIdentityToSpaces>;\n\nexport type RequestCreateInvitationEvent = Schema.Schema.Type<typeof RequestCreateInvitationEvent>;\n\nexport const RequestAcceptInvitationEvent = Schema.Struct({\n  type: Schema.Literal('accept-invitation-event'),\n  spaceId: Schema.String,\n  event: AcceptInvitationEvent,\n});\n\nexport type RequestAcceptInvitationEvent = Schema.Schema.Type<typeof RequestAcceptInvitationEvent>;\n\nexport const RequestSubscribeToSpace = Schema.Struct({\n  type: Schema.Literal('subscribe-space'),\n  id: Schema.String,\n  lastKnownUpdateClock: Schema.optional(Schema.Number),\n});\n\nexport type RequestSubscribeToSpace = Schema.Schema.Type<typeof RequestSubscribeToSpace>;\n\nexport const RequestListSpaces = Schema.Struct({\n  type: Schema.Literal('list-spaces'),\n});\n\nexport type RequestListSpaces = Schema.Schema.Type<typeof RequestListSpaces>;\n\nexport const RequestListInvitations = Schema.Struct({\n  type: Schema.Literal('list-invitations'),\n});\n\nexport type RequestListInvitations = Schema.Schema.Type<typeof RequestListInvitations>;\n\nexport const RequestCreateUpdate = Schema.Struct({\n  type: Schema.Literal('create-update'),\n  accountAddress: Schema.String,\n  update: Schema.Uint8Array,\n  spaceId: Schema.String,\n  updateId: Schema.String, // used to identify the confirmation message\n  signature: SignatureWithRecovery,\n});\n\nexport const RequestCreateAccountInbox = Schema.Struct({\n  type: Schema.Literal('create-account-inbox'),\n  accountAddress: Schema.String,\n  inboxId: Schema.String,\n  isPublic: Schema.Boolean,\n  authPolicy: InboxSenderAuthPolicy,\n  encryptionPublicKey: Schema.String,\n  signature: SignatureWithRecovery,\n});\n\nexport type RequestCreateAccountInbox = Schema.Schema.Type<typeof RequestCreateAccountInbox>;\n\nexport const RequestCreateSpaceInboxEvent = Schema.Struct({\n  type: Schema.Literal('create-space-inbox-event'),\n  spaceId: Schema.String,\n  event: CreateSpaceInboxEvent,\n});\n\nexport type RequestCreateSpaceInboxEvent = Schema.Schema.Type<typeof RequestCreateSpaceInboxEvent>;\n\nexport const RequestGetLatestSpaceInboxMessages = Schema.Struct({\n  type: Schema.Literal('get-latest-space-inbox-messages'),\n  spaceId: Schema.String,\n  inboxId: Schema.String,\n  since: Schema.Date,\n});\n\nexport type RequestGetLatestSpaceInboxMessages = Schema.Schema.Type<typeof RequestGetLatestSpaceInboxMessages>;\n\nexport const RequestGetLatestAccountInboxMessages = Schema.Struct({\n  type: Schema.Literal('get-latest-account-inbox-messages'),\n  accountAddress: Schema.String,\n  inboxId: Schema.String,\n  since: Schema.Date,\n});\n\nexport type RequestGetLatestAccountInboxMessages = Schema.Schema.Type<typeof RequestGetLatestAccountInboxMessages>;\n\nexport const RequestGetAccountInboxes = Schema.Struct({\n  type: Schema.Literal('get-account-inboxes'),\n});\n\nexport type RequestGetAccountInboxes = Schema.Schema.Type<typeof RequestGetAccountInboxes>;\n\nexport const RequestMessage = Schema.Union(\n  RequestCreateSpaceEvent,\n  RequestCreateInvitationEvent,\n  RequestAcceptInvitationEvent,\n  RequestSubscribeToSpace,\n  RequestListSpaces,\n  RequestListInvitations,\n  RequestCreateUpdate,\n  RequestCreateAccountInbox,\n  RequestCreateSpaceInboxEvent,\n  RequestGetLatestSpaceInboxMessages,\n  RequestGetLatestAccountInboxMessages,\n  RequestGetAccountInboxes,\n);\n\nexport type RequestMessage = Schema.Schema.Type<typeof RequestMessage>;\n\nexport type RequestCreateUpdate = Schema.Schema.Type<typeof RequestCreateUpdate>;\n\nexport const RequestLoginNonce = Schema.Struct({\n  accountAddress: Schema.String,\n});\n\nexport type RequestLoginNonce = Schema.Schema.Type<typeof RequestLoginNonce>;\n\nexport const RequestLogin = Schema.Struct({\n  accountAddress: Schema.String,\n  message: Schema.String,\n  signature: Schema.String,\n});\n\nexport type RequestLogin = Schema.Schema.Type<typeof RequestLogin>;\n\nexport const RequestLoginWithSigningKey = Schema.Struct({\n  accountAddress: Schema.String,\n  message: Schema.String,\n  publicKey: Schema.String,\n  signature: Schema.String,\n});\n\nexport type RequestLoginWithSigningKey = Schema.Schema.Type<typeof RequestLoginWithSigningKey>;\n\nexport const RequestCreateIdentity = Schema.Struct({\n  keyBox: IdentityKeyBox,\n  accountProof: Schema.String,\n  keyProof: Schema.String,\n  message: Schema.String,\n  signaturePublicKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n  signature: Schema.String,\n});\n\nexport type RequestCreateIdentity = Schema.Schema.Type<typeof RequestCreateIdentity>;\n\nexport const RequestConnectCreateIdentity = Schema.Struct({\n  keyBox: IdentityKeyBox,\n  accountProof: Schema.String,\n  keyProof: Schema.String,\n  signaturePublicKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n});\n\nexport type RequestConnectCreateIdentity = Schema.Schema.Type<typeof RequestConnectCreateIdentity>;\n\nexport const RequestConnectCreateAppIdentity = Schema.Struct({\n  appId: Schema.String,\n  address: Schema.String,\n  accountAddress: Schema.String,\n  ciphertext: Schema.String,\n  nonce: Schema.String,\n  signaturePublicKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n  accountProof: Schema.String,\n  keyProof: Schema.String,\n});\n\nexport type RequestConnectCreateAppIdentity = Schema.Schema.Type<typeof RequestConnectCreateAppIdentity>;\n\nexport const ResponseConnectCreateIdentity = Schema.Struct({\n  success: Schema.Boolean,\n});\n\nexport type ResponseConnectCreateIdentity = Schema.Schema.Type<typeof ResponseConnectCreateIdentity>;\n\nexport const RequestCreateSpaceInboxMessage = Schema.Struct({\n  ciphertext: Schema.String,\n  signature: Schema.optional(SignatureWithRecovery),\n  authorAccountAddress: Schema.optional(Schema.String),\n});\n\nexport type RequestCreateSpaceInboxMessage = Schema.Schema.Type<typeof RequestCreateSpaceInboxMessage>;\n\nexport const RequestCreateAccountInboxMessage = Schema.Struct({\n  ciphertext: Schema.String,\n  signature: Schema.optional(SignatureWithRecovery),\n  authorAccountAddress: Schema.optional(Schema.String),\n});\n\nexport type RequestCreateAccountInboxMessage = Schema.Schema.Type<typeof RequestCreateAccountInboxMessage>;\n\nexport const ResponseListSpaces = Schema.Struct({\n  type: Schema.Literal('list-spaces'),\n  spaces: Schema.Array(\n    Schema.Struct({\n      id: Schema.String,\n      name: Schema.String,\n    }),\n  ),\n});\n\nexport type ResponseListSpaces = Schema.Schema.Type<typeof ResponseListSpaces>;\n\nexport const Invitation = Schema.Struct({\n  id: Schema.String,\n  previousEventHash: Schema.String,\n  spaceId: Schema.String,\n});\n\nexport type Invitation = Schema.Schema.Type<typeof Invitation>;\n\nexport const ResponseListInvitations = Schema.Struct({\n  type: Schema.Literal('list-invitations'),\n  invitations: Schema.Array(Invitation),\n});\n\nexport type ResponseListInvitations = Schema.Schema.Type<typeof ResponseListInvitations>;\n\nexport const ResponseSpaceEvent = Schema.Struct({\n  type: Schema.Literal('space-event'),\n  spaceId: Schema.String,\n  event: SpaceEvent,\n});\n\nexport type ResponseSpaceEvent = Schema.Schema.Type<typeof ResponseSpaceEvent>;\n\nexport const InboxMessage = Schema.Struct({\n  id: Schema.String,\n  ciphertext: Schema.String,\n  signature: Schema.optional(SignatureWithRecovery),\n  authorAccountAddress: Schema.optional(Schema.String),\n  createdAt: Schema.Date,\n});\n\nexport type InboxMessage = Schema.Schema.Type<typeof InboxMessage>;\n\nexport const SpaceInbox = Schema.Struct({\n  inboxId: Schema.String,\n  isPublic: Schema.Boolean,\n  authPolicy: InboxSenderAuthPolicy,\n  encryptionPublicKey: Schema.String,\n  secretKey: Schema.String,\n});\n\nexport type SpaceInbox = Schema.Schema.Type<typeof SpaceInbox>;\n\nexport const AccountInbox = Schema.Struct({\n  accountAddress: Schema.String,\n  inboxId: Schema.String,\n  isPublic: Schema.Boolean,\n  authPolicy: InboxSenderAuthPolicy,\n  encryptionPublicKey: Schema.String,\n  signature: SignatureWithRecovery,\n});\n\nexport type AccountInbox = Schema.Schema.Type<typeof AccountInbox>;\n\nexport const ResponseAccountInbox = Schema.Struct({\n  type: Schema.Literal('account-inbox'),\n  inbox: AccountInbox,\n});\n\nexport type ResponseAccountInbox = Schema.Schema.Type<typeof ResponseAccountInbox>;\n\nexport const ResponseSpace = Schema.Struct({\n  type: Schema.Literal('space'),\n  id: Schema.String,\n  name: Schema.String,\n  events: Schema.Array(SpaceEvent),\n  keyBoxes: Schema.Array(KeyBoxWithKeyId),\n  updates: Schema.optional(Updates),\n  inboxes: Schema.Array(SpaceInbox),\n});\n\nexport type ResponseSpace = Schema.Schema.Type<typeof ResponseSpace>;\n\nexport const ResponseUpdateConfirmed = Schema.Struct({\n  type: Schema.Literal('update-confirmed'),\n  updateId: Schema.String,\n  clock: Schema.Number,\n  spaceId: Schema.String,\n});\n\nexport type ResponseUpdateConfirmed = Schema.Schema.Type<typeof ResponseUpdateConfirmed>;\n\nexport const ResponseUpdatesNotification = Schema.Struct({\n  type: Schema.Literal('updates-notification'),\n  updates: Updates,\n  spaceId: Schema.String,\n});\n\nexport type ResponseUpdatesNotification = Schema.Schema.Type<typeof ResponseUpdatesNotification>;\n\nexport const ResponseSpaceInboxMessage = Schema.Struct({\n  type: Schema.Literal('space-inbox-message'),\n  spaceId: Schema.String,\n  inboxId: Schema.String,\n  message: InboxMessage,\n});\n\nexport type ResponseSpaceInboxMessage = Schema.Schema.Type<typeof ResponseSpaceInboxMessage>;\n\nexport const ResponseSpaceInboxMessages = Schema.Struct({\n  type: Schema.Literal('space-inbox-messages'),\n  spaceId: Schema.String,\n  inboxId: Schema.String,\n  messages: Schema.Array(InboxMessage),\n});\n\nexport type ResponseSpaceInboxMessages = Schema.Schema.Type<typeof ResponseSpaceInboxMessages>;\n\nexport const ResponseAccountInboxMessage = Schema.Struct({\n  type: Schema.Literal('account-inbox-message'),\n  accountAddress: Schema.String,\n  inboxId: Schema.String,\n  message: InboxMessage,\n});\n\nexport type ResponseAccountInboxMessage = Schema.Schema.Type<typeof ResponseAccountInboxMessage>;\n\nexport const ResponseAccountInboxMessages = Schema.Struct({\n  type: Schema.Literal('account-inbox-messages'),\n  accountAddress: Schema.String,\n  inboxId: Schema.String,\n  messages: Schema.Array(InboxMessage),\n});\n\nexport type ResponseAccountInboxMessages = Schema.Schema.Type<typeof ResponseAccountInboxMessages>;\n\nexport const ResponseAccountInboxes = Schema.Struct({\n  type: Schema.Literal('account-inboxes'),\n  inboxes: Schema.Array(AccountInbox),\n});\n\nexport type ResponseAccountInboxes = Schema.Schema.Type<typeof ResponseAccountInboxes>;\n\nexport const ResponseMessage = Schema.Union(\n  ResponseListSpaces,\n  ResponseListInvitations,\n  ResponseSpace,\n  ResponseSpaceEvent,\n  ResponseUpdateConfirmed,\n  ResponseUpdatesNotification,\n  ResponseAccountInbox,\n  ResponseSpaceInboxMessage,\n  ResponseSpaceInboxMessages,\n  ResponseAccountInboxMessage,\n  ResponseAccountInboxMessages,\n  ResponseAccountInboxes,\n);\n\nexport type ResponseMessage = Schema.Schema.Type<typeof ResponseMessage>;\n\nexport const ResponseIdentityEncrypted = Schema.Struct({\n  keyBox: IdentityKeyBox,\n});\n\nexport type ResponseIdentityEncrypted = Schema.Schema.Type<typeof ResponseIdentityEncrypted>;\n\nexport const ResponseIdentity = Schema.Struct({\n  accountAddress: Schema.String,\n  signaturePublicKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n  accountProof: Schema.String,\n  keyProof: Schema.String,\n});\n\nexport type ResponseIdentity = Schema.Schema.Type<typeof ResponseIdentity>;\n\nexport const SpaceInboxPublic = Schema.Struct({\n  inboxId: Schema.String,\n  isPublic: Schema.Boolean,\n  authPolicy: InboxSenderAuthPolicy,\n  encryptionPublicKey: Schema.String,\n  creationEvent: CreateSpaceInboxEvent,\n});\n\nexport type SpaceInboxPublic = Schema.Schema.Type<typeof SpaceInboxPublic>;\n\nexport const ResponseSpaceInboxPublic = Schema.Struct({\n  inbox: SpaceInboxPublic,\n});\n\nexport type ResponseSpaceInboxPublic = Schema.Schema.Type<typeof ResponseSpaceInboxPublic>;\n\nexport const ResponseListSpaceInboxesPublic = Schema.Struct({\n  inboxes: Schema.Array(SpaceInboxPublic),\n});\n\nexport type ResponseListSpaceInboxesPublic = Schema.Schema.Type<typeof ResponseListSpaceInboxesPublic>;\n\nexport const AccountInboxPublic = Schema.Struct({\n  accountAddress: Schema.String,\n  inboxId: Schema.String,\n  isPublic: Schema.Boolean,\n  authPolicy: InboxSenderAuthPolicy,\n  encryptionPublicKey: Schema.String,\n  signature: SignatureWithRecovery,\n});\n\nexport type AccountInboxPublic = Schema.Schema.Type<typeof AccountInboxPublic>;\n\nexport const ResponseAccountInboxPublic = Schema.Struct({\n  inbox: AccountInboxPublic,\n});\n\nexport type ResponseAccountInboxPublic = Schema.Schema.Type<typeof ResponseAccountInboxPublic>;\n\nexport const ResponseListAccountInboxesPublic = Schema.Struct({\n  inboxes: Schema.Array(AccountInboxPublic),\n});\n\nexport type ResponseListAccountInboxesPublic = Schema.Schema.Type<typeof ResponseListAccountInboxesPublic>;\n\nexport const ResponseIdentityNotFoundError = Schema.Struct({\n  accountAddress: Schema.String,\n});\n\nexport type ResponseIdentityNotFoundError = Schema.Schema.Type<typeof ResponseIdentityNotFoundError>;\n\nexport const ResponseIdentityExistsError = Schema.Struct({\n  accountAddress: Schema.String,\n});\n\nexport type ResponseIdentityExistsError = Schema.Schema.Type<typeof ResponseIdentityExistsError>;\n", "import { Schema } from 'effect';\n\nexport type Storage = {\n  getItem: (key: string) => string | null;\n  setItem: (key: string, value: string) => void;\n  removeItem: (key: string) => void;\n};\n\nexport type SignMessage = (message: string) => Promise<string> | string;\nexport type GetAddress = () => Promise<string> | string;\nexport type Signer = {\n  getAddress: GetAddress;\n  signMessage: SignMessage;\n};\n\nexport type IdentityKeys = {\n  encryptionPublicKey: string;\n  encryptionPrivateKey: string;\n  signaturePublicKey: string;\n  signaturePrivateKey: string;\n};\n\nexport const KeysSchema = Schema.Struct({\n  encryptionPublicKey: Schema.String,\n  encryptionPrivateKey: Schema.String,\n  signaturePublicKey: Schema.String,\n  signaturePrivateKey: Schema.String,\n});\n\nexport type KeysSchema = Schema.Schema.Type<typeof KeysSchema>;\n\nexport const AppIdentityResponse = Schema.Struct({\n  accountAddress: Schema.String,\n  signaturePublicKey: Schema.String,\n  encryptionPublicKey: Schema.String,\n  accountProof: Schema.String,\n  keyProof: Schema.String,\n  ciphertext: Schema.String,\n  nonce: Schema.String,\n  sessionToken: Schema.String,\n  address: Schema.String,\n  appId: Schema.String,\n  sessionTokenExpires: Schema.String,\n});\n\nexport type AppIdentityResponse = Schema.Schema.Type<typeof AppIdentityResponse>;\n\nexport type Identity = IdentityKeys & {\n  accountAddress: string;\n};\n\nexport type PublicAppIdentity = {\n  address: string;\n  encryptionPublicKey: string;\n  signaturePublicKey: string;\n};\n\nexport type PrivateAppIdentity = IdentityKeys & {\n  address: string;\n  addressPrivateKey: string;\n  permissionId: string;\n  sessionToken: string;\n  sessionTokenExpires: Date;\n  accountAddress: string;\n};\n\nexport class InvalidIdentityError {\n  readonly _tag = 'InvalidIdentityError';\n}\n", "import { Schema } from 'effect';\nimport { deserialize, serialize } from '../messages/index.js';\nimport { type IdentityKeys, KeysSchema, type Storage } from './types.js';\n\nexport const getEnv = (): 'dev' | 'production' | 'local' => {\n  return 'dev';\n};\n\nexport const buildAccountAddressStorageKey = () => `hypergraph:${getEnv()}:id`;\n\nexport const buildKeysStorageKey = (walletAddress: string) =>\n  walletAddress ? `hypergraph:${getEnv()}:keys:${walletAddress}` : '';\n\nexport const buildSessionTokenStorageKey = (walletAddress: string) =>\n  walletAddress ? `hypergraph:${getEnv()}:session-token:${walletAddress}` : '';\n\nexport const loadKeys = (storage: Storage, walletAddress: string): IdentityKeys | null => {\n  const accessKey = buildKeysStorageKey(walletAddress);\n  const val = storage.getItem(accessKey);\n  if (!val) {\n    return null;\n  }\n  const deserialized = Schema.decodeUnknownSync(KeysSchema)(deserialize(val));\n  return {\n    encryptionPublicKey: deserialized.encryptionPublicKey,\n    encryptionPrivateKey: deserialized.encryptionPrivateKey,\n    signaturePublicKey: deserialized.signaturePublicKey,\n    signaturePrivateKey: deserialized.signaturePrivateKey,\n  };\n};\n\nexport const storeKeys = (storage: Storage, walletAddress: string, keys: IdentityKeys) => {\n  const keysMsg = serialize(Schema.encodeSync(KeysSchema)(keys));\n  storage.setItem(buildKeysStorageKey(walletAddress), keysMsg);\n};\n\nexport const wipeKeys = (storage: Storage, walletAddress: string) => {\n  // This will clear the conversation cache + the private keys\n  storage.removeItem(buildKeysStorageKey(walletAddress));\n};\n\nexport const loadSyncServerSessionToken = (storage: Storage, address: string): string | null => {\n  const key = buildSessionTokenStorageKey(address);\n  const token = storage.getItem(key);\n  return token;\n};\n\nexport const storeSyncServerSessionToken = (storage: Storage, address: string, sessionToken: string) => {\n  const key = buildSessionTokenStorageKey(address);\n  storage.setItem(key, sessionToken);\n};\n\nexport const wipeSyncServerSessionToken = (storage: Storage, walletAddress: string) => {\n  storage.removeItem(buildSessionTokenStorageKey(walletAddress));\n};\n\nexport const loadAccountAddress = (storage: Storage): string | null => {\n  return storage.getItem(buildAccountAddressStorageKey());\n};\n\nexport const storeAccountAddress = (storage: Storage, accountId: string) => {\n  storage.setItem(buildAccountAddressStorageKey(), accountId);\n};\n\nexport const wipeAccountAddress = (storage: Storage) => {\n  storage.removeItem(buildAccountAddressStorageKey());\n};\n\nexport const wipeAllAuthData = (addressStorage: Storage, keysAndTokenStorage: Storage) => {\n  const accountAddress = loadAccountAddress(addressStorage);\n  wipeAccountAddress(addressStorage);\n  if (accountAddress) {\n    wipeKeys(keysAndTokenStorage, accountAddress);\n    wipeSyncServerSessionToken(keysAndTokenStorage, accountAddress);\n  }\n};\n", "export * from './create-key.js';\nexport * from './decrypt-key.js';\nexport * from './encrypt-key.js';\nexport * from './key-box.js';\n", "export const crypto_sign_SECRETKEYBYTES = 64;\nexport const crypto_sign_PUBLICKEYBYTES = 32;\n\nexport const crypto_box_NONCEBYTES = 24;\nexport const crypto_box_PUBLICKEYBYTES = 32;\nexport const crypto_box_SECRETKEYBYTES = 32;\n\nexport const crypto_box_SEALBYTES = 48;\n", "/**\n * [Salsa20](https://cr.yp.to/snuffle.html) stream cipher, released in 2005.\n *\n * Salsa's goal was to implement AES replacement that does not rely on S-Boxes,\n * which are hard to implement in a constant-time manner.\n * Salsa20 is usually faster than AES, a big deal on slow, budget mobile phones.\n *\n * [XSalsa20](https://cr.yp.to/snuffle/xsalsa-20110204.pdf), extended-nonce\n * variant was released in 2008. It switched nonces from 96-bit to 192-bit,\n * and became safe to be picked at random.\n *\n * Check out [PDF](https://cr.yp.to/snuffle/salsafamily-20071225.pdf) and\n * [wiki](https://en.wikipedia.org/wiki/Salsa20).\n * @module\n */\nimport { createCipher, rotl } from './_arx.ts';\nimport { poly1305 } from './_poly1305.ts';\nimport {\n  abytes,\n  type ARXCipher,\n  type CipherWithOutput,\n  clean,\n  equalBytes,\n  getOutput,\n  wrapCipher,\n  type XorStream,\n} from './utils.ts';\n\n/** Salsa20 core function. */\n// prettier-ignore\nfunction salsaCore(\n  s: Uint32Array, k: Uint32Array, n: Uint32Array, out: Uint32Array, cnt: number, rounds = 20\n): void {\n  // Based on https://cr.yp.to/salsa20.html\n  let y00 = s[0], y01 = k[0], y02 = k[1], y03 = k[2], // \"expa\" Key     Key     Key\n      y04 = k[3], y05 = s[1], y06 = n[0], y07 = n[1], // Key    \"nd 3\"  Nonce   Nonce\n      y08 = cnt,  y09 = 0,    y10 = s[2], y11 = k[4], // Pos.   Pos.    \"2-by\"\tKey\n      y12 = k[5], y13 = k[6], y14 = k[7], y15 = s[3]; // Key    Key     Key     \"te k\"\n  // Save state to temporary variables\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  for (let r = 0; r < rounds; r += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0, 9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0, 9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0, 9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0, 9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0, 9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0, 9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0, 9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0, 9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output\n  let oi = 0;\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\n/**\n * hsalsa hashing function, used primarily in xsalsa, to hash\n * key and nonce into key' and nonce'.\n * Same as salsaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hsalsa(\n  s: Uint32Array, k: Uint32Array, i: Uint32Array, o32: Uint32Array\n): void {\n  let x00 = s[0], x01 = k[0], x02 = k[1], x03 = k[2],\n      x04 = k[3], x05 = s[1], x06 = i[0], x07 = i[1],\n      x08 = i[2], x09 = i[3], x10 = s[2], x11 = k[4],\n      x12 = k[5], x13 = k[6], x14 = k[7], x15 = s[3];\n  for (let r = 0; r < 20; r += 2) {\n    x04 ^= rotl(x00 + x12 | 0, 7); x08 ^= rotl(x04 + x00 | 0, 9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0, 7); x13 ^= rotl(x09 + x05 | 0, 9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0, 7); x02 ^= rotl(x14 + x10 | 0, 9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0, 7); x07 ^= rotl(x03 + x15 | 0, 9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0, 7); x02 ^= rotl(x01 + x00 | 0, 9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0, 7); x07 ^= rotl(x06 + x05 | 0, 9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0, 7); x08 ^= rotl(x11 + x10 | 0, 9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0, 7); x13 ^= rotl(x12 + x15 | 0, 9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  let oi = 0;\n  o32[oi++] = x00; o32[oi++] = x05;\n  o32[oi++] = x10; o32[oi++] = x15;\n  o32[oi++] = x06; o32[oi++] = x07;\n  o32[oi++] = x08; o32[oi++] = x09;\n}\n\n/**\n * Salsa20 from original paper.\n * Unsafe to use random nonces under the same key, due to collision chance.\n * Prefer XSalsa instead.\n */\nexport const salsa20: XorStream = /* @__PURE__ */ createCipher(salsaCore, {\n  allowShortKeys: true,\n  counterRight: true,\n});\n\n/**\n * xsalsa20 eXtended-nonce salsa.\n * Can be safely used with random 24-byte nonces (CSPRNG).\n */\nexport const xsalsa20: XorStream = /* @__PURE__ */ createCipher(salsaCore, {\n  counterRight: true,\n  extendNonceFn: hsalsa,\n});\n\n/**\n * xsalsa20-poly1305 eXtended-nonce salsa.\n * Can be safely used with random 24-byte nonces (CSPRNG).\n * Also known as secretbox from libsodium / nacl.\n */\nexport const xsalsa20poly1305: ARXCipher = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 24, tagLength: 16 },\n  (key: Uint8Array, nonce: Uint8Array): CipherWithOutput => {\n    return {\n      encrypt(plaintext: Uint8Array, output?: Uint8Array) {\n        // xsalsa20poly1305 optimizes by calculating auth key during the same call as encryption.\n        // Unfortunately, makes it hard to separate tag calculation & encryption itself,\n        // because 32 bytes is half-block of 64-byte salsa.\n        output = getOutput(plaintext.length + 32, output, false); // need 32 additional bytes, see above\n        const authKey = output.subarray(0, 32); // output[0..32] = poly1305 auth key\n        const ciphPlaintext = output.subarray(32); // output[32..] = plaintext, then ciphertext\n        output.set(plaintext, 32);\n        clean(authKey); // authKey is produced by xoring with zeros\n        xsalsa20(key, nonce, output, output); // output = stream ^ output; authKey = stream ^ zeros(32)\n        const tag = poly1305(ciphPlaintext, authKey); // calculate tag over ciphertext\n        output.set(tag, 16); // output[16..32] = tag\n        clean(output.subarray(0, 16), tag); // clean-up authKey remnants & copy of tag\n        return output.subarray(16); // return output[16..]\n      },\n      decrypt(ciphertext: Uint8Array, output?: Uint8Array) {\n        // tmp part     passed tag    ciphertext\n        // [0..32]      [32..48]      [48..]\n        abytes(ciphertext);\n        output = getOutput(ciphertext.length + 32, output, false);\n        const tmp = output.subarray(0, 32); // output[0..32] is used to calc authKey\n        const passedTag = output.subarray(32, 48); // output[32..48] = passed tag\n        const ciphPlaintext = output.subarray(48); // output[48..] = ciphertext, then plaintext\n        output.set(ciphertext, 32); // copy ciphertext into output\n        clean(tmp); // authKey is produced by xoring with zeros\n        const authKey = xsalsa20(key, nonce, tmp, tmp); // authKey = stream ^ zeros(32)\n        const tag = poly1305(ciphPlaintext, authKey); // calculate tag over ciphertext\n        if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\n        xsalsa20(key, nonce, output.subarray(16), output.subarray(16)); // output = stream ^ output[16..]\n        clean(tmp, passedTag, tag);\n        return ciphPlaintext; // return output[48..], skipping zeroized output[0..48]\n      },\n    };\n  }\n);\n\n/**\n * Alias to `xsalsa20poly1305`, for compatibility with libsodium / nacl\n */\nexport function secretbox(\n  key: Uint8Array,\n  nonce: Uint8Array\n): {\n  seal: (plaintext: Uint8Array, output?: Uint8Array) => Uint8Array;\n  open: (ciphertext: Uint8Array, output?: Uint8Array) => Uint8Array;\n} {\n  const xs = xsalsa20poly1305(key, nonce);\n  return { seal: xs.encrypt, open: xs.decrypt };\n}\n", "/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bytesToHex,\n  bytesToNumberLE,\n  concatBytes,\n  ensureBytes,\n  memoized,\n  numberToBytesLE,\n  randomBytes,\n  type FHash,\n  type Hex,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n} from './curve.ts';\nimport { Field, type IField, type NLength } from './modular.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\nexport type UVRatio = (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n\n/** Edwards curves must declare params a & d. */\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes?: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: UVRatio; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\nexport type CurveTypeWithLength = Readonly<CurveType & Partial<NLength>>;\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  is0(): boolean;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toBytes(): Uint8Array;\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array;\n  toHex(): string;\n  precompute(windowSize?: number, isLazy?: boolean): ExtPointType;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromBytes(bytes: Uint8Array, zip215?: boolean): ExtPointType;\n  fromHex(hex: Hex, zip215?: boolean): ExtPointType;\n  msm(points: ExtPointType[], scalars: bigint[]): ExtPointType;\n}\n\n/**\n * Twisted Edwards curve options.\n *\n * * a: formula param\n * * d: formula param\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor. h*n is group order; n is subgroup order\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type EdwardsOpts = Readonly<{\n  a: bigint;\n  d: bigint;\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  Gx: bigint;\n  Gy: bigint;\n}>;\n\n/**\n * Extra curve options for Twisted Edwards.\n *\n * * Fp: redefined Field over curve.p\n * * Fn: redefined Field over curve.n\n * * uvRatio: helper function for decompression, calculating √(u/v)\n */\nexport type EdwardsExtraOpts = Partial<{\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  uvRatio: (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) options.\n *\n * * hash: hash function used to hash private keys and messages\n * * adjustScalarBytes: clears bits to get valid field element\n * * domain: Used for hashing\n * * mapToCurve: for hash-to-curve standard\n * * prehash: RFC 8032 pre-hashing of messages to sign() / verify()\n * * randomBytes: function generating random bytes, used for randomPrivateKey\n */\nexport type EdDSAOpts = {\n  hash: FHash;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>;\n  prehash?: FHash;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) interface.\n *\n * Allows to create and verify signatures, create public and private keys.\n */\nexport interface EdDSA {\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n}\n\n// Legacy params. TODO: remove\nexport type CurveFn = {\n  CURVE: CurveType;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: ExtPointConstructor;\n  /** @deprecated use `Point` */\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n};\n\nfunction isEdValidXY(Fp: IField<bigint>, CURVE: EdwardsOpts, x: bigint, y: bigint): boolean {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\n\nexport function edwards(CURVE: EdwardsOpts, curveOpts: EdwardsExtraOpts = {}): ExtPointConstructor {\n  const { Fp, Fn } = _createCurveFields('edwards', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(curveOpts, {}, { uvRatio: 'function' });\n\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n  const modP = (n: bigint) => Fp.create(n); // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    curveOpts.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n    throw new Error('bad curve params: generator point');\n\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title: string, n: bigint, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    aInRange('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n\n  function aextpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly ex: bigint;\n    readonly ey: bigint;\n    readonly ez: bigint;\n    readonly et: bigint;\n\n    constructor(ex: bigint, ey: bigint, ez: bigint, et: bigint) {\n      this.ex = acoord('x', ex);\n      this.ey = acoord('y', ey);\n      this.ez = acoord('z', ez, true);\n      this.et = acoord('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, 'ez', points);\n    }\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    precompute(windowSize: number = 8, isLazy = true) {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      aextpoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      aextpoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = wnaf.wNAFCached(this, n, Point.normalizeZ);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      const n = scalar;\n      aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return Point.ZERO;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    clearCofactor(): Point {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    static fromBytes(bytes: Uint8Array, zip215 = false): Point {\n      abytes(bytes);\n      return this.fromHex(bytes, zip215);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateScalar(scalar: bigint): Point {\n      return Point.BASE.multiply(scalar);\n    }\n    toBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(): Uint8Array {\n      return this.toBytes();\n    }\n    toHex(): string {\n      return bytesToHex(this.toBytes());\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const wnaf = wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n  return Point;\n}\n\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point: ExtPointConstructor, eddsaOpts: EdDSAOpts): EdDSA {\n  _validateObject(\n    eddsaOpts,\n    {\n      hash: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function',\n    }\n  );\n\n  const { prehash, hash: cHash } = eddsaOpts;\n  const { BASE: G, Fp, Fn } = Point;\n  const CURVE_ORDER = Fn.ORDER;\n\n  const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    eddsaOpts.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n\n  function modN(a: bigint) {\n    return Fn.create(a);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n    return modN(bytesToNumberLE(hash));\n  }\n\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key: Hex) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return { head, prefix, scalar };\n  }\n\n  // Convenience method that creates public key from scalar. RFC8032 5.1.5\n  function getExtendedPublicKey(key: Hex) {\n    const { head, prefix, scalar } = getPrivateScalar(key);\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = Uint8Array.of(), ...msgs: Uint8Array[]) {\n    const msg = concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const L = Fp.BYTES;\n    const res = concatBytes(R, numberToBytesLE(s, L));\n    return ensureBytes('result', res, L * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n\n  G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomPrivateKey: (): Uint8Array => randomBytes_!(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point: ExtPointType = Point.BASE): ExtPointType {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return { getPublicKey, sign, verify, utils, Point };\n}\n\nexport type EdComposed = {\n  CURVE: EdwardsOpts;\n  curveOpts: EdwardsExtraOpts;\n  eddsaOpts: EdDSAOpts;\n};\nfunction _eddsa_legacy_opts_to_new(c: CurveTypeWithLength): EdComposed {\n  const CURVE: EdwardsOpts = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength, true);\n  const curveOpts: EdwardsExtraOpts = { Fp, Fn, uvRatio: c.uvRatio };\n  const eddsaOpts: EdDSAOpts = {\n    hash: c.hash,\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve,\n  };\n  return { CURVE, curveOpts, eddsaOpts };\n}\nfunction _eddsa_new_output_to_legacy(c: CurveTypeWithLength, eddsa: EdDSA): CurveFn {\n  const legacy = Object.assign({}, eddsa, { ExtendedPoint: eddsa.Point, CURVE: c });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c: CurveTypeWithLength): CurveFn {\n  const { CURVE, curveOpts, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n", "/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  aInRange,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesLE,\n  randomBytes,\n} from '../utils.ts';\nimport { mod } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  type: 'x25519' | 'x448';\n  adjustScalarBytes: (bytes: Uint8Array) => Uint8Array;\n  powPminus2: (x: bigint) => bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  _validateObject(curve, {\n    adjustScalarBytes: 'function',\n    powPminus2: 'function',\n  });\n  return Object.freeze({ ...curve } as const);\n}\n\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;\n  const is25519 = type === 'x25519';\n  if (!is25519 && type !== 'x448') throw new Error('invalid type');\n  const randomBytes_ = rand || randomBytes;\n\n  const montgomeryBits = is25519 ? 255 : 448;\n  const fieldLen = is25519 ? 32 : 56;\n  const Gu = is25519 ? BigInt(9) : BigInt(5);\n  // RFC 7748 #5:\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n  // (156326 - 2) / 4 = 39081 for curve448/X448\n  // const a = is25519 ? 156326n : 486662n;\n  const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n  // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n  // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n  // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n  const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n  const maxAdded = is25519\n    ? BigInt(8) * _2n ** BigInt(251) - _1n\n    : BigInt(4) * _2n ** BigInt(445) - _1n;\n  const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n  const modP = (n: bigint) => mod(n, P);\n  const GuBytes = encodeU(Gu);\n  function encodeU(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), fieldLen);\n  }\n  function decodeU(u: Hex): bigint {\n    const _u = ensureBytes('u coordinate', u, fieldLen);\n    // RFC: When receiving such an array, implementations of X25519\n    // (but not X448) MUST mask the most significant bit in the final byte.\n    if (is25519) _u[31] &= 127; // 0b0111_1111\n    // RFC: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.  The non-canonical\n    // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n    // - 1 through 2^448 - 1 for X448.\n    return modP(bytesToNumberLE(_u));\n  }\n  function decodeScalar(scalar: Hex): bigint {\n    return bytesToNumberLE(adjustScalarBytes(ensureBytes('scalar', scalar, fieldLen)));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n    // Some public keys are useless, of low-order. Curve author doesn't think\n    // it needs to be validated, but we do it nonetheless.\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeU(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  // cswap from RFC7748 \"example code\"\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): { x_2: bigint; x_3: bigint } {\n    // dummy = mask(swap) AND (x_2 XOR x_3)\n    // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n    // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n    x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n    return { x_2, x_3 };\n  }\n\n  /**\n   * Montgomery x-only multiplication ladder.\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u: bigint, scalar: bigint): bigint {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, minScalar, maxScalar);\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n      ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n    ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n    const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n    return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => randomBytes_(fieldLen) },\n    GuBytes: GuBytes.slice(),\n  };\n}\n", "/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha2.js';\nimport { abytes, concatBytes, utf8ToBytes } from '@noble/hashes/utils.js';\nimport { type AffinePoint, type Group, pippenger } from './abstract/curve.ts';\nimport {\n  type CurveFn,\n  type EdwardsOpts,\n  type ExtPointType,\n  twistedEdwards,\n} from './abstract/edwards.ts';\nimport {\n  createHasher,\n  expand_message_xmd,\n  type H2CHasher,\n  type H2CMethod,\n  type htfBasicOpts,\n} from './abstract/hash-to-curve.ts';\nimport { Field, FpInvertBatch, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.ts';\nimport { montgomery, type CurveFn as XCurveFn } from './abstract/montgomery.ts';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  type Hex,\n  numberToBytesLE,\n} from './utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\n// 2n**255n - 19n\n// Removing Fp.create() will still work, and is 10% faster on sign\n//     a: Fp.create(BigInt(-1)),\n// d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))\n// Finite field 2n**255n - 19n\n// Subgroup order 2n**252n + 27742317777372353535851937790883648493n;\nconst ed25519_CURVE: EdwardsOpts = {\n  p: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed'),\n  n: BigInt('0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed'),\n  h: _8n,\n  a: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec'),\n  d: BigInt('0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3'),\n  Gx: BigInt('0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a'),\n  Gy: BigInt('0x6666666666666666666666666666666666666666666666666666666666666658'),\n};\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ed25519_CURVE.p;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\n// Fp.sqrt(Fp.neg(1))\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ed25519_CURVE.p;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n/** Weird / bogus points, useful for debugging. */\nexport const ED25519_TORSION_SUBGROUP: string[] = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ed25519_CURVE.p, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n  ...ed25519_CURVE,\n  Fp,\n  hash: sha512,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n}))();\n\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519: XCurveFn = /* @__PURE__ */ (() => {\n  const P = ed25519_CURVE.p;\n  return montgomery({\n    P,\n    type: 'x25519',\n    powPminus2: (x: bigint): bigint => {\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n  });\n})();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const bpub = ensureBytes('pub', edwardsPub);\n  const { y } = ed25519.Point.fromHex(bpub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery: typeof edwardsToMontgomeryPub = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  const [xd_inv, yd_inv] = FpInvertBatch(Fp, [xd, yd], true); // batch division\n  return { x: Fp.mul(xn, xd_inv), y: Fp.mul(yn, yd_inv) }; //  13. return (xn, xd, yn, yd)\n}\n\nexport const ed25519_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.Point,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => ed25519_hasher.hashToCurve)();\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  ed25519_hasher.encodeToCurve)();\n\nfunction aristp(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n/**\n * Computes Elligator map for Ristretto255.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n * the [website](https://ristretto.group/formulas/elligator.html).\n */\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  private readonly ep: ExtendedPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(ep: ExtendedPoint) {\n    this.ep = ep;\n  }\n\n  static fromAffine(ap: AffinePoint<bigint>): RistPoint {\n    return new RistPoint(ed25519.Point.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n   * the [website](https://ristretto.group/formulas/elligator.html).\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  static fromBytes(bytes: Uint8Array): RistPoint {\n    abytes(bytes);\n    return this.fromHex(bytes);\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = Fp.ORDER;\n    const mod = Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.Point(x, y, _1n, t));\n  }\n\n  static msm(points: RistPoint[], scalars: bigint[]): RistPoint {\n    const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n    return pippenger(RistPoint, Fn, points, scalars);\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).\n   */\n  toBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = Fp.ORDER;\n    const mod = Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array {\n    return this.toBytes();\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  /**\n   * Compares two Ristretto points.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).\n   */\n  equals(other: RistPoint): boolean {\n    aristp(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    aristp(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    aristp(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\n\n/**\n * Wrapper over Edwards Point for ristretto255 from\n * [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nexport const RistrettoPoint: typeof RistPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.Point.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.Point.ZERO);\n  return RistPoint;\n})();\n\n/**\n * hash-to-curve for ristretto255.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B).\n */\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts): RistPoint => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\n/** @deprecated */\nexport const hash_to_ristretto255: (msg: Uint8Array, options: htfBasicOpts) => RistPoint =\n  hashToRistretto255; // legacy\n", "import { hsalsa, secretbox } from \"@noble/ciphers/salsa\";\nimport { x25519 } from \"@noble/curves/ed25519\";\nimport { u32, u8 } from \"@noble/hashes/utils\";\n\ntype CryptoBoxEasyParams = {\n  message: Uint8Array;\n  nonce: Uint8Array;\n  publicKey: Uint8Array;\n  privateKey: Uint8Array;\n};\n\nexport function cryptoBoxEasy({\n  message,\n  nonce,\n  publicKey,\n  privateKey,\n}: CryptoBoxEasyParams): Uint8Array {\n  const sharedSecret = x25519.getSharedSecret(privateKey, publicKey);\n  // const _utf8ToBytes = (str: string) =>\n  //   Uint8Array.from(str.split(\"\").map((c) => c.charCodeAt(0)));\n  // const sigma = u32(_utf8ToBytes(\"expand 32-byte k\"));\n  const sigma = new Uint32Array([\n    1634760805, 857760878, 2036477234, 1797285236,\n  ]);\n  const output = new Uint32Array(8);\n  const zeros = new Uint32Array(4).fill(0);\n  hsalsa(sigma, u32(sharedSecret), zeros, output);\n  const key = u8(output);\n  const box = secretbox(key, nonce);\n  return box.seal(message);\n}\n", "import { x25519 } from \"@noble/curves/ed25519\";\nimport { randomBytes } from \"@noble/hashes/utils\";\nimport { crypto_box_SECRETKEYBYTES } from \"./constants.js\";\nimport type { KeyPair } from \"./types.js\";\n\nexport function cryptoBoxKeyPair(): KeyPair {\n  const privateKey = randomBytes(crypto_box_SECRETKEYBYTES);\n  const publicKey = x25519.getPublicKey(privateKey);\n  return { keyType: \"x25519\", publicKey, privateKey };\n}\n", "import { hsalsa, secretbox } from \"@noble/ciphers/salsa\";\nimport { x25519 } from \"@noble/curves/ed25519\";\nimport { u32, u8 } from \"@noble/hashes/utils\";\n\ntype CryptoBoxOpenEasyParams = {\n  ciphertext: Uint8Array;\n  nonce: Uint8Array;\n  publicKey: Uint8Array;\n  privateKey: Uint8Array;\n};\n\nexport function cryptoBoxOpenEasy({\n  ciphertext,\n  nonce,\n  publicKey,\n  privateKey,\n}: CryptoBoxOpenEasyParams): Uint8Array {\n  const sharedSecret = x25519.getSharedSecret(privateKey, publicKey);\n  // const _utf8ToBytes = (str: string) =>\n  //   Uint8Array.from(str.split(\"\").map((c) => c.charCodeAt(0)));\n  // const sigma = u32(_utf8ToBytes(\"expand 32-byte k\"));\n  const sigma = new Uint32Array([\n    1634760805, 857760878, 2036477234, 1797285236,\n  ]);\n  const output = new Uint32Array(8);\n  const zeros = new Uint32Array(4).fill(0);\n  hsalsa(sigma, u32(sharedSecret), zeros, output);\n  const key = u8(output);\n  const box = secretbox(key, nonce);\n  return box.open(ciphertext);\n}\n", "/**\n * Blake2b hash function. Focuses on 64-bit platforms, but in JS speed different from Blake2s is negligible.\n * @module\n * @deprecated\n */\nimport { BLAKE2b as B2B, blake2b as b2b } from './blake2.ts';\n/** @deprecated Use import from `noble/hashes/blake2` module */\nexport const BLAKE2b: typeof B2B = B2B;\n/** @deprecated Use import from `noble/hashes/blake2` module */\nexport const blake2b: typeof b2b = b2b;\n", "import { blake2b } from \"@noble/hashes/blake2b\";\nimport {\n  crypto_box_NONCEBYTES,\n  crypto_box_PUBLICKEYBYTES,\n} from \"./constants.js\";\nimport { cryptoBoxOpenEasy } from \"./crypto-box-open-easy.js\";\n\ntype CryptoBoxSealOpenParams = {\n  ciphertext: Uint8Array;\n  privateKey: Uint8Array;\n  publicKey: Uint8Array;\n};\n\nexport function cryptoBoxSealOpen({\n  ciphertext,\n  privateKey,\n  publicKey,\n}: CryptoBoxSealOpenParams): Uint8Array {\n  const ephemeralPublicKey = ciphertext.slice(0, crypto_box_PUBLICKEYBYTES);\n  const nonce = blake2b(new Uint8Array([...ephemeralPublicKey, ...publicKey]), {\n    dkLen: crypto_box_NONCEBYTES,\n  });\n\n  const encryptedMessage = ciphertext.slice(crypto_box_PUBLICKEYBYTES);\n\n  return cryptoBoxOpenEasy({\n    ciphertext: encryptedMessage,\n    nonce,\n    publicKey: ephemeralPublicKey,\n    privateKey,\n  });\n}\n", "import { blake2b } from \"@noble/hashes/blake2b\";\nimport { crypto_box_NONCEBYTES } from \"./constants.js\";\nimport { cryptoBoxEasy } from \"./crypto-box-easy.js\";\nimport { cryptoBoxKeyPair } from \"./crypto-box-key-pair.js\";\n\ntype CryptoBoxSealParams = {\n  message: Uint8Array;\n  publicKey: Uint8Array;\n};\n\nexport function cryptoBoxSeal({\n  message,\n  publicKey,\n}: CryptoBoxSealParams): Uint8Array {\n  const ephemeralKeyPair = cryptoBoxKeyPair();\n  const nonce = blake2b(\n    new Uint8Array([...ephemeralKeyPair.publicKey, ...publicKey]),\n    { dkLen: crypto_box_NONCEBYTES },\n  );\n\n  const ciphertext = cryptoBoxEasy({\n    message,\n    nonce,\n    publicKey,\n    privateKey: ephemeralKeyPair.privateKey,\n  });\n\n  return new Uint8Array([...ephemeralKeyPair.publicKey, ...ciphertext]);\n}\n", "import { cryptoBoxEasy, cryptoBoxKeyPair, cryptoBoxOpenEasy } from '@serenity-kit/noble-sodium';\n\nexport function generateKeypair(): {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n} {\n  const { publicKey, privateKey } = cryptoBoxKeyPair();\n  return { publicKey, secretKey: privateKey };\n}\n\nexport type EncryptKeyBoxParams = {\n  message: Uint8Array;\n  nonce: Uint8Array;\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n};\n\nexport type DecryptKeyBoxParams = {\n  ciphertext: Uint8Array;\n  nonce: Uint8Array;\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n};\n\nexport function encryptKeyBox({ message, publicKey, secretKey, nonce }: EncryptKeyBoxParams): Uint8Array {\n  return cryptoBoxEasy({ message, publicKey, privateKey: secretKey, nonce });\n}\n\nexport function decryptKeyBox({ ciphertext, nonce, publicKey, secretKey }: DecryptKeyBoxParams): Uint8Array {\n  return cryptoBoxOpenEasy({ ciphertext, publicKey, privateKey: secretKey, nonce });\n}\n", "import { randomBytes } from '@noble/ciphers/webcrypto';\nimport { encryptKeyBox } from './key-box.js';\n\ntype Params = {\n  privateKey: Uint8Array;\n  publicKey: Uint8Array;\n  key: Uint8Array;\n};\n\nexport function encryptKey({ privateKey, publicKey, key }: Params): {\n  keyBoxCiphertext: Uint8Array;\n  keyBoxNonce: Uint8Array;\n} {\n  const nonce = randomBytes(24);\n\n  const ciphertext = encryptKeyBox({\n    message: key,\n    nonce,\n    publicKey,\n    secretKey: privateKey,\n  });\n\n  return {\n    keyBoxCiphertext: ciphertext,\n    keyBoxNonce: nonce,\n  };\n}\n", "import { randomBytes } from '@noble/ciphers/webcrypto';\nimport { encryptKey } from './encrypt-key.js';\n\ntype Params = {\n  privateKey: Uint8Array;\n  publicKey: Uint8Array;\n};\n\nexport function createKey({ privateKey, publicKey }: Params): {\n  key: Uint8Array;\n  keyBoxCiphertext: Uint8Array;\n  keyBoxNonce: Uint8Array;\n} {\n  const key = randomBytes(32);\n\n  const { keyBoxCiphertext, keyBoxNonce } = encryptKey({\n    key,\n    publicKey,\n    privateKey,\n  });\n\n  return {\n    key,\n    keyBoxCiphertext,\n    keyBoxNonce,\n  };\n}\n", "import { decryptKeyBox } from './key-box.js';\n\ntype Params = {\n  privateKey: Uint8Array;\n  publicKey: Uint8Array;\n  keyBoxCiphertext: Uint8Array;\n  keyBoxNonce: Uint8Array;\n};\n\nexport function decryptKey({ privateKey, publicKey, keyBoxNonce, keyBoxCiphertext }: Params): Uint8Array {\n  const key = decryptKeyBox({\n    nonce: keyBoxNonce,\n    ciphertext: keyBoxCiphertext,\n    publicKey,\n    secretKey: privateKey,\n  });\n\n  return key;\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1';\n\nimport { generateKeypair } from '../key/index.js';\nimport { bytesToHex } from '../utils/index.js';\nimport type { IdentityKeys } from './types.js';\n\nexport const createIdentityKeys = (): IdentityKeys => {\n  // generate a random private key for encryption\n  const { publicKey: encryptionPublicKey, secretKey: encryptionPrivateKey } = generateKeypair();\n  // generate a random private key for signing\n  const signaturePrivateKey = secp256k1.utils.randomPrivateKey();\n  const signaturePublicKey = secp256k1.getPublicKey(signaturePrivateKey);\n\n  return {\n    encryptionPublicKey: bytesToHex(encryptionPublicKey),\n    encryptionPrivateKey: bytesToHex(encryptionPrivateKey),\n    signaturePublicKey: bytesToHex(signaturePublicKey),\n    signaturePrivateKey: bytesToHex(signaturePrivateKey),\n  };\n};\n", "import type { Hex } from 'viem';\nimport { generatePrivateKey, privateKeyToAccount } from 'viem/accounts';\nimport { createIdentityKeys } from './create-identity-keys.js';\nimport type { IdentityKeys } from './types.js';\n\nexport const createAppIdentity = (): IdentityKeys & { address: string; addressPrivateKey: Hex } => {\n  const keys = createIdentityKeys();\n  const addressPrivateKey = generatePrivateKey();\n  const { address } = privateKeyToAccount(addressPrivateKey);\n\n  return {\n    ...keys,\n    address,\n    addressPrivateKey,\n  };\n};\n", "import { bytesToHex, randomBytes } from '@noble/hashes/utils';\nimport { generateKeypair } from '../key/key-box.js';\nimport type { ConnectAuthPayload } from '../types.js';\n\ntype CreateAuthUrlParams = {\n  connectUrl: string;\n  redirectUrl: string;\n  appId: string;\n  expiryMilliseconds?: number;\n};\n\nexport const createAuthUrl = (params: CreateAuthUrlParams) => {\n  const {\n    redirectUrl,\n    connectUrl,\n    expiryMilliseconds = 240000, // 4 minutes\n    appId,\n  } = params;\n  const { publicKey, secretKey } = generateKeypair();\n\n  const expiry = Date.now() + expiryMilliseconds;\n  const payload: ConnectAuthPayload = {\n    expiry,\n    encryptionPublicKey: bytesToHex(publicKey),\n    appId,\n  };\n  const data = encodeURIComponent(JSON.stringify(payload));\n  const nonce = bytesToHex(randomBytes(32));\n\n  const url = new URL(connectUrl);\n  url.searchParams.set('data', data);\n  url.searchParams.set('redirect', encodeURIComponent(redirectUrl));\n  url.searchParams.set('nonce', nonce);\n\n  return {\n    url,\n    nonce,\n    secretKey: bytesToHex(secretKey),\n    publicKey: bytesToHex(publicKey),\n    expiry,\n  };\n};\n", "import { bytesToHex, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { cryptoBoxSeal } from '@serenity-kit/noble-sodium';\n\ntype CreateAuthUrlParams = {\n  ephemeralPublicKey: string;\n  expiry: number;\n  nonce: string;\n  appId: string;\n  permissionId: string;\n  appIdentityAddress: string;\n  appIdentityAddressPrivateKey: string;\n  accountAddress: string;\n  signaturePublicKey: string;\n  signaturePrivateKey: string;\n  encryptionPublicKey: string;\n  encryptionPrivateKey: string;\n  sessionToken: string;\n  sessionTokenExpires: number;\n  privateSpaces: { id: string }[];\n  publicSpaces: { id: string }[];\n};\n\nexport const createCallbackParams = ({ nonce, ephemeralPublicKey, ...rest }: CreateAuthUrlParams) => {\n  const ciphertext = cryptoBoxSeal({\n    message: utf8ToBytes(JSON.stringify(rest)),\n    publicKey: hexToBytes(ephemeralPublicKey.replace(/^0x/, '')),\n  });\n\n  return {\n    ciphertext: bytesToHex(ciphertext),\n    nonce,\n  };\n};\n", "/**\n * HKDF (RFC 5869): extract + expand in one step.\n * See https://soatok.blog/2021/11/17/understanding-hkdf/.\n * @module\n */\nimport { hmac } from './hmac.ts';\nimport { ahash, anumber, type CHash, clean, type Input, toBytes } from './utils.ts';\n\n/**\n * HKDF-extract from spec. Less important part. `HKDF-Extract(IKM, salt) -> PRK`\n * Arguments position differs from spec (IKM is first one, since it is not optional)\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n */\nexport function extract(hash: CHash, ikm: Input, salt?: Input): Uint8Array {\n  ahash(hash);\n  // NOTE: some libraries treat zero-length array as 'not provided';\n  // we don't, since we have undefined as 'not provided'\n  // https://github.com/RustCrypto/KDFs/issues/15\n  if (salt === undefined) salt = new Uint8Array(hash.outputLen);\n  return hmac(hash, toBytes(salt), toBytes(ikm));\n}\n\nconst HKDF_COUNTER = /* @__PURE__ */ Uint8Array.from([0]);\nconst EMPTY_BUFFER = /* @__PURE__ */ Uint8Array.of();\n\n/**\n * HKDF-expand from the spec. The most important part. `HKDF-Expand(PRK, info, L) -> OKM`\n * @param hash - hash function that would be used (e.g. sha256)\n * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in bytes\n */\nexport function expand(hash: CHash, prk: Input, info?: Input, length: number = 32): Uint8Array {\n  ahash(hash);\n  anumber(length);\n  const olen = hash.outputLen;\n  if (length > 255 * olen) throw new Error('Length should be <= 255*HashLen');\n  const blocks = Math.ceil(length / olen);\n  if (info === undefined) info = EMPTY_BUFFER;\n  // first L(ength) octets of T\n  const okm = new Uint8Array(blocks * olen);\n  // Re-use HMAC instance between blocks\n  const HMAC = hmac.create(hash, prk);\n  const HMACTmp = HMAC._cloneInto();\n  const T = new Uint8Array(HMAC.outputLen);\n  for (let counter = 0; counter < blocks; counter++) {\n    HKDF_COUNTER[0] = counter + 1;\n    // T(0) = empty string (zero length)\n    // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)\n    HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)\n      .update(info)\n      .update(HKDF_COUNTER)\n      .digestInto(T);\n    okm.set(T, olen * counter);\n    HMAC._cloneInto(HMACTmp);\n  }\n  HMAC.destroy();\n  HMACTmp.destroy();\n  clean(T, HKDF_COUNTER);\n  return okm.slice(0, length);\n}\n\n/**\n * HKDF (RFC 5869): derive keys from an initial input.\n * Combines hkdf_extract + hkdf_expand in one step\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in bytes\n * @example\n * import { hkdf } from '@noble/hashes/hkdf';\n * import { sha256 } from '@noble/hashes/sha2';\n * import { randomBytes } from '@noble/hashes/utils';\n * const inputKey = randomBytes(32);\n * const salt = randomBytes(32);\n * const info = 'application-key';\n * const hk1 = hkdf(sha256, inputKey, salt, info, 32);\n */\nexport const hkdf = (\n  hash: CHash,\n  ikm: Input,\n  salt: Input | undefined,\n  info: Input | undefined,\n  length: number\n): Uint8Array => expand(hash, extract(hash, ikm, salt), info, length);\n", "import { gcm } from '@noble/ciphers/aes';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\nimport { hkdf } from '@noble/hashes/hkdf';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type { Hex } from 'viem';\nimport { verifyMessage } from 'viem';\n\nimport { bytesToHex, canonicalize, hexToBytes } from '../utils/index.js';\nimport type { IdentityKeys, PrivateAppIdentity, Signer } from './types.js';\n\n// Adapted from the XMTP approach to encrypt keys\n// See: https://github.com/xmtp/xmtp-js/blob/8d6e5a65813902926baac8150a648587acbaad92/sdks/js-sdk/src/keystore/providers/NetworkKeyManager.ts#L79-L116\n// (We reimplement their encrypt/decrypt functions using noble).\n\nconst hkdfDeriveKey = (secret: Uint8Array, salt: Uint8Array): Uint8Array => {\n  return hkdf(sha256, secret, salt, '', 32);\n};\n\n// This implements the same encryption as  https://github.com/xmtp/xmtp-js/blob/336471de4ea95416ad0f4f9850d3f12bb0a13f1e/sdks/js-sdk/src/encryption/encryption.ts#L18\n// But using @noble/ciphers instead of the WebCrypto API.\n// The XMTP code was audited by Certik: https://skynet.certik.com/projects/xmtp\n//\n// Worth noting that GCM nonce collision would break the encryption,\n// and 12 bytes is not a lot. So this function should not be used to encrypt\n// a large number of messages with the same secret. In our case it should be okay\n// as each secret is only used to encrypt a single identity. If we need\n// something more secure for a larger number of messages we should use a\n// different encryption scheme, e.g. XAES-256-GCM, see https://words.filippo.io/dispatches/xaes-256-gcm/\nconst encrypt = (msg: Uint8Array, secret: Uint8Array): string => {\n  const hkdfSalt = randomBytes(32);\n  const gcmNonce = randomBytes(12);\n  const derivedKey = hkdfDeriveKey(secret, hkdfSalt);\n\n  const aes = gcm(derivedKey, gcmNonce);\n\n  const ciphertext = aes.encrypt(msg);\n\n  // TODO: Use Effect Schema and better serialization?\n  const ciphertextJson = canonicalize({\n    aes256GcmHkdfSha256: {\n      payload: bytesToHex(ciphertext),\n      hkdfSalt: bytesToHex(hkdfSalt),\n      gcmNonce: bytesToHex(gcmNonce),\n    },\n  });\n  return bytesToHex(new TextEncoder().encode(ciphertextJson));\n};\n\n// This implements the same decryption as  https://github.com/xmtp/xmtp-js/blob/336471de4ea95416ad0f4f9850d3f12bb0a13f1e/sdks/js-sdk/src/encryption/encryption.ts#L41\n// But using @noble/ciphers instead of the WebCrypto API\n// The XMTP code was audited by Certik: https://skynet.certik.com/projects/xmtp\nconst decrypt = (ciphertext: string, secret: Uint8Array): Uint8Array => {\n  const ciphertextJson = new TextDecoder().decode(hexToBytes(ciphertext));\n  const { aes256GcmHkdfSha256 } = JSON.parse(ciphertextJson);\n  const hkdfSalt = hexToBytes(aes256GcmHkdfSha256.hkdfSalt);\n  const gcmNonce = hexToBytes(aes256GcmHkdfSha256.gcmNonce);\n  const derivedKey = hkdfDeriveKey(secret, hkdfSalt);\n\n  const aes = gcm(derivedKey, gcmNonce);\n\n  return aes.decrypt(hexToBytes(aes256GcmHkdfSha256.payload));\n};\n\nconst signatureMessage = (nonce: Uint8Array): string => {\n  return `The Graph: sign to encrypt/decrypt identity keys.\\nNonce: ${bytesToHex(nonce)}\\n`;\n};\n\nexport const encryptIdentity = async (\n  signer: Signer,\n  keys: IdentityKeys,\n): Promise<{ ciphertext: string; nonce: string }> => {\n  const nonce = randomBytes(32);\n  const message = signatureMessage(nonce);\n  const signature = (await signer.signMessage(message)) as Hex;\n\n  // Check that the signature is valid\n  const valid = await verifyMessage({\n    address: (await signer.getAddress()) as Hex,\n    message,\n    signature,\n  });\n  if (!valid) {\n    throw new Error('Invalid signature');\n  }\n  const secretKey = hexToBytes(signature);\n  // We use a simple plaintext encoding:\n  // Hex keys separated by newlines\n  const keysTxt = [\n    keys.encryptionPublicKey,\n    keys.encryptionPrivateKey,\n    keys.signaturePublicKey,\n    keys.signaturePrivateKey,\n  ].join('\\n');\n  const keysMsg = new TextEncoder().encode(keysTxt);\n  const ciphertext = encrypt(keysMsg, secretKey);\n  return { ciphertext, nonce: bytesToHex(nonce) };\n};\n\nexport const decryptIdentity = async (signer: Signer, ciphertext: string, nonce: string): Promise<IdentityKeys> => {\n  const message = signatureMessage(hexToBytes(nonce));\n  const signature = (await signer.signMessage(message)) as Hex;\n\n  // Check that the signature is valid\n  const valid = await verifyMessage({\n    address: (await signer.getAddress()) as Hex,\n    message,\n    signature,\n  });\n  if (!valid) {\n    throw new Error('Invalid signature');\n  }\n  const secretKey = hexToBytes(signature);\n  let keysMsg: Uint8Array;\n  try {\n    keysMsg = await decrypt(ciphertext, secretKey);\n  } catch (e) {\n    // See https://github.com/xmtp/xmtp-js/blob/8d6e5a65813902926baac8150a648587acbaad92/sdks/js-sdk/src/keystore/providers/NetworkKeyManager.ts#L142-L146\n    if (secretKey.length !== 65) {\n      throw new Error('Expected 65 bytes before trying a different recovery byte');\n    }\n    // Try the other version of recovery byte, either +27 or -27\n    const lastByte = secretKey[secretKey.length - 1];\n    let newSecret = secretKey.slice(0, secretKey.length - 1);\n    if (lastByte < 27) {\n      newSecret = new Uint8Array([...newSecret, lastByte + 27]);\n    } else {\n      newSecret = new Uint8Array([...newSecret, lastByte - 27]);\n    }\n    keysMsg = await decrypt(ciphertext, newSecret);\n  }\n  const keysTxt = new TextDecoder().decode(keysMsg);\n  const [encryptionPublicKey, encryptionPrivateKey, signaturePublicKey, signaturePrivateKey] = keysTxt.split('\\n');\n  return { encryptionPublicKey, encryptionPrivateKey, signaturePublicKey, signaturePrivateKey };\n};\n\nexport const encryptAppIdentity = async (\n  signer: Signer,\n  appIdentityAddress: string,\n  appIdentityAddressPrivateKey: string,\n  permissionId: string,\n  keys: IdentityKeys,\n): Promise<{ ciphertext: string; nonce: string }> => {\n  const nonce = randomBytes(32);\n  const message = signatureMessage(nonce);\n  const signature = (await signer.signMessage(message)) as Hex;\n\n  // Check that the signature is valid\n  const valid = await verifyMessage({\n    address: (await signer.getAddress()) as Hex,\n    message,\n    signature,\n  });\n  if (!valid) {\n    throw new Error('Invalid signature');\n  }\n  const secretKey = hexToBytes(signature);\n  // We use a simple plaintext encoding:\n  // Hex keys separated by newlines\n  const keysTxt = [\n    keys.encryptionPublicKey,\n    keys.encryptionPrivateKey,\n    keys.signaturePublicKey,\n    keys.signaturePrivateKey,\n    appIdentityAddress,\n    appIdentityAddressPrivateKey,\n    permissionId,\n  ].join('\\n');\n  const keysMsg = new TextEncoder().encode(keysTxt);\n  const ciphertext = encrypt(keysMsg, secretKey);\n  return { ciphertext, nonce: bytesToHex(nonce) };\n};\n\nexport const decryptAppIdentity = async (\n  signer: Signer,\n  ciphertext: string,\n  nonce: string,\n): Promise<Omit<PrivateAppIdentity, 'sessionToken' | 'sessionTokenExpires' | 'accountAddress'>> => {\n  const message = signatureMessage(hexToBytes(nonce));\n  const signature = (await signer.signMessage(message)) as Hex;\n\n  // Check that the signature is valid\n  const valid = await verifyMessage({\n    address: (await signer.getAddress()) as Hex,\n    message,\n    signature,\n  });\n  if (!valid) {\n    throw new Error('Invalid signature');\n  }\n  const secretKey = hexToBytes(signature);\n  let keysMsg: Uint8Array;\n  try {\n    keysMsg = await decrypt(ciphertext, secretKey);\n  } catch (e) {\n    // See https://github.com/xmtp/xmtp-js/blob/8d6e5a65813902926baac8150a648587acbaad92/sdks/js-sdk/src/keystore/providers/NetworkKeyManager.ts#L142-L146\n    if (secretKey.length !== 65) {\n      throw new Error('Expected 65 bytes before trying a different recovery byte');\n    }\n    // Try the other version of recovery byte, either +27 or -27\n    const lastByte = secretKey[secretKey.length - 1];\n    let newSecret = secretKey.slice(0, secretKey.length - 1);\n    if (lastByte < 27) {\n      newSecret = new Uint8Array([...newSecret, lastByte + 27]);\n    } else {\n      newSecret = new Uint8Array([...newSecret, lastByte - 27]);\n    }\n    keysMsg = await decrypt(ciphertext, newSecret);\n  }\n  const keysTxt = new TextDecoder().decode(keysMsg);\n  const [\n    encryptionPublicKey,\n    encryptionPrivateKey,\n    signaturePublicKey,\n    signaturePrivateKey,\n    appIdentityAddress,\n    appIdentityAddressPrivateKey,\n    permissionId,\n  ] = keysTxt.split('\\n');\n  return {\n    encryptionPublicKey,\n    encryptionPrivateKey,\n    signaturePublicKey,\n    signaturePrivateKey,\n    address: appIdentityAddress,\n    addressPrivateKey: appIdentityAddressPrivateKey,\n    permissionId,\n  };\n};\n", "import { http, type Chain, type Hex, createPublicClient, verifyMessage } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\n\nimport type { SmartAccountClient } from 'permissionless';\nimport { publicKeyToAddress } from '../utils/index.js';\nimport type { IdentityKeys } from './types.js';\n\nexport const getAccountProofMessage = (accountAddress: string, publicKey: string): string => {\n  return `This message proves I am the owner of the account ${accountAddress} and the public key ${publicKey}`;\n};\n\nexport const getKeyProofMessage = (accountAddress: string, publicKey: string): string => {\n  return `The public key ${publicKey} is owned by the account ${accountAddress}`;\n};\n\nexport const accountProofDomain = {\n  name: 'Hypergraph',\n  version: '1',\n};\n\nexport const proveIdentityOwnership = async (\n  smartAccountClient: SmartAccountClient,\n  accountAddress: string,\n  keys: IdentityKeys,\n): Promise<{ accountProof: string; keyProof: string }> => {\n  if (!smartAccountClient.account) {\n    throw new Error('Smart account client does not have an account');\n  }\n  if (!smartAccountClient.chain) {\n    throw new Error('Smart account client does not have a chain');\n  }\n  const publicKey = keys.signaturePublicKey;\n  const keyProofMessage = getKeyProofMessage(accountAddress, publicKey);\n\n  const accountProof = await smartAccountClient.account.signTypedData({\n    message: {\n      message: getAccountProofMessage(accountAddress, publicKey),\n    },\n    types: {\n      Message: [{ name: 'message', type: 'string' }],\n    },\n    domain: accountProofDomain,\n    primaryType: 'Message',\n  });\n  console.log('accountProof', accountProof);\n  const account = privateKeyToAccount(keys.signaturePrivateKey as Hex);\n  const keyProof = await account.signMessage({ message: keyProofMessage });\n  return { accountProof, keyProof };\n};\n\nexport const verifyIdentityOwnership = async (\n  accountAddress: string,\n  publicKey: string,\n  accountProof: string,\n  keyProof: string,\n  chain: Chain,\n  rpcUrl: string,\n): Promise<boolean> => {\n  const keyProofMessage = getKeyProofMessage(accountAddress, publicKey);\n  const publicClient = createPublicClient({\n    chain,\n    transport: http(rpcUrl),\n  });\n  // console.log('publicClient', publicClient);\n  // console.log('rpcUrl', rpcUrl);\n  // console.log('chain', chain);\n\n  // console.log('accountProof', accountProof);\n  // console.log('accountAddress', accountAddress);\n  // console.log('publicKey', publicKey);\n\n  const accountProofMessage = getAccountProofMessage(accountAddress, publicKey);\n  const validAccountProof = await publicClient.verifyTypedData({\n    address: accountAddress as Hex,\n    message: {\n      message: accountProofMessage,\n    },\n    types: {\n      Message: [{ name: 'message', type: 'string' }],\n    },\n    domain: accountProofDomain,\n    primaryType: 'Message',\n    signature: accountProof as Hex,\n  });\n  if (!validAccountProof) {\n    console.log('Invalid account proof');\n    return false;\n  }\n\n  const keyAddress = publicKeyToAddress(publicKey) as Hex;\n  const validKeyProof = await verifyMessage({\n    address: keyAddress,\n    message: keyProofMessage,\n    signature: keyProof as Hex,\n  });\n  if (!validKeyProof) {\n    console.log('Invalid key proof');\n    return false;\n  }\n  return true;\n};\n", "import type { AnyDocumentId, DocHandle, Repo } from '@automerge/automerge-repo';\nimport { type Store, createStore } from '@xstate/store';\nimport type { Address } from 'viem';\nimport { mergeMessages } from './inboxes/merge-messages.js';\nimport type { InboxSenderAuthPolicy } from './inboxes/types.js';\nimport type { Identity } from './index.js';\nimport type { Invitation, Updates } from './messages/index.js';\nimport type { SpaceEvent, SpaceState } from './space-events/index.js';\nimport { idToAutomergeId } from './utils/automergeId.js';\n\nexport type InboxMessageStorageEntry = {\n  id: string;\n  plaintext: string;\n  ciphertext: string;\n  signature: {\n    hex: string;\n    recovery: number;\n  } | null;\n  createdAt: string;\n  authorAccountAddress: string | null;\n};\n\nexport type SpaceInboxStorageEntry = {\n  inboxId: string;\n  isPublic: boolean;\n  authPolicy: InboxSenderAuthPolicy;\n  encryptionPublicKey: string;\n  secretKey: string;\n  lastMessageClock: string;\n  messages: InboxMessageStorageEntry[]; // Kept sorted by UUIDv7\n  seenMessageIds: Set<string>; // For deduplication\n};\n\nexport type AccountInboxStorageEntry = {\n  inboxId: string;\n  isPublic: boolean;\n  authPolicy: InboxSenderAuthPolicy;\n  encryptionPublicKey: string;\n  lastMessageClock: string;\n  messages: InboxMessageStorageEntry[]; // Kept sorted by UUIDv7\n  seenMessageIds: Set<string>; // For deduplication\n};\n\nexport type SpaceStorageEntry = {\n  id: string;\n  events: SpaceEvent[];\n  state: SpaceState | undefined;\n  keys: { id: string; key: string }[];\n  automergeDocHandle: DocHandle<unknown> | undefined;\n  inboxes: SpaceInboxStorageEntry[];\n};\n\ninterface StoreContext {\n  spaces: SpaceStorageEntry[];\n  updatesInFlight: string[];\n  invitations: Invitation[];\n  repo: Repo | null;\n  identities: {\n    [accountAddress: string]: {\n      encryptionPublicKey: string;\n      signaturePublicKey: string;\n      accountProof: string;\n      keyProof: string;\n    };\n  };\n  authenticated: boolean;\n  accountAddress: Address | null;\n  sessionToken: string | null;\n  keys: Identity.IdentityKeys | null;\n  lastUpdateClock: { [spaceId: string]: number };\n  accountInboxes: AccountInboxStorageEntry[];\n}\n\nconst initialStoreContext: StoreContext = {\n  spaces: [],\n  updatesInFlight: [],\n  invitations: [],\n  repo: null,\n  identities: {},\n  authenticated: false,\n  accountAddress: null,\n  sessionToken: null,\n  keys: null,\n  lastUpdateClock: {},\n  accountInboxes: [],\n};\n\ntype StoreEvent =\n  | { type: 'setInvitations'; invitations: Invitation[] }\n  | { type: 'reset' }\n  | { type: 'addUpdateInFlight'; updateId: string }\n  | { type: 'removeUpdateInFlight'; updateId: string }\n  | { type: 'applyEvent'; spaceId: string; event: SpaceEvent; state: SpaceState }\n  | { type: 'updateConfirmed'; spaceId: string; clock: number }\n  | { type: 'applyUpdate'; spaceId: string; firstUpdateClock: number; lastUpdateClock: number }\n  | {\n      type: 'addVerifiedIdentity';\n      accountAddress: string;\n      encryptionPublicKey: string;\n      signaturePublicKey: string;\n      accountProof: string;\n      keyProof: string;\n    }\n  | {\n      type: 'setSpaceInbox';\n      spaceId: string;\n      inbox: SpaceInboxStorageEntry;\n    }\n  | {\n      type: 'setSpaceInboxMessages';\n      spaceId: string;\n      inboxId: string;\n      messages: InboxMessageStorageEntry[];\n      lastMessageClock: string;\n    }\n  | {\n      type: 'setAccountInbox';\n      inbox: AccountInboxStorageEntry;\n    }\n  | {\n      type: 'setAccountInboxMessages';\n      inboxId: string;\n      messages: InboxMessageStorageEntry[];\n      lastMessageClock: string;\n    }\n  | {\n      type: 'setSpace';\n      spaceId: string;\n      name: string;\n      updates?: Updates;\n      events: SpaceEvent[];\n      inboxes?: SpaceInboxStorageEntry[];\n      spaceState: SpaceState;\n      keys: {\n        id: string;\n        key: string;\n      }[];\n    }\n  | {\n      type: 'setAuth';\n      accountAddress: Address;\n      sessionToken: string;\n      keys: Identity.IdentityKeys;\n    }\n  | {\n      type: 'resetAuth';\n    }\n  | {\n      type: 'setRepo';\n      repo: Repo;\n    };\n\ntype GenericEventObject = { type: string };\n\nexport const store: Store<StoreContext, StoreEvent, GenericEventObject> = createStore({\n  context: initialStoreContext,\n  on: {\n    setInvitations: (context, event: { invitations: Invitation[] }) => {\n      return {\n        ...context,\n        invitations: event.invitations,\n      };\n    },\n    reset: (context) => {\n      // once the repo is initialized, there is no need to reset it\n      return { ...initialStoreContext, repo: context.repo };\n    },\n    addUpdateInFlight: (context, event: { updateId: string }) => {\n      return {\n        ...context,\n        updatesInFlight: [...context.updatesInFlight, event.updateId],\n      };\n    },\n    removeUpdateInFlight: (context, event: { updateId: string }) => {\n      return {\n        ...context,\n        updatesInFlight: context.updatesInFlight.filter((id) => id !== event.updateId),\n      };\n    },\n    applyEvent: (context, event: { spaceId: string; event: SpaceEvent; state: SpaceState }) => {\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            return { ...space, events: [...space.events, event.event], state: event.state };\n          }\n          return space;\n        }),\n      };\n    },\n    updateConfirmed: (context, event: { spaceId: string; clock: number }) => {\n      return {\n        ...context,\n        lastUpdateClock: {\n          ...context.lastUpdateClock,\n          [event.spaceId]: event.clock,\n        },\n      };\n    },\n    applyUpdate: (context, event: { spaceId: string; firstUpdateClock: number; lastUpdateClock: number }) => {\n      const lastUpdateClock = context.lastUpdateClock[event.spaceId] ?? -1;\n      if (event.firstUpdateClock === lastUpdateClock + 1) {\n        return {\n          ...context,\n          lastUpdateClock: {\n            ...context.lastUpdateClock,\n            [event.spaceId]: event.lastUpdateClock,\n          },\n        };\n      }\n\n      // TODO else case: request missing updates from server\n      return context;\n    },\n    addVerifiedIdentity: (\n      context,\n      event: {\n        accountAddress: string;\n        encryptionPublicKey: string;\n        signaturePublicKey: string;\n        accountProof: string;\n        keyProof: string;\n      },\n    ) => {\n      return {\n        ...context,\n        identities: {\n          ...context.identities,\n          [event.accountAddress]: {\n            encryptionPublicKey: event.encryptionPublicKey,\n            signaturePublicKey: event.signaturePublicKey,\n            accountProof: event.accountProof,\n            keyProof: event.keyProof,\n          },\n        },\n      };\n    },\n    setSpaceInbox: (context, event: { spaceId: string; inbox: SpaceInboxStorageEntry }) => {\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            const existingInbox = space.inboxes.find((inbox) => inbox.inboxId === event.inbox.inboxId);\n            if (existingInbox) {\n              return {\n                ...space,\n                inboxes: space.inboxes.map((inbox) => {\n                  if (inbox.inboxId === event.inbox.inboxId) {\n                    const { messages, seenMessageIds } = mergeMessages(\n                      existingInbox.messages,\n                      existingInbox.seenMessageIds,\n                      event.inbox.messages,\n                    );\n                    return {\n                      ...event.inbox,\n                      messages,\n                      seenMessageIds,\n                    };\n                  }\n                  return inbox;\n                }),\n              };\n            }\n            return { ...space, inboxes: [...space.inboxes, event.inbox] };\n          }\n          return space;\n        }),\n      };\n    },\n    setSpaceInboxMessages: (\n      context,\n      event: { spaceId: string; inboxId: string; messages: InboxMessageStorageEntry[]; lastMessageClock: string },\n    ) => {\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            return {\n              ...space,\n              inboxes: space.inboxes.map((inbox) => {\n                if (inbox.inboxId === event.inboxId) {\n                  const { messages, seenMessageIds } = mergeMessages(\n                    inbox.messages,\n                    inbox.seenMessageIds,\n                    event.messages,\n                  );\n                  return {\n                    ...inbox,\n                    messages,\n                    seenMessageIds,\n                    lastMessageClock: new Date(\n                      Math.max(new Date(inbox.lastMessageClock).getTime(), new Date(event.lastMessageClock).getTime()),\n                    ).toISOString(),\n                  };\n                }\n                return inbox;\n              }),\n            };\n          }\n          return space;\n        }),\n      };\n    },\n    setAccountInbox: (context, event: { inbox: AccountInboxStorageEntry }) => {\n      const existingInbox = context.accountInboxes.find((inbox) => inbox.inboxId === event.inbox.inboxId);\n      if (existingInbox) {\n        return {\n          ...context,\n          accountInboxes: context.accountInboxes.map((inbox) => {\n            if (inbox.inboxId === event.inbox.inboxId) {\n              const { messages, seenMessageIds } = mergeMessages(\n                existingInbox.messages,\n                existingInbox.seenMessageIds,\n                event.inbox.messages,\n              );\n              return {\n                ...event.inbox,\n                messages,\n                seenMessageIds,\n              };\n            }\n            return inbox;\n          }),\n        };\n      }\n      return {\n        ...context,\n        accountInboxes: [...context.accountInboxes, event.inbox],\n      };\n    },\n    setAccountInboxMessages: (\n      context,\n      event: { inboxId: string; messages: InboxMessageStorageEntry[]; lastMessageClock: string },\n    ) => {\n      return {\n        ...context,\n        accountInboxes: context.accountInboxes.map((inbox) => {\n          if (inbox.inboxId === event.inboxId) {\n            const { messages, seenMessageIds } = mergeMessages(inbox.messages, inbox.seenMessageIds, event.messages);\n            return {\n              ...inbox,\n              messages,\n              seenMessageIds,\n              lastMessageClock: new Date(\n                Math.max(new Date(inbox.lastMessageClock).getTime(), new Date(event.lastMessageClock).getTime()),\n              ).toISOString(),\n            };\n          }\n          return inbox;\n        }),\n      };\n    },\n    setSpace: (\n      context,\n      event: {\n        spaceId: string;\n        updates?: Updates;\n        inboxes?: SpaceInboxStorageEntry[];\n        events: SpaceEvent[];\n        spaceState: SpaceState;\n        keys: {\n          id: string;\n          key: string;\n        }[];\n      },\n    ) => {\n      const existingSpace = context.spaces.find((s) => s.id === event.spaceId);\n      if (!existingSpace && context.repo) {\n        const result = context.repo.findWithProgress(idToAutomergeId(event.spaceId) as AnyDocumentId);\n        // set it to ready to interact with the document\n        result.handle.doneLoading();\n\n        const newSpace: SpaceStorageEntry = {\n          id: event.spaceId,\n          events: event.events,\n          state: event.spaceState,\n          keys: event.keys,\n          automergeDocHandle: result.handle,\n          inboxes: event.inboxes ?? [],\n        };\n        return {\n          ...context,\n          spaces: [...context.spaces, newSpace],\n          lastUpdateClock: {\n            ...context.lastUpdateClock,\n            [event.spaceId]: -1,\n          },\n        };\n      }\n\n      let lastUpdateClock = context.lastUpdateClock[event.spaceId] ?? -1;\n      if (event.updates?.firstUpdateClock === lastUpdateClock + 1) {\n        lastUpdateClock = event.updates.lastUpdateClock;\n      } else {\n        // TODO request missing updates from server\n      }\n\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            // Merge inboxes: keep existing ones and add new ones\n            const mergedInboxes = [...space.inboxes];\n            for (const newInbox of event.inboxes ?? []) {\n              const existingInboxIndex = mergedInboxes.findIndex((inbox) => inbox.inboxId === newInbox.inboxId);\n              if (existingInboxIndex === -1) {\n                // Only add if it's a new inbox\n                mergedInboxes.push(newInbox);\n              }\n            }\n\n            return {\n              ...space,\n              events: event.events,\n              state: event.spaceState,\n              keys: event.keys,\n              inboxes: mergedInboxes,\n            };\n          }\n          return space;\n        }),\n        lastUpdateClock: {\n          ...context.lastUpdateClock,\n          [event.spaceId]: lastUpdateClock,\n        },\n      };\n    },\n    setAuth: (context, event: { accountAddress: Address; sessionToken: string; keys: Identity.IdentityKeys }) => {\n      return {\n        ...context,\n        authenticated: true,\n        accountAddress: event.accountAddress,\n        sessionToken: event.sessionToken,\n        keys: event.keys,\n      };\n    },\n    resetAuth: (context) => {\n      return {\n        ...context,\n        authenticated: false,\n        accountAddress: null,\n        sessionToken: null,\n        keys: null,\n      };\n    },\n    setRepo: (context, event: { repo: Repo }) => {\n      return {\n        ...context,\n        repo: event.repo,\n      };\n    },\n  },\n});\n", "/* eslint-disable */\nfunction createReactiveSystem({\n  update,\n  notify,\n  unwatched\n}) {\n  return {\n    link,\n    unlink,\n    propagate,\n    checkDirty,\n    endTracking,\n    startTracking,\n    shallowPropagate\n  };\n  function link(dep, sub) {\n    const prevDep = sub._depsTail;\n    if (prevDep !== undefined && prevDep.dep === dep) {\n      return;\n    }\n    let nextDep = undefined;\n    const recursedCheck = sub._flags & 4;\n    if (recursedCheck) {\n      nextDep = prevDep !== undefined ? prevDep.nextDep : sub._deps;\n      if (nextDep !== undefined && nextDep.dep === dep) {\n        sub._depsTail = nextDep;\n        return;\n      }\n    }\n    const prevSub = dep._subsTail;\n    if (prevSub !== undefined && prevSub.sub === sub && (!recursedCheck || isValidLink(prevSub, sub))) {\n      return;\n    }\n    const newLink = sub._depsTail = dep._subsTail = {\n      dep,\n      sub,\n      prevDep,\n      nextDep,\n      prevSub,\n      nextSub: undefined\n    };\n    if (nextDep !== undefined) {\n      nextDep.prevDep = newLink;\n    }\n    if (prevDep !== undefined) {\n      prevDep.nextDep = newLink;\n    } else {\n      sub._deps = newLink;\n    }\n    if (prevSub !== undefined) {\n      prevSub.nextSub = newLink;\n    } else {\n      dep._subs = newLink;\n    }\n  }\n  function unlink(link, sub = link.sub) {\n    const dep = link.dep;\n    const prevDep = link.prevDep;\n    const nextDep = link.nextDep;\n    const nextSub = link.nextSub;\n    const prevSub = link.prevSub;\n    if (nextDep !== undefined) {\n      nextDep.prevDep = prevDep;\n    } else {\n      sub._depsTail = prevDep;\n    }\n    if (prevDep !== undefined) {\n      prevDep.nextDep = nextDep;\n    } else {\n      sub._deps = nextDep;\n    }\n    if (nextSub !== undefined) {\n      nextSub.prevSub = prevSub;\n    } else {\n      dep._subsTail = prevSub;\n    }\n    if (prevSub !== undefined) {\n      prevSub.nextSub = nextSub;\n    } else if ((dep._subs = nextSub) === undefined) {\n      unwatched(dep);\n    }\n    return nextDep;\n  }\n  function propagate(link) {\n    let next = link.nextSub;\n    let stack;\n    top: do {\n      const sub = link.sub;\n      let flags = sub._flags;\n      if (flags & 3) {\n        if (!(flags & 60)) {\n          sub._flags = flags | 32;\n        } else if (!(flags & 12)) {\n          flags = 0;\n        } else if (!(flags & 4)) {\n          sub._flags = flags & ~8 | 32;\n        } else if (!(flags & 48) && isValidLink(link, sub)) {\n          sub._flags = flags | 40;\n          flags &= 1;\n        } else {\n          flags = 0;\n        }\n        if (flags & 2) {\n          notify(sub);\n        }\n        if (flags & 1) {\n          const subSubs = sub._subs;\n          if (subSubs !== undefined) {\n            link = subSubs;\n            if (subSubs.nextSub !== undefined) {\n              stack = {\n                value: next,\n                prev: stack\n              };\n              next = link.nextSub;\n            }\n            continue;\n          }\n        }\n      }\n      if ((link = next) !== undefined) {\n        next = link.nextSub;\n        continue;\n      }\n      while (stack !== undefined) {\n        link = stack.value;\n        stack = stack.prev;\n        if (link !== undefined) {\n          next = link.nextSub;\n          continue top;\n        }\n      }\n      break;\n    } while (true);\n  }\n  function startTracking(sub) {\n    sub._depsTail = undefined;\n    sub._flags = sub._flags & ~56 | 4;\n  }\n  function endTracking(sub) {\n    const depsTail = sub._depsTail;\n    let toRemove = depsTail !== undefined ? depsTail.nextDep : sub._deps;\n    while (toRemove !== undefined) {\n      toRemove = unlink(toRemove, sub);\n    }\n    sub._flags &= ~4;\n  }\n  function checkDirty(link, sub) {\n    let stack;\n    let checkDepth = 0;\n    top: do {\n      const dep = link.dep;\n      const depFlags = dep._flags;\n      let dirty = false;\n      if (sub._flags & 16) {\n        dirty = true;\n      } else if ((depFlags & 17) === 17) {\n        if (update(dep)) {\n          const subs = dep._subs;\n          if (subs.nextSub !== undefined) {\n            shallowPropagate(subs);\n          }\n          dirty = true;\n        }\n      } else if ((depFlags & 33) === 33) {\n        if (link.nextSub !== undefined || link.prevSub !== undefined) {\n          stack = {\n            value: link,\n            prev: stack\n          };\n        }\n        link = dep._deps;\n        sub = dep;\n        ++checkDepth;\n        continue;\n      }\n      if (!dirty && link.nextDep !== undefined) {\n        link = link.nextDep;\n        continue;\n      }\n      while (checkDepth) {\n        --checkDepth;\n        const firstSub = sub._subs;\n        const hasMultipleSubs = firstSub.nextSub !== undefined;\n        if (hasMultipleSubs) {\n          link = stack.value;\n          stack = stack.prev;\n        } else {\n          link = firstSub;\n        }\n        if (dirty) {\n          if (update(sub)) {\n            if (hasMultipleSubs) {\n              shallowPropagate(firstSub);\n            }\n            sub = link.sub;\n            continue;\n          }\n        } else {\n          sub._flags &= ~32;\n        }\n        sub = link.sub;\n        if (link.nextDep !== undefined) {\n          link = link.nextDep;\n          continue top;\n        }\n        dirty = false;\n      }\n      return dirty;\n    } while (true);\n  }\n  function shallowPropagate(link) {\n    do {\n      const sub = link.sub;\n      const nextSub = link.nextSub;\n      const subFlags = sub._flags;\n      if ((subFlags & 48) === 32) {\n        sub._flags = subFlags | 16;\n        if (subFlags & 2) {\n          notify(sub);\n        }\n      }\n      link = nextSub;\n    } while (link !== undefined);\n  }\n  function isValidLink(checkLink, sub) {\n    const depsTail = sub._depsTail;\n    if (depsTail !== undefined) {\n      let link = sub._deps;\n      do {\n        if (link === checkLink) {\n          return true;\n        }\n        if (link === depsTail) {\n          break;\n        }\n        link = link.nextDep;\n      } while (link !== undefined);\n    }\n    return false;\n  }\n}\n\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\n\nconst queuedEffects = [];\nconst {\n  link,\n  unlink,\n  propagate,\n  checkDirty,\n  endTracking,\n  startTracking,\n  shallowPropagate\n} = createReactiveSystem({\n  update(atom) {\n    return atom._update();\n  },\n  notify(effect) {\n    queuedEffects[queuedEffectsLength++] = effect;\n  },\n  unwatched(atom) {\n    let toRemove = atom._deps;\n    if (toRemove !== undefined) {\n      atom._flags = 17;\n      do {\n        toRemove = unlink(toRemove, atom);\n      } while (toRemove !== undefined);\n    }\n  }\n});\nlet notifyIndex = 0;\nlet queuedEffectsLength = 0;\nlet activeSub;\nfunction flush() {\n  while (notifyIndex < queuedEffectsLength) {\n    const effect = queuedEffects[notifyIndex];\n    queuedEffects[notifyIndex++] = undefined;\n    effect.notify();\n  }\n  notifyIndex = 0;\n  queuedEffectsLength = 0;\n}\nfunction createAsyncAtom(getValue, options) {\n  const atom = createAtom(() => {\n    getValue().then(data => {\n      atom._update({\n        status: 'done',\n        data\n      });\n    }, error => {\n      atom._update({\n        status: 'error',\n        error\n      });\n    });\n    return {\n      status: 'pending'\n    };\n  }, options);\n  return atom;\n}\nfunction createAtom(valueOrFn, options) {\n  const isComputed = typeof valueOrFn === 'function';\n  const getter = valueOrFn;\n\n  // Create plain object atom\n  const atom = {\n    _snapshot: isComputed ? undefined : valueOrFn,\n    _subs: undefined,\n    _subsTail: undefined,\n    _flags: 0,\n    get() {\n      if (activeSub !== undefined) {\n        link(atom, activeSub);\n      }\n      return atom._snapshot;\n    },\n    subscribe(observerOrFn) {\n      const obs = toObserver(observerOrFn);\n      const observed = {\n        current: false\n      };\n      const e = effect(() => {\n        atom.get();\n        if (!observed.current) {\n          observed.current = true;\n        } else {\n          obs.next?.(atom._snapshot);\n        }\n      });\n      return {\n        unsubscribe: () => {\n          e.stop();\n        }\n      };\n    },\n    _update(getValue) {\n      const prevSub = activeSub;\n      const compare = options?.compare ?? Object.is;\n      activeSub = atom;\n      startTracking(atom);\n      try {\n        const oldValue = atom._snapshot;\n        const read = atom => atom.get();\n        const newValue = typeof getValue === 'function' ? getValue(oldValue) : getValue === undefined && isComputed ? getter(read) : getValue;\n        if (oldValue === undefined || !compare(oldValue, newValue)) {\n          atom._snapshot = newValue;\n          return true;\n        }\n        return false;\n      } finally {\n        activeSub = prevSub;\n        endTracking(atom);\n      }\n    }\n  };\n  if (isComputed) {\n    Object.assign(atom, {\n      _deps: undefined,\n      _depsTail: undefined,\n      _flags: 17,\n      get() {\n        const flags = this._flags;\n        if (flags & 16 || flags & 32 && checkDirty(atom._deps, atom)) {\n          if (atom._update()) {\n            const subs = atom._subs;\n            if (subs !== undefined) {\n              shallowPropagate(subs);\n            }\n          }\n        } else if (flags & 32) {\n          atom._flags = flags & ~32;\n        }\n        if (activeSub !== undefined) {\n          link(atom, activeSub);\n        }\n        return atom._snapshot;\n      }\n    });\n  } else {\n    Object.assign(atom, {\n      set(valueOrFn) {\n        if (atom._update(valueOrFn)) {\n          const subs = atom._subs;\n          if (subs !== undefined) {\n            propagate(subs);\n            shallowPropagate(subs);\n            flush();\n          }\n        }\n      }\n    });\n  }\n  return atom;\n}\nfunction effect(fn) {\n  const run = () => {\n    const prevSub = activeSub;\n    activeSub = effectObj;\n    startTracking(effectObj);\n    try {\n      return fn();\n    } finally {\n      activeSub = prevSub;\n      endTracking(effectObj);\n    }\n  };\n  const effectObj = {\n    _deps: undefined,\n    _depsTail: undefined,\n    _flags: 2,\n    notify() {\n      const flags = this._flags;\n      if (flags & 16 || flags & 32 && checkDirty(this._deps, this)) {\n        run();\n      } else if (flags & 32) {\n        this._flags = flags & ~32;\n      }\n    },\n    stop() {\n      startTracking(this);\n      endTracking(this);\n    }\n  };\n  run();\n  return effectObj;\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\n/**\n * Updates a context object using a recipe function.\n *\n * @param context - The current context\n * @param recipe - A function that describes how to update the context\n * @returns The updated context\n */\nfunction setter(context, recipe) {\n  return recipe(context);\n}\nconst inspectionObservers = new WeakMap();\nfunction createStoreCore(logic, emits) {\n  let listeners;\n  const initialSnapshot = logic.getInitialSnapshot();\n  let currentSnapshot = initialSnapshot;\n  const atom = createAtom(currentSnapshot);\n  const emit = ev => {\n    if (!listeners) {\n      return;\n    }\n    const type = ev.type;\n    const typeListeners = listeners.get(type);\n    if (typeListeners) {\n      typeListeners.forEach(listener => listener(ev));\n    }\n  };\n  const transition = logic.transition;\n  function receive(event) {\n    let effects;\n    [currentSnapshot, effects] = transition(currentSnapshot, event);\n    inspectionObservers.get(store)?.forEach(observer => {\n      observer.next?.({\n        type: '@xstate.snapshot',\n        event,\n        snapshot: currentSnapshot,\n        actorRef: store,\n        rootId: store.sessionId\n      });\n    });\n    atom.set(currentSnapshot);\n    for (const effect of effects) {\n      if (typeof effect === 'function') {\n        effect();\n      } else {\n        // handle the inherent effect first\n        emits?.[effect.type]?.(effect);\n        emit(effect);\n      }\n    }\n  }\n  const store = {\n    get _snapshot() {\n      return atom._snapshot;\n    },\n    on(emittedEventType, handler) {\n      if (!listeners) {\n        listeners = new Map();\n      }\n      let eventListeners = listeners.get(emittedEventType);\n      if (!eventListeners) {\n        eventListeners = new Set();\n        listeners.set(emittedEventType, eventListeners);\n      }\n      const wrappedHandler = handler.bind(undefined);\n      eventListeners.add(wrappedHandler);\n      return {\n        unsubscribe() {\n          eventListeners.delete(wrappedHandler);\n        }\n      };\n    },\n    transition: logic.transition,\n    // TODO: fix this\n    sessionId: uniqueId(),\n    send(event) {\n      inspectionObservers.get(store)?.forEach(observer => {\n        observer.next?.({\n          type: '@xstate.event',\n          event,\n          sourceRef: undefined,\n          actorRef: store,\n          rootId: store.sessionId\n        });\n      });\n      receive(event);\n    },\n    getSnapshot() {\n      return currentSnapshot;\n    },\n    get() {\n      return atom.get();\n    },\n    getInitialSnapshot() {\n      return initialSnapshot;\n    },\n    subscribe: atom.subscribe.bind(atom),\n    [symbolObservable]() {\n      return this;\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.set(store, inspectionObservers.get(store) ?? new Set());\n      inspectionObservers.get(store).add(observer);\n      observer.next?.({\n        type: '@xstate.actor',\n        actorRef: store,\n        rootId: store.sessionId\n      });\n      observer.next?.({\n        type: '@xstate.snapshot',\n        snapshot: initialSnapshot,\n        event: {\n          type: '@xstate.init'\n        },\n        actorRef: store,\n        rootId: store.sessionId\n      });\n      return {\n        unsubscribe() {\n          return inspectionObservers.get(store)?.delete(observer);\n        }\n      };\n    },\n    trigger: new Proxy({}, {\n      get: (_, eventType) => {\n        return payload => {\n          store.send({\n            type: eventType,\n            ...payload\n          });\n        };\n      }\n    }),\n    select(selector, equalityFn = Object.is) {\n      return createAtom(() => selector(store.get().context), {\n        compare: equalityFn\n      });\n    }\n  };\n  return store;\n}\n\n/**\n * Creates a **store** that has its own internal state and can be sent events\n * that update its internal state based on transitions.\n *\n * @example\n *\n * ```ts\n * const store = createStore({\n *   context: { count: 0, name: 'Ada' },\n *   on: {\n *     inc: (context, event: { by: number }) => ({\n *       ...context,\n *       count: context.count + event.by\n *     })\n *   }\n * });\n *\n * store.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * store.send({ type: 'inc', by: 5 });\n * // Logs { context: { count: 5, name: 'Ada' }, status: 'active', ... }\n * ```\n *\n * @param config - The store configuration object\n * @param config.context - The initial state of the store\n * @param config.on - An object mapping event types to transition functions\n * @param config.emits - An object mapping emitted event types to handlers\n * @returns A store instance with methods to send events and subscribe to state\n *   changes\n */\n\nfunction createStore(definitionOrLogic) {\n  if ('transition' in definitionOrLogic) {\n    return createStoreCore(definitionOrLogic);\n  }\n  const transition = createStoreTransition(definitionOrLogic.on);\n  const logic = {\n    getInitialSnapshot: () => ({\n      status: 'active',\n      context: definitionOrLogic.context,\n      output: undefined,\n      error: undefined\n    }),\n    transition\n  };\n  return createStoreCore(logic, definitionOrLogic.emits);\n}\nfunction _createStoreConfig(definition) {\n  return definition;\n}\nconst createStoreConfig = _createStoreConfig;\n\n/**\n * Creates a `Store` with a provided producer (such as Immer's `producer(…)` A\n * store has its own internal state and can receive events.\n *\n * @example\n *\n * ```ts\n * import { produce } from 'immer';\n *\n * const store = createStoreWithProducer(produce, {\n *   context: { count: 0 },\n *   on: {\n *     inc: (context, event: { by: number }) => {\n *       context.count += event.by;\n *     }\n *   }\n * });\n *\n * store.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * store.send({ type: 'inc', by: 5 });\n * // Logs { context: { count: 5 }, status: 'active', ... }\n * ```\n */\nfunction createStoreWithProducer(producer, config) {\n  const transition = createStoreTransition(config.on, producer);\n  const logic = {\n    getInitialSnapshot: () => ({\n      status: 'active',\n      context: config.context,\n      output: undefined,\n      error: undefined\n    }),\n    transition\n  };\n  return createStoreCore(logic, config.emits);\n}\n/**\n * Creates a store transition function that handles state updates based on\n * events.\n *\n * @param transitions - An object mapping event types to transition functions\n * @param producer - Optional producer function (e.g., Immer's produce) for\n *   immutable updates\n * @returns A transition function that takes a snapshot and event and returns a\n *   new snapshot with effects\n */\nfunction createStoreTransition(transitions, producer) {\n  return (snapshot, event) => {\n    let currentContext = snapshot.context;\n    const assigner = transitions?.[event.type];\n    const effects = [];\n    const enqueue = {\n      emit: new Proxy({}, {\n        get: (_, eventType) => {\n          return payload => {\n            effects.push({\n              ...payload,\n              type: eventType\n            });\n          };\n        }\n      }),\n      effect: fn => {\n        effects.push(fn);\n      }\n    };\n    if (!assigner) {\n      return [snapshot, effects];\n    }\n    if (typeof assigner === 'function') {\n      currentContext = producer ? producer(currentContext, draftContext => assigner(draftContext, event, enqueue)) : setter(currentContext, draftContext => Object.assign({}, currentContext, assigner?.(draftContext, event,\n      // TODO: help me\n      enqueue)));\n    } else {\n      const partialUpdate = {};\n      for (const key of Object.keys(assigner)) {\n        const propAssignment = assigner[key];\n        partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(currentContext, event, enqueue) : propAssignment;\n      }\n      currentContext = Object.assign({}, currentContext, partialUpdate);\n    }\n    return [{\n      ...snapshot,\n      context: currentContext\n    }, effects];\n  };\n}\n\n/**\n * Generates a unique 6-character identifier.\n *\n * @returns A random string identifier\n */\nfunction uniqueId() {\n  return Math.random().toString(36).slice(6);\n}\n\nexport { createStore as a, createStoreWithProducer as b, createStoreTransition as c, createStoreConfig as d, createAtom as e, createAsyncAtom as f };\n", "import type { InboxMessageStorageEntry } from '../store.js';\n\nexport function mergeMessages(\n  existingMessages: InboxMessageStorageEntry[],\n  existingSeenIds: Set<string>,\n  newMessages: InboxMessageStorageEntry[],\n) {\n  const messages = [...existingMessages];\n  const seenMessageIds = new Set(existingSeenIds);\n\n  // Filter and add new messages\n  const newFilteredMessages = newMessages.filter((msg) => !seenMessageIds.has(msg.id));\n  for (const msg of newFilteredMessages) {\n    seenMessageIds.add(msg.id);\n  }\n\n  if (newFilteredMessages.length > 0) {\n    // Only sort if the last new message is earlier than the last existing message\n    if (messages.length > 0 && newFilteredMessages[0].createdAt < messages[messages.length - 1].createdAt) {\n      messages.push(...newFilteredMessages);\n      messages.sort((a, b) => (a.createdAt < b.createdAt ? -1 : 1));\n    } else {\n      messages.push(...newFilteredMessages);\n    }\n  }\n\n  return { messages, seenMessageIds };\n}\n", null, "import { Address, Hex } from 'viem'\nimport { Account, AccountType } from '../types'\n\nexport const getAccount = ({\n  address,\n  initCode,\n  type,\n  deployedOnChains = [],\n}: {\n  address: Address\n  initCode?: Hex\n  type: AccountType\n  deployedOnChains?: Number[]\n}): Account => {\n  return {\n    address,\n    initCode,\n    type,\n    deployedOnChains,\n  }\n}\n", "import { Address, Hex } from 'viem'\n\nexport const ACCOUNT_LOCKER_HOOK = '0x0000000000f6Ed8Be424d673c63eeFF8b9267420'\nexport const ACCOUNT_LOCKER_SOURCE_EXECUTOR =\n  '0x000000000043ff16d5776c7F0f65Ec485C17Ca04'\nexport const ACCOUNT_LOCKER_TARGET_EXECUTOR =\n  '0x0000000000E5a37279A001301A837a91b5de1D5E'\nexport const AUTO_SAVINGS_ADDRESS: Address =\n  '0x6AE48bD83B6bdc8489584Ea0814086f963d1BD95'\nexport const COLD_STORAGE_FLASHLOAN_ADDRESS: Address =\n  '0x4422dbC3D055D59ee08F4A4D60E1046A9aFb287f'\nexport const COLD_STORAGE_HOOK_ADDRESS: Address =\n  '0x7E31543b269632ddc55a23553f902f84C9DD8454'\nexport const DEADMAN_SWITCH_ADDRESS: Address =\n  '0x8bAdE54bca47199B6732EB2F92318DD666bdE413'\nexport const SMART_SESSIONS_FALLBACK_TARGET_FLAG: Address =\n  '0x0000000000000000000000000000000000000001'\nexport const SMART_SESSIONS_FALLBACK_TARGET_SELECTOR_FLAG: Hex = '0x00000001'\nexport const HOOK_MULTI_PLEXER_ADDRESS: Address =\n  '0xF6782ed057F95f334D04F0Af1Af4D14fb84DE549'\nexport const INDEXER_URL =\n  'https://indexer.bigdevenergy.link/c03b38d/v1/graphql'\nexport const MULTI_FACTOR_VALIDATOR_ADDRESS: Address =\n  '0xf6bDf42c9BE18cEcA5C06c42A43DAf7FBbe7896b'\nexport const OWNABLE_EXECUTOR_ADDRESS: Address =\n  '0x4Fd8d57b94966982B62e9588C27B4171B55E8354'\nexport const OWNABLE_VALIDATOR_ADDRESS: Address =\n  '0x2483DA3A338895199E5e538530213157e931Bf06'\nexport const REGISTRY_ADDRESS: Address =\n  '0x000000000069E2a187AEFFb852bF3cCdC95151B2'\nexport const REGISTRY_HOOK_ADDRESS: Address =\n  '0x0ac6160DBA30d665cCA6e6b6a2CDf147DC3dED22'\nexport const SCHEDULED_ORDERS_EXECUTOR_ADDRESS: Address =\n  '0x40dc90D670C89F322fa8b9f685770296428DCb6b'\nexport const SCHEDULED_TRANSFERS_EXECUTOR_ADDRESS: Address =\n  '0xA8E374779aeE60413c974b484d6509c7E4DDb6bA'\nexport const SMART_SESSIONS_ADDRESS: Address =\n  '0x00000000002B0eCfbD0496EE71e01257dA0E37DE'\nexport const SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS: Address =\n  '0xBad7E91C4F2803978cd6c7C3Fe80B5Fd7f7B0b50'\nexport const SOCIAL_RECOVERY_ADDRESS: Address =\n  '0xA04D053b3C8021e8D5bF641816c42dAA75D8b597'\nexport const SPENDING_LIMITS_POLICY_ADDRESS: Address =\n  '0x00000088D48cF102A8Cdb0137A9b173f957c6343'\nexport const TIME_FRAME_POLICY_ADDRESS: Address =\n  '0x8177451511dE0577b911C254E9551D981C26dc72'\nexport const SUDO_POLICY_ADDRESS: Address =\n  '0x0000003111cD8e92337C100F22B7A9dbf8DEE301'\nexport const UNIVERSAL_ACTION_POLICY_ADDRESS: Address =\n  '0x0000006DDA6c463511C4e9B05CFc34C1247fCF1F'\nexport const UNIVERSAL_EMAIL_RECOVERY_ADDRESS: Address =\n  '0x636632FA22052d2a4Fb6e3Bab84551B620b9C1F9'\nexport const USAGE_LIMIT_POLICY_ADDRESS: Address =\n  '0x1F34eF8311345A3A4a4566aF321b313052F51493'\nexport const VALUE_LIMIT_POLICY_ADDRESS: Address =\n  '0x730DA93267E7E513e932301B47F2ac7D062abC83'\nexport const WEBAUTHN_VALIDATOR_ADDRESS: Address =\n  '0x2f167e55d42584f65e2e30a748f41ee75a311414'\n\nexport const DEFAULT_CONSTANTS = {\n  ACCOUNT_LOCKER_HOOK,\n  ACCOUNT_LOCKER_SOURCE_EXECUTOR,\n  ACCOUNT_LOCKER_TARGET_EXECUTOR,\n  AUTO_SAVINGS_ADDRESS,\n  COLD_STORAGE_FLASHLOAN_ADDRESS,\n  COLD_STORAGE_HOOK_ADDRESS,\n  DEADMAN_SWITCH_ADDRESS,\n  SMART_SESSIONS_FALLBACK_TARGET_FLAG,\n  SMART_SESSIONS_FALLBACK_TARGET_SELECTOR_FLAG,\n  HOOK_MULTI_PLEXER_ADDRESS,\n  INDEXER_URL,\n  MULTI_FACTOR_VALIDATOR_ADDRESS,\n  OWNABLE_EXECUTOR_ADDRESS,\n  OWNABLE_VALIDATOR_ADDRESS,\n  REGISTRY_ADDRESS,\n  REGISTRY_HOOK_ADDRESS,\n  SCHEDULED_ORDERS_EXECUTOR_ADDRESS,\n  SCHEDULED_TRANSFERS_EXECUTOR_ADDRESS,\n  SMART_SESSIONS_ADDRESS,\n  SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS,\n  SOCIAL_RECOVERY_ADDRESS,\n  SPENDING_LIMITS_POLICY_ADDRESS,\n  TIME_FRAME_POLICY_ADDRESS,\n  UNIVERSAL_ACTION_POLICY_ADDRESS,\n  SUDO_POLICY_ADDRESS,\n  UNIVERSAL_EMAIL_RECOVERY_ADDRESS,\n  USAGE_LIMIT_POLICY_ADDRESS,\n  VALUE_LIMIT_POLICY_ADDRESS,\n  WEBAUTHN_VALIDATOR_ADDRESS,\n} as const\n\nexport let GLOBAL_CONSTANTS = {\n  ...DEFAULT_CONSTANTS,\n}\n\nexport type Constants = typeof GLOBAL_CONSTANTS\n\nexport const setGlobalConstants = (overrides: Partial<Constants>): void => {\n  GLOBAL_CONSTANTS = { ...GLOBAL_CONSTANTS, ...overrides }\n}\n\nexport const getModifiedConstants = (\n  overrides?: Partial<Constants>,\n): Constants => {\n  return { ...GLOBAL_CONSTANTS, ...overrides }\n}\n\nexport const restoreGlobalConstants = (): void => {\n  GLOBAL_CONSTANTS = { ...DEFAULT_CONSTANTS }\n}\n", "import { Address, PublicClient } from 'viem'\nimport { Account } from '../../account'\nimport { GLOBAL_CONSTANTS } from '../../constants'\n\nconst query = `\n    query ($smartAccount: String, $chainId: Int) {\n       SmartAccount_ModuleQuery (where: { smartAccount: { _eq: $smartAccount }, isInstalled: { _eq: true }, chainId: { _eq: $chainId }}) {\n        moduleAddress,\n        moduleTypeId\n      }\n    }\n  `\n\nexport const getInstalledModules = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<Address[]> => {\n  const variables = {\n    smartAccount: account.address,\n    chainId: await client.getChainId(),\n  }\n\n  const response = await fetch(GLOBAL_CONSTANTS.INDEXER_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const responseBody = await response.json()\n\n  if (response.ok) {\n    return responseBody.data.SmartAccount_ModuleQuery.map(\n      (module: any) => module.module,\n    )\n  } else {\n    throw new Error(\n      `Error: ${responseBody.errors\n        .map((error: any) => error.message)\n        .join(', ')}`,\n    )\n  }\n}\n", "export const factoryAbi = [\n  'function createAccount(bytes32 salt,bytes calldata initCode) returns (address)',\n]\n\nexport const bootstrapAbi = [\n  'function singleInitMSA(address validator, bytes calldata data)',\n  'function initMSA(BootstrapConfig[] calldata $valdiators,BootstrapConfig[] calldata $executors,BootstrapConfig calldata _hook,BootstrapConfig[] calldata _fallbacks)',\n  'struct BootstrapConfig {address module;bytes data;}',\n]\n\nexport const accountAbi = [\n  'function getActiveHook() external view returns (address hook)',\n  'function getValidatorsPaginated(address cursor,uint256 size) returns (address[] memory, address)',\n  'function getExecutorsPaginated(address cursor,uint256 size) returns (address[] memory, address)',\n  'function installModule(uint256 moduleTypeId,address module,bytes calldata initData)',\n  'function uninstallModule(uint256 moduleTypeId,address module,bytes calldata deInitData)',\n  'function isModuleInstalled(uint256 moduleTypeId,address module,bytes calldata additionalContext) returns (bool)',\n]\n", "import { Address } from 'viem'\n\nexport const SENTINEL_ADDRESS: Address =\n  '0x0000000000000000000000000000000000000001'\n\nexport const INDEXER_URL =\n  'https://indexer.bigdevenergy.link/c03b38d/v1/graphql'\n", "import { Address, parseAbi, PublicClient, zeroAddress } from 'viem'\nimport { Account } from '../../types'\nimport { getInstalledModules as getInstalledModulesQuery } from '../../../common/queries/account'\nimport { accountAbi } from '../constants/abis'\nimport { SENTINEL_ADDRESS } from '../../../common/constants'\n\nexport const getInstalledModules = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<Address[]> => {\n  let installedModules: Address[] = []\n  try {\n    installedModules = await getInstalledModulesQuery({\n      account,\n      client,\n    })\n  } catch (e) {}\n  if (installedModules.length === 0) {\n    const installedValidators = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getValidatorsPaginated',\n      args: [SENTINEL_ADDRESS, 100],\n    })) as Address[]\n    for (const validator of installedValidators) {\n      installedModules.push(validator)\n    }\n\n    const installedExecutors = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getExecutorsPaginated',\n      args: [SENTINEL_ADDRESS, 100],\n    })) as Address[]\n\n    for (const executor of installedExecutors) {\n      installedModules.push(executor)\n    }\n\n    const installedHook = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getActiveHook',\n    })) as Address\n\n    if (installedHook != zeroAddress) {\n      installedModules.push(installedHook)\n    }\n  }\n  return installedModules\n}\n", "import { SafeHookType } from '../account/safe/types'\nimport { Address, Hex } from 'viem'\n\nexport type ModuleType = 'validator' | 'executor' | 'fallback' | 'hook'\n\nexport type Module = {\n  address: Address\n  // note: this parameter will be deprecated in the next major version; use address instead\n  module: Address\n  initData: Hex\n  deInitData: Hex\n  additionalContext: Hex\n  type: ModuleType\n\n  /* ---- kernel module params ---- */\n  // these param needed for installing validator, executor, fallback handler\n  hook?: Address\n  /* ---- end kernel module params ---- */\n\n  /* ---- safe module params ---- */\n\n  // these two params needed for installing hooks\n  hookType?: SafeHookType\n  selector?: Hex\n\n  /* ---- safe and nexus module params ---- */\n\n  // these two params needed for installing fallback handlers\n  functionSig?: Hex\n  callType?: CallType\n\n  /* ---- end safe module params ---- */\n}\n\ntype ModuleTypeIds = {\n  [index in ModuleType]: 1 | 2 | 3 | 4\n}\n\nexport const moduleTypeIds: ModuleTypeIds = {\n  validator: 1,\n  executor: 2,\n  fallback: 3,\n  hook: 4,\n}\n\nexport enum CallType {\n  CALLTYPE_SINGLE = '0x00',\n  CALLTYPE_BATCH = '0x01',\n  CALLTYPE_STATIC = '0xFE',\n  CALLTYPE_DELEGATECALL = '0xFF',\n}\n\nexport type {\n  ERC20Token,\n  Order,\n  RecurringOrder,\n  Schedule,\n} from './scheduled-orders'\n\nexport type { SigHookInit } from './hook-multi-plexer'\n\nexport type { Validator } from './multi-factor-validator'\n", "import { Address, PublicClient } from 'viem'\n\nexport const isContract = async ({\n  client,\n  address,\n}: {\n  client: PublicClient\n  address: Address\n}) => {\n  // todo: upgrade from getBytecode\n  const bytecode = await client.getBytecode({\n    address: address,\n  })\n  return bytecode && bytecode !== '0x'\n}\n", "import { PublicClient, encodeAbiParameters, parseAbi } from 'viem'\nimport { Account } from '../../types'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { isContract } from '../../../common/utils'\nimport { accountAbi } from '../constants/abis'\n\nexport const isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<boolean> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return await _isModuleInstalled({ client, account, module })\n    case 'fallback':\n      if (!module.selector) {\n        throw new Error(\n          `Selector param is required for module type ${module.type}`,\n        )\n      }\n      return await _isModuleInstalled({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<boolean> => {\n  try {\n    if (await isContract({ client, address: account.address })) {\n      return (await client.readContract({\n        address: account.address,\n        abi: parseAbi(accountAbi),\n        functionName: 'isModuleInstalled',\n        args: [\n          moduleTypeIds[module.type],\n          module.module,\n          module.selector\n            ? encodeAbiParameters(\n                [{ name: 'functionSignature', type: 'bytes4' }],\n                [module.selector],\n              )\n            : '0x',\n        ],\n      })) as boolean\n    }\n    return false\n  } catch (e) {\n    return false\n  }\n}\n", "import { Account, Execution } from '../../types'\nimport { PublicClient, encodeFunctionData, encodePacked, parseAbi } from 'viem'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { accountAbi } from '../constants/abis'\n\nexport const installModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return _installModule({ client, account, module })\n    case 'fallback':\n      if (!module.selector || !module.callType) {\n        throw new Error(\n          `Selector and callType params are required for module type ${module.type}`,\n        )\n      }\n      return installFallback({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _installModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        module.initData || '0x',\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nasync function installFallback({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> {\n  const executions: Execution[] = []\n\n  const isInstalled = await isModuleInstalled({\n    client,\n    account,\n    module,\n  })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        encodePacked(\n          ['bytes4', 'bytes1', 'bytes'],\n          [module.selector!, module.callType!, module.initData ?? '0x'],\n        ),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n", "import { PublicClient, Address, getAddress } from 'viem'\nimport { Module } from '..'\nimport { SENTINEL_ADDRESS } from './constants'\nimport { getInstalledModules } from './queries'\nimport { Account } from '../account'\n\nexport const getPreviousModule = async ({\n  account,\n  module,\n  client,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Address> => {\n  let installedModules = await getInstalledModules({\n    client,\n    account,\n  })\n  const index = installedModules.indexOf(getAddress(module.module))\n  if (index === 0) {\n    return SENTINEL_ADDRESS\n  } else if (index > 0) {\n    return installedModules[index - 1]\n  } else {\n    throw new Error(`Module ${module.module} not found in installed modules`)\n  }\n}\n", "import {\n  PublicClient,\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodePacked,\n  parseAbi,\n} from 'viem'\nimport { Account, Execution } from '../../types'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { accountAbi } from '../constants/abis'\nimport { getPreviousModule } from '../../../common'\n\nexport const uninstallModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return _uninstallModule({ client, account, module })\n    case 'fallback':\n      if (!module.selector) {\n        throw new Error(\n          `Selector param is required for module type ${module.type}`,\n        )\n      }\n      return _uninstallFallback({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _uninstallModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (isInstalled) {\n    let moduleData = module.deInitData || '0x'\n    if (module.type === 'validator' || module.type === 'executor') {\n      const prev = await getPreviousModule({ client, account, module })\n      moduleData = encodeAbiParameters(\n        [\n          { name: 'prev', type: 'address' },\n          { name: 'disableModuleData', type: 'bytes' },\n        ],\n        [prev, moduleData],\n      )\n    }\n\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [BigInt(moduleTypeIds[module.type]), module.module, moduleData],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nconst _uninstallFallback = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n\n  const isInstalled = await isModuleInstalled({\n    client,\n    account,\n    module: {\n      ...module,\n      additionalContext: encodeAbiParameters(\n        [{ name: 'functionSignature', type: 'bytes4' }],\n        [module.selector!],\n      ),\n    },\n  })\n\n  if (isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        encodePacked(\n          ['bytes4', 'bytes'],\n          [module.selector!, module.deInitData],\n        ),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n", "import { ERC1271SignatureParams } from '../../types'\nimport { encodePacked, Hex } from 'viem'\n\nexport const encode1271Signature = ({\n  account,\n  validator,\n  signature,\n}: ERC1271SignatureParams): Hex => {\n  return encodePacked(['address', 'bytes'], [validator, signature])\n}\n", "import { ERC1271HashParams } from '../../types'\nimport { Hex } from 'viem'\n\nexport const encode1271Hash = ({\n  account,\n  chainId,\n  validator,\n  hash,\n}: ERC1271HashParams): Hex => {\n  return hash\n}\n", "import { Account } from '../../types'\nimport { Hex, encodePacked } from 'viem'\nimport { Module, CallType } from '../../../module/types'\n\nexport const encodeModuleInstallationData = ({\n  account,\n  module,\n}: {\n  account: Account\n  module: Module\n}): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return module.initData\n    case 'fallback':\n      return encodePacked(\n        ['bytes4', 'bytes1', 'bytes'],\n        [\n          module.selector!,\n          module.callType ?? CallType.CALLTYPE_SINGLE,\n          module.initData,\n        ],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Account } from '../../types'\nimport { Hex, PublicClient, encodePacked, encodeAbiParameters } from 'viem'\nimport { Module, CallType } from '../../../module/types'\nimport { getPreviousModule } from '../../../common'\n\nexport const encodeModuleUninstallationData = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Hex> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      const prev = await getPreviousModule({ client, account, module })\n      return encodeAbiParameters(\n        [\n          { name: 'prev', type: 'address' },\n          { name: 'disableModuleData', type: 'bytes' },\n        ],\n        [prev, module.deInitData],\n      )\n\n    case 'hook':\n      return module.deInitData\n    case 'fallback':\n      return encodePacked(\n        ['bytes4', 'bytes'],\n        [module.selector!, module.deInitData],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Module, ModuleType } from '../module/types'\nimport { Account, AccountType } from './types'\nimport { isAddress } from 'viem'\n\nexport function isAccount(obj: unknown): obj is Account {\n  const account = obj as Account\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    isAddress(account.address, { strict: false }) &&\n    (account.initCode === undefined ||\n      (account.initCode !== undefined &&\n        typeof account.initCode === 'string' &&\n        account.initCode.startsWith('0x'))) &&\n    typeof account.type === 'string' &&\n    isAccountType(account.type) &&\n    Array.isArray(account.deployedOnChains) &&\n    account.deployedOnChains.every((chainId) => typeof chainId === 'number')\n  )\n}\n\nfunction isAccountType(value: unknown): value is AccountType {\n  const validTypes: AccountType[] = [\n    'erc7579-implementation',\n    'kernel',\n    'safe',\n    'nexus',\n  ]\n  return typeof value === 'string' && validTypes.includes(value as AccountType)\n}\n\nexport function isModule(object: unknown): object is Module {\n  const module = object as Module\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    isAddress(module.address, { strict: false }) &&\n    typeof module.initData === 'string' &&\n    module.initData.startsWith('0x') &&\n    typeof module.deInitData === 'string' &&\n    module.deInitData.startsWith('0x') &&\n    typeof module.additionalContext === 'string' &&\n    module.additionalContext.startsWith('0x') &&\n    isModuleType(module.type)\n  )\n}\n\nconst isModuleType = (value: unknown): value is ModuleType => {\n  const validTypes: ModuleType[] = ['validator', 'executor', 'fallback', 'hook']\n  return typeof value === 'string' && validTypes.includes(value as ModuleType)\n}\n", "import { Address, pad } from 'viem'\nimport { Module } from '../../../module/types'\nimport { isModule } from '../../../account/utils'\n\nexport const encodeValidatorNonce = ({\n  validator,\n}: {\n  validator: Module | Address\n}) => {\n  return BigInt(\n    pad(isModule(validator) ? validator.address : validator, {\n      dir: 'right',\n      size: 24,\n    }),\n  )\n}\n", "import { Address, Hex, PublicClient } from 'viem'\nimport {\n  Account,\n  Execution,\n  ERC1271SignatureParams,\n  ERC1271HashParams,\n} from '../types'\nimport { Module, ModuleType } from '../../module/types'\nimport { getInstalledModules } from './api/getInstalledModules'\nimport { installModule } from './api/installModule'\nimport { isModuleInstalled } from './api/isModuleInstalled'\nimport { uninstallModule } from './api/uninstallModule'\nimport { encode1271Signature } from './api/encode1271Signature'\nimport { encode1271Hash } from './api/encode1271Hash'\nimport { encodeModuleInstallationData } from './api/encodeModuleInstallationData'\nimport { encodeModuleUninstallationData } from './api/encodeModuleUninstallationData'\nimport { encodeValidatorNonce } from './api/encodeValidatorNonce'\n\nexport class ERC7579Implementation {\n  getInstalledModules = async ({\n    account,\n    client,\n  }: {\n    client: PublicClient\n    account: Account\n    moduleTypes?: ModuleType[]\n  }): Promise<Address[]> => {\n    return getInstalledModules({ account, client })\n  }\n\n  installModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Execution[]> => {\n    return installModule({ client, account, module })\n  }\n\n  isModuleInstalled = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<boolean> => {\n    return isModuleInstalled({ client, account, module })\n  }\n\n  uninstallModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Execution[]> => {\n    return uninstallModule({ client, account, module })\n  }\n\n  encode1271Signature = ({\n    account,\n    validator,\n    signature,\n  }: ERC1271SignatureParams): Hex => {\n    return encode1271Signature({ account, validator, signature })\n  }\n\n  encode1271Hash = ({\n    account,\n    chainId,\n    validator,\n    hash,\n  }: ERC1271HashParams): Hex => {\n    return encode1271Hash({ account, chainId, validator, hash })\n  }\n\n  encodeModuleInstallationData = ({\n    account,\n    module,\n  }: {\n    account: Account\n    module: Module\n  }): Hex => {\n    return encodeModuleInstallationData({ account, module })\n  }\n\n  encodeModuleUninstallationData = async ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Hex> => {\n    return await encodeModuleUninstallationData({ client, account, module })\n  }\n\n  encodeValidatorNonce = ({\n    validator,\n  }: {\n    validator: Module | Address\n  }): bigint => {\n    return encodeValidatorNonce({ validator })\n  }\n}\n", "import { Address, PublicClient } from 'viem'\nimport { Account } from '../../types'\nimport { getInstalledModules as getInstalledModulesQuery } from '../../../common/queries'\n\nexport const getInstalledModules = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<Address[]> => {\n  return getInstalledModulesQuery({ account, client })\n}\n", "import { accountAbi as erc7579Abi } from '../../../account/erc7579-implementation/constants/abis'\n\nexport const accountAbi = [...erc7579Abi]\n", "import { CallType } from '../../module/types'\nimport { Address, Hex } from 'viem'\n\nexport type KernelModule = {\n  address: Address\n  module: Address\n  initData: Hex\n  deInitData: Hex\n  additionalContext: Hex\n  type: KernelModuleType\n  hook?: Address\n  selector?: Hex\n  callType?: CallType\n}\n\nexport type KernelModuleType =\n  | 'validator'\n  | 'executor'\n  | 'fallback'\n  | 'hook'\n  | 'policy'\n  | 'signer'\n\ntype ModuleTypeIds = {\n  [index in KernelModuleType]: number\n}\n\nexport const kernelModuleTypeIds: ModuleTypeIds = {\n  validator: 1,\n  executor: 2,\n  fallback: 3,\n  hook: 4,\n  policy: 5,\n  signer: 6,\n}\n", "import { PublicClient, encodePacked, parseAbi } from 'viem'\nimport { Account } from '../../types'\nimport { isContract } from '../../../common/utils'\nimport { accountAbi } from '../constants/abis'\nimport { KernelModule, kernelModuleTypeIds } from '../types'\n\nexport const isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<boolean> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n    case 'policy':\n    case 'signer':\n      return await _isModuleInstalled({ client, account, module })\n    case 'fallback':\n      return await _isFallbackInstalled({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<boolean> => {\n  if (await isContract({ client, address: account.address })) {\n    return (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'isModuleInstalled',\n      args: [kernelModuleTypeIds[module.type], module.module, module.initData],\n    })) as boolean\n  }\n\n  return false\n}\n\nconst _isFallbackInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<boolean> => {\n  if (!module.selector) {\n    throw new Error(`Selector is required for module type ${module.type}`)\n  }\n\n  if (await isContract({ client, address: account.address })) {\n    return (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'isModuleInstalled',\n      args: [\n        kernelModuleTypeIds[module.type],\n        module.module,\n        encodePacked(['bytes4'], [module.selector!]),\n      ],\n    })) as boolean\n  }\n\n  return false\n}\n", "import { Account, Execution } from '../../types'\nimport {\n  PublicClient,\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodePacked,\n  parseAbi,\n  zeroAddress,\n} from 'viem'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { accountAbi } from '../constants/abis'\nimport { KernelModule, kernelModuleTypeIds } from '../types'\n\nexport const installModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return _installModule({ client, account, module, withHook: true })\n    case 'hook':\n    case 'policy':\n    case 'signer':\n      return _installModule({ client, account, module, withHook: false })\n    case 'fallback':\n      return installFallback({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _installModule = async ({\n  client,\n  account,\n  module,\n  withHook = false,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n  withHook: boolean\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(kernelModuleTypeIds[module.type]),\n        module.module,\n        withHook\n          ? encodePacked(\n              ['address', 'bytes'],\n              [\n                module.hook ?? zeroAddress,\n                encodeAbiParameters(\n                  [{ type: 'bytes' }, { type: 'bytes' }],\n                  [module.initData || '0x', '0x'],\n                ),\n              ],\n            )\n          : module.initData || '0x',\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nasync function installFallback({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<Execution[]> {\n  if (!module.selector || !module.callType) {\n    throw new Error(\n      `Hook, selector and callType are required for module type ${module.type}`,\n    )\n  }\n\n  const executions: Execution[] = []\n\n  const isInstalled = await isModuleInstalled({\n    client,\n    account,\n    module,\n  })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(kernelModuleTypeIds[module.type]),\n        module.module,\n        encodePacked(\n          ['bytes4', 'address', 'bytes'],\n          [\n            module.selector,\n            module.hook ?? zeroAddress,\n            encodeAbiParameters(\n              [{ type: 'bytes' }, { type: 'bytes' }],\n              [\n                encodePacked(\n                  ['bytes1', 'bytes'],\n                  [module.callType, module.initData || '0x'],\n                ),\n                '0x',\n              ],\n            ),\n          ],\n        ),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n", "import {\n  PublicClient,\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodePacked,\n  parseAbi,\n} from 'viem'\nimport { Account, Execution } from '../../types'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { accountAbi } from '../constants/abis'\nimport { KernelModule, kernelModuleTypeIds } from '../types'\n\nexport const uninstallModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n    case 'policy':\n    case 'signer':\n      return _uninstallModule({ client, account, module })\n    case 'fallback':\n      return _uninstallFallback({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _uninstallModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(kernelModuleTypeIds[module.type]),\n        module.module,\n        module.deInitData,\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nconst _uninstallFallback = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}) => {\n  const executions: Execution[] = []\n\n  const isInstalled = await isModuleInstalled({\n    client,\n    account,\n    module: {\n      ...module,\n      initData:\n        encodeAbiParameters(\n          [{ name: 'functionSignature', type: 'bytes4' }],\n          [module.selector!],\n        ) || '0x',\n    },\n  })\n\n  if (isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(kernelModuleTypeIds[module.type]),\n        module.module,\n        encodePacked(\n          ['bytes4', 'bytes'],\n          [module.selector!, module.deInitData],\n        ),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n", "import { ERC1271SignatureParams } from '../../types'\nimport { encodePacked, Hex } from 'viem'\n\nexport const encode1271Signature = ({\n  account,\n  validator,\n  signature,\n}: ERC1271SignatureParams): Hex => {\n  return encodePacked(\n    ['bytes1', 'address', 'bytes'],\n    ['0x01', validator, signature],\n  )\n}\n", "import { ERC1271HashParams } from '../../types'\nimport { Hex } from 'viem'\n\nexport const encode1271Hash = ({\n  account,\n  chainId,\n  validator,\n  hash,\n}: ERC1271HashParams): Hex => {\n  return hash\n}\n", "import { Account } from '../../types'\nimport { Hex, encodePacked, encodeAbiParameters, zeroAddress } from 'viem'\nimport { KernelModule } from '../types'\n\nexport const encodeModuleInstallationData = ({\n  account,\n  module,\n}: {\n  account: Account\n  module: KernelModule\n}): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return encodePacked(\n        ['address', 'bytes'],\n        [\n          module.hook ?? zeroAddress,\n          encodeAbiParameters(\n            [{ type: 'bytes' }, { type: 'bytes' }],\n            [module.initData, '0x'],\n          ),\n        ],\n      )\n    case 'hook':\n      return module.initData\n    case 'fallback':\n      return encodePacked(\n        ['bytes4', 'address', 'bytes'],\n        [\n          module.selector!,\n          module.hook ?? zeroAddress,\n          encodeAbiParameters(\n            [{ type: 'bytes' }, { type: 'bytes' }],\n            [\n              encodePacked(\n                ['bytes1', 'bytes'],\n                [module.callType!, module.initData],\n              ),\n              '0x',\n            ],\n          ),\n        ],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Account } from '../../types'\nimport { Hex, PublicClient, encodePacked } from 'viem'\nimport { KernelModule } from '../types'\n\nexport const encodeModuleUninstallationData = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: KernelModule\n}): Promise<Hex> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return module.deInitData\n    case 'fallback':\n      return encodePacked(\n        ['bytes4', 'bytes'],\n        [module.selector!, module.deInitData],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { isAddress } from 'viem'\nimport { KernelModule, KernelModuleType } from '../types'\n\nexport function isKernelModule(object: unknown): object is KernelModule {\n  const module = object as KernelModule\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    isAddress(module.address, { strict: false }) &&\n    typeof module.initData === 'string' &&\n    module.initData.startsWith('0x') &&\n    typeof module.deInitData === 'string' &&\n    module.deInitData.startsWith('0x') &&\n    typeof module.additionalContext === 'string' &&\n    module.additionalContext.startsWith('0x') &&\n    isKernelModuleType(module.type)\n  )\n}\n\nconst isKernelModuleType = (value: unknown): value is KernelModuleType => {\n  const validTypes: KernelModuleType[] = [\n    'validator',\n    'executor',\n    'fallback',\n    'hook',\n    'policy',\n    'signer',\n  ]\n  return (\n    typeof value === 'string' && validTypes.includes(value as KernelModuleType)\n  )\n}\n", "import { pad, encodePacked, Address } from 'viem'\nimport { KernelModule } from '../types'\nimport { isKernelModule } from './utils'\n\nexport const encodeValidatorNonce = ({\n  validator,\n}: {\n  validator: KernelModule | Address\n}) => {\n  return BigInt(\n    pad(\n      encodePacked(\n        ['bytes1', 'bytes1', 'address'],\n        [\n          '0x00',\n          '0x00',\n          isKernelModule(validator) ? validator.address : validator,\n        ],\n      ),\n      {\n        dir: 'right',\n        size: 24,\n      },\n    ),\n  )\n}\n", "import { Address, Hex, PublicClient } from 'viem'\nimport {\n  Account,\n  Execution,\n  ERC1271SignatureParams,\n  ERC1271HashParams,\n} from '../types'\nimport { getInstalledModules } from './api/getInstalledModules'\nimport { installModule } from './api/installModule'\nimport { isModuleInstalled } from './api/isModuleInstalled'\nimport { uninstallModule } from './api/uninstallModule'\nimport { KernelModule, KernelModuleType } from './types'\nimport { encode1271Signature } from './api/encode1271Signature'\nimport { encode1271Hash } from './api/encode1271Hash'\nimport { encodeModuleInstallationData } from './api/encodeModuleInstallationData'\nimport { encodeModuleUninstallationData } from './api/encodeModuleUninstallationData'\nimport { encodeValidatorNonce } from './api/encodeValidatorNonce'\n\nexport class KernelImplementation {\n  getInstalledModules = async ({\n    account,\n    client,\n  }: {\n    client: PublicClient\n    account: Account\n    moduleTypes?: KernelModuleType[]\n  }): Promise<Address[]> => {\n    return getInstalledModules({ account, client })\n  }\n\n  installModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: KernelModule\n  }): Promise<Execution[]> => {\n    return installModule({ client, account, module })\n  }\n\n  isModuleInstalled = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: KernelModule\n  }): Promise<boolean> => {\n    return isModuleInstalled({ client, account, module })\n  }\n\n  uninstallModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: KernelModule\n  }): Promise<Execution[]> => {\n    return uninstallModule({ client, account, module })\n  }\n\n  encode1271Signature = ({\n    account,\n    validator,\n    signature,\n  }: ERC1271SignatureParams): Hex => {\n    return encode1271Signature({ account, validator, signature })\n  }\n\n  encode1271Hash = ({\n    account,\n    chainId,\n    validator,\n    hash,\n  }: ERC1271HashParams): Hex => {\n    return encode1271Hash({ account, chainId, validator, hash })\n  }\n\n  encodeModuleInstallationData = ({\n    account,\n    module,\n  }: {\n    account: Account\n    module: KernelModule\n  }): Hex => {\n    return encodeModuleInstallationData({ account, module })\n  }\n\n  encodeModuleUninstallationData = async ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: KernelModule\n  }): Promise<Hex> => {\n    return await encodeModuleUninstallationData({ client, account, module })\n  }\n\n  encodeValidatorNonce = ({\n    validator,\n  }: {\n    validator: KernelModule | Address\n  }): bigint => {\n    return encodeValidatorNonce({ validator })\n  }\n}\n", "export const factoryAbi = [\n  'function createAccount(bytes32 salt,bytes calldata initCode) returns (address)',\n]\n\nexport const bootstrapAbi = [\n  'function singleInitMSA(address validator, bytes calldata data)',\n  'function initMSA(BootstrapConfig[] calldata $valdiators,BootstrapConfig[] calldata $executors,BootstrapConfig calldata _hook,BootstrapConfig[] calldata _fallbacks)',\n  'struct BootstrapConfig {address module;bytes data;}',\n]\n\nexport const accountAbi = [\n  'function getActiveHook() external view returns (address hook)',\n  'function getValidatorsPaginated(address cursor,uint256 size) returns (address[] memory, address)',\n  'function getExecutorsPaginated(address cursor,uint256 size) returns (address[] memory, address)',\n  'function installModule(uint256 moduleTypeId,address module,bytes calldata initData)',\n  'function uninstallModule(uint256 moduleTypeId,address module,bytes calldata deInitData)',\n  'function isModuleInstalled(uint256 moduleTypeId,address module,bytes calldata additionalContext) returns (bool)',\n]\n", "import { Address, parseAbi, PublicClient, zeroAddress } from 'viem'\nimport { Account } from '../../types'\nimport { getInstalledModules as getInstalledModulesQuery } from '../../../common/queries/account'\nimport { accountAbi } from '../constants/abis'\nimport { SENTINEL_ADDRESS } from '../../../common/constants'\n\nexport const getInstalledModules = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<Address[]> => {\n  let installedModules: Address[] = []\n  try {\n    installedModules = await getInstalledModulesQuery({\n      account,\n      client,\n    })\n  } catch (e) {}\n  if (installedModules.length === 0) {\n    const installedValidators = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getValidatorsPaginated',\n      args: [SENTINEL_ADDRESS, 100],\n    })) as Address[]\n    for (const validator of installedValidators) {\n      installedModules.push(validator)\n    }\n\n    const installedExecutors = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getExecutorsPaginated',\n      args: [SENTINEL_ADDRESS, 100],\n    })) as Address[]\n\n    for (const executor of installedExecutors) {\n      installedModules.push(executor)\n    }\n\n    const installedHook = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getActiveHook',\n    })) as Address\n\n    if (installedHook != zeroAddress) {\n      installedModules.push(installedHook)\n    }\n  }\n  return installedModules\n}\n", "import { PublicClient, encodeAbiParameters, parseAbi } from 'viem'\nimport { Account } from '../../types'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { isContract } from '../../../common/utils'\nimport { accountAbi } from '../constants/abis'\n\nexport const isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<boolean> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return await _isModuleInstalled({ client, account, module })\n    case 'fallback':\n      if (!module.selector) {\n        throw new Error(\n          `Selector param is required for module type ${module.type}`,\n        )\n      }\n      return await _isModuleInstalled({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<boolean> => {\n  try {\n    if (await isContract({ client, address: account.address })) {\n      return (await client.readContract({\n        address: account.address,\n        abi: parseAbi(accountAbi),\n        functionName: 'isModuleInstalled',\n        args: [\n          moduleTypeIds[module.type],\n          module.module,\n          module.selector\n            ? encodeAbiParameters(\n                [{ name: 'functionSignature', type: 'bytes4' }],\n                [module.selector],\n              )\n            : '0x',\n        ],\n      })) as boolean\n    }\n    return false\n  } catch (e) {\n    return false\n  }\n}\n", "import { Account, Execution } from '../../types'\nimport { PublicClient, encodeFunctionData, encodePacked, parseAbi } from 'viem'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { accountAbi } from '../constants/abis'\n\nexport const installModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return _installModule({ client, account, module })\n    case 'fallback':\n      if (!module.selector || !module.callType) {\n        throw new Error(\n          `Selector and callType params are required for module type ${module.type}`,\n        )\n      }\n      return installFallback({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _installModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        module.initData || '0x',\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nasync function installFallback({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> {\n  const executions: Execution[] = []\n\n  const isInstalled = await isModuleInstalled({\n    client,\n    account,\n    module,\n  })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        encodePacked(\n          ['bytes4', 'bytes1', 'bytes'],\n          [module.selector!, module.callType!, module.initData ?? '0x'],\n        ),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n", "import {\n  PublicClient,\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodePacked,\n  parseAbi,\n} from 'viem'\nimport { Account, Execution } from '../../types'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { accountAbi } from '../constants/abis'\nimport { getPreviousModule } from '../../../common'\n\nexport const uninstallModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return _uninstallModule({ client, account, module })\n    case 'fallback':\n      if (!module.selector) {\n        throw new Error(\n          `Selector param is required for module type ${module.type}`,\n        )\n      }\n      return _uninstallFallback({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _uninstallModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (isInstalled) {\n    let moduleData = module.deInitData\n    if (module.type === 'validator' || module.type === 'executor') {\n      const prev = await getPreviousModule({ client, account, module })\n      moduleData = encodeAbiParameters(\n        [\n          { name: 'prev', type: 'address' },\n          { name: 'disableModuleData', type: 'bytes' },\n        ],\n        [prev, moduleData],\n      )\n    }\n\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [BigInt(moduleTypeIds[module.type]), module.module, moduleData],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nconst _uninstallFallback = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n\n  const isInstalled = await isModuleInstalled({\n    client,\n    account,\n    module: {\n      ...module,\n      additionalContext: encodeAbiParameters(\n        [{ name: 'functionSignature', type: 'bytes4' }],\n        [module.selector!],\n      ),\n    },\n  })\n\n  if (isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        encodePacked(\n          ['bytes4', 'bytes'],\n          [module.selector!, module.deInitData],\n        ),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n", "import { ERC1271SignatureParams } from '../../types'\nimport { encodePacked, Hex } from 'viem'\n\nexport const encode1271Signature = ({\n  account,\n  validator,\n  signature,\n}: ERC1271SignatureParams): Hex => {\n  return encodePacked(['address', 'bytes'], [validator, signature])\n}\n", "import { ERC1271HashParams } from '../../types'\nimport { Hex } from 'viem'\n\nexport const encode1271Hash = ({\n  account,\n  chainId,\n  validator,\n  hash,\n}: ERC1271HashParams): Hex => {\n  return hash\n}\n", "import { Account } from '../../types'\nimport { Hex, encodePacked } from 'viem'\nimport { Module, CallType } from '../../../module/types'\n\nexport const encodeModuleInstallationData = ({\n  account,\n  module,\n}: {\n  account: Account\n  module: Module\n}): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n    case 'hook':\n      return module.initData\n    case 'fallback':\n      return encodePacked(\n        ['bytes4', 'bytes1', 'bytes'],\n        [\n          module.selector!,\n          module.callType ?? CallType.CALLTYPE_SINGLE,\n          module.initData,\n        ],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Account } from '../../types'\nimport { Hex, PublicClient, encodePacked, encodeAbiParameters } from 'viem'\nimport { Module, CallType } from '../../../module/types'\nimport { getPreviousModule } from '../../../common'\n\nexport const encodeModuleUninstallationData = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Hex> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      const prev = await getPreviousModule({ client, account, module })\n      return encodeAbiParameters(\n        [\n          { name: 'prev', type: 'address' },\n          { name: 'disableModuleData', type: 'bytes' },\n        ],\n        [prev, module.deInitData],\n      )\n\n    case 'hook':\n      return module.deInitData\n    case 'fallback':\n      return encodePacked(\n        ['bytes4', 'bytes'],\n        [module.selector!, module.deInitData],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Address, pad } from 'viem'\nimport { Module } from '../../../module/types'\nimport { isModule } from '../../../account/utils'\n\nexport const encodeValidatorNonce = ({\n  validator,\n}: {\n  validator: Module | Address\n}) => {\n  return BigInt(\n    pad(isModule(validator) ? validator.address : validator, {\n      dir: 'right',\n      size: 24,\n    }),\n  )\n}\n", "import { Address, Hex, PublicClient } from 'viem'\nimport {\n  Account,\n  Execution,\n  ERC1271SignatureParams,\n  ERC1271HashParams,\n} from '../types'\nimport { Module, ModuleType } from '../../module/types'\nimport { getInstalledModules } from './api/getInstalledModules'\nimport { installModule } from './api/installModule'\nimport { isModuleInstalled } from './api/isModuleInstalled'\nimport { uninstallModule } from './api/uninstallModule'\nimport { encode1271Signature } from './api/encode1271Signature'\nimport { encode1271Hash } from './api/encode1271Hash'\nimport { encodeModuleInstallationData } from './api/encodeModuleInstallationData'\nimport { encodeModuleUninstallationData } from './api/encodeModuleUninstallationData'\nimport { encodeValidatorNonce } from './api/encodeValidatorNonce'\n\nexport class NexusImplementation {\n  getInstalledModules = async ({\n    account,\n    client,\n  }: {\n    client: PublicClient\n    account: Account\n    moduleTypes?: ModuleType[]\n  }): Promise<Address[]> => {\n    return getInstalledModules({ account, client })\n  }\n\n  installModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Execution[]> => {\n    return installModule({ client, account, module })\n  }\n\n  isModuleInstalled = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<boolean> => {\n    return isModuleInstalled({ client, account, module })\n  }\n\n  uninstallModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Execution[]> => {\n    return uninstallModule({ client, account, module })\n  }\n\n  encode1271Signature = ({\n    account,\n    validator,\n    signature,\n  }: ERC1271SignatureParams): Hex => {\n    return encode1271Signature({ account, validator, signature })\n  }\n\n  encode1271Hash = ({\n    account,\n    chainId,\n    validator,\n    hash,\n  }: ERC1271HashParams): Hex => {\n    return encode1271Hash({ account, chainId, validator, hash })\n  }\n\n  encodeModuleInstallationData = ({\n    account,\n    module,\n  }: {\n    account: Account\n    module: Module\n  }): Hex => {\n    return encodeModuleInstallationData({ account, module })\n  }\n\n  encodeModuleUninstallationData = async ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Hex> => {\n    return await encodeModuleUninstallationData({ client, account, module })\n  }\n\n  encodeValidatorNonce = ({\n    validator,\n  }: {\n    validator: Module | Address\n  }): bigint => {\n    return encodeValidatorNonce({ validator })\n  }\n}\n", "import { accountAbi as erc7579Abi } from '../../../account/erc7579-implementation/constants/abis'\n\nexport const accountAbi = [...erc7579Abi]\n", "import { Address, parseAbi, PublicClient, zeroAddress } from 'viem'\nimport { Account } from '../../types'\nimport { getInstalledModules as getInstalledModulesQuery } from '../../../common/queries'\nimport { accountAbi } from '../constants/abis'\nimport { SENTINEL_ADDRESS } from '../../../common/constants'\n\nexport const getInstalledModules = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<Address[]> => {\n  let installedModules: Address[] = []\n  try {\n    installedModules = await getInstalledModulesQuery({\n      account,\n      client,\n    })\n  } catch (e) {}\n  if (installedModules.length === 0) {\n    const installedValidators = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getValidatorsPaginated',\n      args: [SENTINEL_ADDRESS, 100],\n    })) as Address[]\n    for (const validator of installedValidators) {\n      installedModules.push(validator)\n    }\n\n    const installedExecutors = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getExecutorsPaginated',\n      args: [SENTINEL_ADDRESS, 100],\n    })) as Address[]\n\n    for (const executor of installedExecutors) {\n      installedModules.push(executor)\n    }\n\n    const installedHook = (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'getActiveHook',\n    })) as Address\n\n    if (installedHook != zeroAddress) {\n      installedModules.push(installedHook)\n    }\n  }\n  return installedModules\n}\n", "import {\n  Hex,\n  PublicClient,\n  encodeAbiParameters,\n  parseAbi,\n  parseAbiParameters,\n} from 'viem'\nimport { Account } from '../../types'\nimport { isContract } from '../../../common/utils'\nimport { accountAbi } from '../constants/abis'\nimport { moduleTypeIds } from '../../../module/types'\nimport { Module } from '../../../module/types'\n\nexport const isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<boolean> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return await _isModuleInstalled({ client, account, module })\n    case 'hook':\n      if (!module.selector || module.hookType === undefined) {\n        throw new Error(\n          `hookType and selector params are required for module type ${module.type}`,\n        )\n      }\n      return await _isModuleInstalled({ client, account, module })\n    case 'fallback':\n      if (!module.functionSig) {\n        throw new Error(\n          `functionSig param is required for module type ${module.type}`,\n        )\n      }\n      return await _isModuleInstalled({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _isModuleInstalled = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<boolean> => {\n  if (await isContract({ client, address: account.address })) {\n    return (await client.readContract({\n      address: account.address,\n      abi: parseAbi(accountAbi),\n      functionName: 'isModuleInstalled',\n      args: [\n        moduleTypeIds[module.type],\n        module.module,\n        getModuleAdditionalContext(module),\n      ],\n    })) as boolean\n  }\n\n  return false\n}\n\nconst getModuleAdditionalContext = (module: Module): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return '0x'\n    case 'hook':\n      return encodeAbiParameters(\n        parseAbiParameters('uint8 hookType, bytes4 selector'),\n        [module.hookType!, module.selector!],\n      )\n    case 'fallback':\n      return encodeAbiParameters(parseAbiParameters('bytes4 functionSig'), [\n        module.functionSig!,\n      ])\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Account, Execution } from '../../types'\nimport {\n  Hex,\n  PublicClient,\n  encodeAbiParameters,\n  encodeFunctionData,\n  parseAbi,\n  parseAbiParameters,\n} from 'viem'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { accountAbi } from '../constants/abis'\nimport { Module, moduleTypeIds } from '../../../module/types'\n\nexport const installModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return _installModule({ client, account, module })\n    case 'hook':\n      if (!module.selector || module.hookType === undefined) {\n        throw new Error(\n          `hookType and selector params are required for module type ${module.type}`,\n        )\n      }\n      return _installModule({ client, account, module })\n    case 'fallback':\n      if (!module.functionSig || !module.callType) {\n        throw new Error(\n          `functionSig and callType params are required for module type ${module.type}`,\n        )\n      }\n      return _installModule({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _installModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (!isInstalled) {\n    const data = encodeFunctionData({\n      functionName: 'installModule',\n      abi: parseAbi(accountAbi),\n      args: [\n        BigInt(moduleTypeIds[module.type]),\n        module.module,\n        getModuleCalldata(module),\n      ],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n  return executions\n}\n\nconst getModuleCalldata = (module: Module): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return module.initData || '0x'\n    case 'hook':\n      return encodeAbiParameters(\n        parseAbiParameters(\n          'uint8 hookType, bytes4 selector, bytes memory initData',\n        ),\n        [module.hookType!, module.selector!, module.initData || '0x'],\n      )\n    case 'fallback':\n      return encodeAbiParameters(\n        parseAbiParameters(\n          'bytes4 functionSig, bytes1 calltype, bytes memory initData',\n        ),\n        [module.functionSig!, module.callType!, module.initData || '0x'],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import {\n  PublicClient,\n  encodeAbiParameters,\n  encodeFunctionData,\n  parseAbi,\n  parseAbiParameters,\n  Hex,\n} from 'viem'\nimport { Account, Execution } from '../../types'\nimport { isModuleInstalled } from './isModuleInstalled'\nimport { accountAbi } from '../constants/abis'\nimport { Module, moduleTypeIds } from '../../../module/types'\nimport { getPreviousModule } from '../../../common/getPrevModule'\n\nexport const uninstallModule = ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Execution[]> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return _uninstallModule({ client, account, module })\n\n    case 'hook':\n      if (!module.selector || module.hookType === undefined) {\n        throw new Error(\n          `hookType and selector params are required for module type ${module.type}`,\n        )\n      }\n      return _uninstallModule({ client, account, module })\n\n    case 'fallback':\n      if (!module.functionSig) {\n        throw new Error(\n          `functionSig param is required for module type ${module.type}`,\n        )\n      }\n      return _uninstallModule({ client, account, module })\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n\nconst _uninstallModule = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}) => {\n  const executions: Execution[] = []\n  const isInstalled = await isModuleInstalled({ client, account, module })\n\n  if (isInstalled) {\n    let moduleData = getModuleCalldata(module)\n\n    if (module.type === 'validator' || module.type === 'executor') {\n      const prev = await getPreviousModule({ client, account, module })\n      moduleData = encodeAbiParameters(\n        [\n          { name: 'prev', type: 'address' },\n          { name: 'moduleInitData', type: 'bytes' },\n        ],\n        [prev, moduleData],\n      )\n    }\n\n    const data = encodeFunctionData({\n      functionName: 'uninstallModule',\n      abi: parseAbi(accountAbi),\n      args: [BigInt(moduleTypeIds[module.type]), module.module, moduleData],\n    })\n\n    executions.push({\n      to: account.address,\n      target: account.address,\n      value: BigInt(0),\n      callData: data,\n      data,\n    })\n  }\n\n  return executions\n}\n\nconst getModuleCalldata = (module: Module): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return module.deInitData\n    case 'hook':\n      return encodeAbiParameters(\n        parseAbiParameters(\n          'uint8 hookType, bytes4 selector, bytes memory deInitData',\n        ),\n        [module.hookType!, module.selector!, module.deInitData],\n      )\n    case 'fallback':\n      return encodeAbiParameters(\n        parseAbiParameters('bytes4 functionSig, bytes memory moduleDeInitData'),\n        [module.functionSig!, module.deInitData],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { ERC1271SignatureParams } from '../../types'\nimport { concat, encodePacked, fromHex, Hex, slice, toHex } from 'viem'\n\nexport const encode1271Signature = ({\n  account,\n  validator,\n  signature,\n}: ERC1271SignatureParams): Hex => {\n  let formattedSignature = signature\n  if (account == validator) {\n    const v = fromHex(slice(signature, 64, 65), 'number')\n    if (v < 30) {\n      formattedSignature = concat([slice(signature, 0, 64), toHex(v + 4)])\n    }\n  }\n  return encodePacked(['address', 'bytes'], [validator, formattedSignature])\n}\n", "import { ERC1271HashParams } from '../../types'\nimport { hashTypedData, Hex } from 'viem'\n\nexport const encode1271Hash = ({\n  account,\n  chainId,\n  validator,\n  hash,\n}: ERC1271HashParams): Hex => {\n  if (validator == account) {\n    return hashTypedData({\n      domain: {\n        chainId: chainId,\n        verifyingContract: account,\n      },\n      types: {\n        SafeMessage: [{ name: 'message', type: 'bytes' }],\n      },\n      primaryType: 'SafeMessage',\n      message: {\n        message: hash,\n      },\n    })\n  }\n  return hash\n}\n", "export enum SafeHookType {\n  GLOBAL = 0,\n  SIG = 1,\n}\n\nexport enum SafeCallType {\n  CALLTYPE_SINGLE = '0x00',\n  CALLTYPE_BATCH = '0x01',\n}\n", "import { Account } from '../../types'\nimport { Hex, encodeAbiParameters, parseAbiParameters } from 'viem'\nimport { CallType, Module } from '../../../module/types'\nimport { SafeHookType } from '../types'\n\nexport const encodeModuleInstallationData = ({\n  account,\n  module,\n}: {\n  account: Account\n  module: Module\n}): Hex => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      return module.initData\n    case 'hook':\n      return encodeAbiParameters(\n        parseAbiParameters(\n          'uint8 hookType, bytes4 selector, bytes memory initData',\n        ),\n        [\n          module.hookType ?? SafeHookType.GLOBAL,\n          module.hookType == SafeHookType.SIG ? module.selector! : '0x00000000',\n          module.initData,\n        ],\n      )\n    case 'fallback':\n      return encodeAbiParameters(\n        parseAbiParameters(\n          'bytes4 functionSig, bytes1 calltype, bytes memory initData',\n        ),\n        [\n          module.functionSig!,\n          module.callType ?? CallType.CALLTYPE_SINGLE,\n          module.initData,\n        ],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Account } from '../../types'\nimport {\n  Hex,\n  PublicClient,\n  parseAbiParameters,\n  encodeAbiParameters,\n} from 'viem'\nimport { Module } from '../../../module/types'\nimport { getPreviousModule } from '../../../common'\nimport { SafeHookType } from '../types'\n\nexport const encodeModuleUninstallationData = async ({\n  client,\n  account,\n  module,\n}: {\n  client: PublicClient\n  account: Account\n  module: Module\n}): Promise<Hex> => {\n  switch (module.type) {\n    case 'validator':\n    case 'executor':\n      const prev = await getPreviousModule({ client, account, module })\n      return encodeAbiParameters(\n        [\n          { name: 'prev', type: 'address' },\n          { name: 'disableModuleData', type: 'bytes' },\n        ],\n        [prev, module.deInitData],\n      )\n    case 'hook':\n      return encodeAbiParameters(\n        parseAbiParameters(\n          'uint8 hookType, bytes4 selector, bytes memory deInitData',\n        ),\n        [\n          module.hookType ?? SafeHookType.GLOBAL,\n          module.hookType == SafeHookType.SIG ? module.selector! : '0x00000000',\n          module.deInitData,\n        ],\n      )\n\n    case 'fallback':\n      return encodeAbiParameters(\n        parseAbiParameters('bytes4 functionSig, bytes memory moduleDeInitData'),\n        [module.functionSig!, module.deInitData],\n      )\n    default:\n      throw new Error(`Unknown module type ${module.type}`)\n  }\n}\n", "import { Address, pad } from 'viem'\nimport { Module } from '../../../module/types'\nimport { isModule } from '../../../account/utils'\n\nexport const encodeValidatorNonce = ({\n  validator,\n}: {\n  validator: Module | Address\n}) => {\n  return BigInt(\n    pad(isModule(validator) ? validator.address : validator, {\n      dir: 'right',\n      size: 24,\n    }),\n  )\n}\n", "import { Address, Hex, PublicClient } from 'viem'\nimport {\n  Account,\n  Execution,\n  ERC1271SignatureParams,\n  ERC1271HashParams,\n} from '../types'\nimport { getInstalledModules } from './api/getInstalledModules'\nimport { installModule } from './api/installModule'\nimport { isModuleInstalled } from './api/isModuleInstalled'\nimport { uninstallModule } from './api/uninstallModule'\nimport { Module, ModuleType } from '../../module'\nimport { encode1271Signature } from './api/encode1271Signature'\nimport { encode1271Hash } from './api/encode1271Hash'\nimport { encodeModuleInstallationData } from './api/encodeModuleInstallationData'\nimport { encodeModuleUninstallationData } from './api/encodeModuleUninstallationData'\nimport { encodeValidatorNonce } from './api/encodeValidatorNonce'\n\nexport class SafeImplementation {\n  getInstalledModules = async ({\n    account,\n    client,\n  }: {\n    client: PublicClient\n    account: Account\n    moduleTypes?: ModuleType[]\n  }): Promise<Address[]> => {\n    return getInstalledModules({ account, client })\n  }\n\n  installModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Execution[]> => {\n    return installModule({ client, account, module })\n  }\n\n  isModuleInstalled = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<boolean> => {\n    return isModuleInstalled({ client, account, module })\n  }\n\n  uninstallModule = ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Execution[]> => {\n    return uninstallModule({ client, account, module })\n  }\n\n  encode1271Signature = ({\n    account,\n    validator,\n    signature,\n  }: ERC1271SignatureParams): Hex => {\n    return encode1271Signature({ account, validator, signature })\n  }\n\n  encode1271Hash = ({\n    account,\n    chainId,\n    validator,\n    hash,\n  }: ERC1271HashParams): Hex => {\n    return encode1271Hash({ account, chainId, validator, hash })\n  }\n\n  encodeModuleInstallationData = ({\n    account,\n    module,\n  }: {\n    account: Account\n    module: Module\n  }): Hex => {\n    return encodeModuleInstallationData({ account, module })\n  }\n\n  encodeModuleUninstallationData = async ({\n    client,\n    account,\n    module,\n  }: {\n    client: PublicClient\n    account: Account\n    module: Module\n  }): Promise<Hex> => {\n    return await encodeModuleUninstallationData({ client, account, module })\n  }\n\n  encodeValidatorNonce = ({\n    validator,\n  }: {\n    validator: Module | Address\n  }): bigint => {\n    return encodeValidatorNonce({ validator })\n  }\n}\n", "import { ERC7579Implementation } from '../erc7579-implementation'\nimport { KernelImplementation } from '../kernel'\nimport { NexusImplementation } from '../nexus'\nimport { SafeImplementation } from '../safe'\nimport { Account } from '../types'\n\nexport const getAccountImplementation = ({ account }: { account: Account }) => {\n  switch (account.type) {\n    case 'erc7579-implementation':\n      return new ERC7579Implementation()\n    case 'kernel':\n      return new KernelImplementation()\n    case 'safe':\n      return new SafeImplementation()\n    case 'nexus':\n      return new NexusImplementation()\n    default:\n      throw new Error(`Unsupported account type: ${account.type}`)\n  }\n}\n", "import { Address } from 'viem'\nimport { Account } from '../types'\nimport { getAccountImplementation } from './getAccountImplementation'\nimport { Module } from '../../module/types'\n\nexport const encodeValidatorNonce = ({\n  account,\n  validator,\n}: {\n  account: Account\n  validator: Module | Address\n}): bigint => {\n  const accountImplementation = getAccountImplementation({ account })\n  return accountImplementation.encodeValidatorNonce({\n    validator,\n  })\n}\n", "import { Address } from 'viem'\n\nexport const OWNABLE_VALIDATOR_ADDRESS: Address =\n  '0x2483DA3A338895199E5e538530213157e931Bf06'\n", "import { Address, encodeAbiParameters } from 'viem'\nimport { Module } from '../types'\nimport { GLOBAL_CONSTANTS } from '../../constants'\n\nexport const getOwnableValidator = ({\n  threshold,\n  owners,\n  hook,\n}: {\n  threshold: number\n  owners: Address[]\n  hook?: Address\n}): Module => {\n  return {\n    address: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    module: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    initData: encodeAbiParameters(\n      [\n        { name: 'threshold', type: 'uint256' },\n        { name: 'owners', type: 'address[]' },\n      ],\n      [\n        BigInt(threshold),\n        owners.map((owner) => owner.toLowerCase() as Address).sort(),\n      ],\n    ),\n    deInitData: '0x',\n    additionalContext: '0x',\n    hook,\n    type: 'validator',\n  }\n}\n", "import { Execution } from '../../account'\nimport {\n  encodeFunctionData,\n  Address,\n  PublicClient,\n  getAddress,\n  Hex,\n  encodeAbiParameters,\n  encodePacked,\n} from 'viem'\nimport { abi } from './abi'\nimport { SENTINEL_ADDRESS } from '../../common/constants'\nimport { Account } from '../../account'\nimport { GLOBAL_CONSTANTS } from '../../constants'\n\nexport const getSetOwnableValidatorThresholdAction = ({\n  threshold,\n}: {\n  threshold: number\n}): Execution => {\n  const data = encodeFunctionData({\n    functionName: 'setThreshold',\n    abi,\n    args: [BigInt(threshold)],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    target: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getAddOwnableValidatorOwnerAction = async ({\n  owner,\n  client,\n  account,\n}: {\n  owner: Address\n  client: PublicClient\n  account: Account\n}): Promise<Execution> => {\n  const owners = await getOwnableValidatorOwners({ account, client })\n\n  const currentOwnerIndex = owners.findIndex((o: Address) => o === owner)\n\n  if (currentOwnerIndex !== -1) {\n    throw new Error('Owner already exists')\n  }\n\n  const data = encodeFunctionData({\n    functionName: 'addOwner',\n    abi,\n    args: [owner],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    target: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getRemoveOwnableValidatorOwnerAction = async ({\n  client,\n  account,\n  owner,\n}: {\n  client: PublicClient\n  account: Account\n  owner: Address\n}): Promise<Execution> => {\n  const owners = await getOwnableValidatorOwners({ account, client })\n  let prevOwner: Address\n\n  const currentOwnerIndex = owners.findIndex((o: Address) => o === owner)\n\n  if (currentOwnerIndex === -1) {\n    throw new Error('Owner not found')\n  } else if (currentOwnerIndex === 0) {\n    prevOwner = SENTINEL_ADDRESS\n  } else {\n    prevOwner = getAddress(owners[currentOwnerIndex - 1])\n  }\n\n  const data = encodeFunctionData({\n    functionName: 'removeOwner',\n    abi,\n    args: [prevOwner, owner],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    target: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getOwnableValidatorOwners = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<Address[]> => {\n  try {\n    const owners = (await client.readContract({\n      address: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n      abi,\n      functionName: 'getOwners',\n      args: [account.address],\n    })) as Address[]\n\n    return owners\n  } catch (err) {\n    console.error(err)\n    return []\n  }\n}\n\nexport const getOwnableValidatorThreshold = async ({\n  account,\n  client,\n}: {\n  account: Account\n  client: PublicClient\n}): Promise<number> => {\n  try {\n    const threshold = (await client.readContract({\n      address: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n      abi,\n      functionName: 'threshold',\n      args: [account.address],\n    })) as number\n\n    return Number(threshold)\n  } catch {\n    throw new Error('Failed to get threshold')\n  }\n}\n\nexport const getIsValidSignatureStateless = async ({\n  hash,\n  signature,\n  data,\n  client,\n}: {\n  hash: Hex\n  signature: Hex\n  data: Hex\n  client: PublicClient\n}): Promise<number> => {\n  try {\n    return (await client.readContract({\n      address: GLOBAL_CONSTANTS.OWNABLE_VALIDATOR_ADDRESS,\n      abi,\n      functionName: 'validateSignatureWithData',\n      args: [hash, signature, data],\n    })) as number\n  } catch {\n    throw new Error('Failed to check signature')\n  }\n}\n\nexport const encodeValidationData = ({\n  threshold,\n  owners,\n}: {\n  threshold: number\n  owners: Address[]\n}) => {\n  return encodeAbiParameters(\n    [\n      {\n        type: 'uint256',\n      },\n      {\n        type: 'address[]',\n      },\n    ],\n    [BigInt(threshold), owners.sort()],\n  )\n}\n\nexport const getOwnableValidatorSignature = ({\n  signatures,\n}: {\n  signatures: Hex[]\n}): Hex => {\n  let signature = signatures[0]\n  for (let i = 1; i < signatures.length; i++) {\n    signature = encodePacked(['bytes', 'bytes'], [signature, signatures[i]])\n  }\n  return signature\n}\n\nexport const getOwnableValidatorMockSignature = ({\n  threshold,\n}: {\n  threshold: number\n}): Hex => {\n  const mockSignature =\n    '0xe8b94748580ca0b4993c9a1b86b5be851bfc076ff5ce3a1ff65bf16392acfcb800f9b4f1aef1555c7fce5599fffb17e7c635502154a0333ba21f3ae491839af51c' as Hex\n  return getOwnableValidatorSignature({\n    signatures: Array(threshold).fill(mockSignature),\n  })\n}\n", "import { Address, Hex } from 'viem'\n\nexport type SigHookInit = {\n  sig: Hex\n  subHooks: Address[]\n}\n\nexport enum HookType {\n  GLOBAL,\n  DELEGATECALL,\n  VALUE,\n  SIG,\n  TARGET,\n}\n", "export const installSmartSessionsAbi = [\n  {\n    components: [\n      {\n        internalType: 'contract ISessionValidator',\n        name: 'sessionValidator',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'sessionValidatorInitData',\n        type: 'bytes',\n      },\n      { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n      {\n        components: [\n          { internalType: 'address', name: 'policy', type: 'address' },\n          { internalType: 'bytes', name: 'initData', type: 'bytes' },\n        ],\n        internalType: 'struct PolicyData[]',\n        name: 'userOpPolicies',\n        type: 'tuple[]',\n      },\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: 'bytes32',\n                name: 'appDomainSeparator',\n                type: 'bytes32',\n              },\n              {\n                internalType: 'string[]',\n                name: 'contentName',\n                type: 'string[]',\n              },\n            ],\n            internalType: 'struct ERC7739Context[]',\n            name: 'allowedERC7739Content',\n            type: 'tuple[]',\n          },\n\n          {\n            components: [\n              { internalType: 'address', name: 'policy', type: 'address' },\n              { internalType: 'bytes', name: 'initData', type: 'bytes' },\n            ],\n            internalType: 'struct PolicyData[]',\n            name: 'erc1271Policies',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct ERC7739Data',\n        name: 'erc7739Policies',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'bytes4',\n            name: 'actionTargetSelector',\n            type: 'bytes4',\n          },\n          {\n            internalType: 'address',\n            name: 'actionTarget',\n            type: 'address',\n          },\n          {\n            components: [\n              { internalType: 'address', name: 'policy', type: 'address' },\n              { internalType: 'bytes', name: 'initData', type: 'bytes' },\n            ],\n            internalType: 'struct PolicyData[]',\n            name: 'actionPolicies',\n            type: 'tuple[]',\n          },\n        ],\n        internalType: 'struct ActionData[]',\n        name: 'actions',\n        type: 'tuple[]',\n      },\n      { internalType: 'bool', name: 'permitERC4337Paymaster', type: 'bool' },\n    ],\n    internalType: 'struct Session[]',\n    name: 'sessions',\n    type: 'tuple[]',\n  },\n]\n\nexport const enableSessionAbi = {\n  components: [\n    {\n      type: 'uint8',\n      name: 'chainDigestIndex',\n    },\n    {\n      type: 'tuple[]',\n      components: [\n        {\n          internalType: 'uint64',\n          name: 'chainId',\n          type: 'uint64',\n        },\n        {\n          internalType: 'bytes32',\n          name: 'sessionDigest',\n          type: 'bytes32',\n        },\n      ],\n      name: 'hashesAndChainIds',\n    },\n    {\n      components: [\n        {\n          internalType: 'contract ISessionValidator',\n          name: 'sessionValidator',\n          type: 'address',\n        },\n        {\n          internalType: 'bytes',\n          name: 'sessionValidatorInitData',\n          type: 'bytes',\n        },\n        { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        {\n          components: [\n            { internalType: 'address', name: 'policy', type: 'address' },\n            { internalType: 'bytes', name: 'initData', type: 'bytes' },\n          ],\n          internalType: 'struct PolicyData[]',\n          name: 'userOpPolicies',\n          type: 'tuple[]',\n        },\n        {\n          components: [\n            {\n              components: [\n                {\n                  internalType: 'bytes32',\n                  name: 'appDomainSeparator',\n                  type: 'bytes32',\n                },\n                {\n                  internalType: 'string[]',\n                  name: 'contentName',\n                  type: 'string[]',\n                },\n              ],\n              internalType: 'struct ERC7739Context[]',\n              name: 'allowedERC7739Content',\n              type: 'tuple[]',\n            },\n\n            {\n              components: [\n                { internalType: 'address', name: 'policy', type: 'address' },\n                { internalType: 'bytes', name: 'initData', type: 'bytes' },\n              ],\n              internalType: 'struct PolicyData[]',\n              name: 'erc1271Policies',\n              type: 'tuple[]',\n            },\n          ],\n          internalType: 'struct ERC7739Data',\n          name: 'erc7739Policies',\n          type: 'tuple',\n        },\n        {\n          components: [\n            {\n              internalType: 'bytes4',\n              name: 'actionTargetSelector',\n              type: 'bytes4',\n            },\n            {\n              internalType: 'address',\n              name: 'actionTarget',\n              type: 'address',\n            },\n            {\n              components: [\n                { internalType: 'address', name: 'policy', type: 'address' },\n                { internalType: 'bytes', name: 'initData', type: 'bytes' },\n              ],\n              internalType: 'struct PolicyData[]',\n              name: 'actionPolicies',\n              type: 'tuple[]',\n            },\n          ],\n          internalType: 'struct ActionData[]',\n          name: 'actions',\n          type: 'tuple[]',\n        },\n        { internalType: 'bool', name: 'permitERC4337Paymaster', type: 'bool' },\n      ],\n      internalType: 'struct Session',\n      name: 'sessionToEnable',\n      type: 'tuple',\n    },\n    {\n      type: 'bytes',\n      name: 'permissionEnableSig',\n    },\n  ],\n  internalType: 'struct EnableSession',\n  name: 'enableSession',\n  type: 'tuple',\n} as const\n\nexport const encodeEnableSessionSignatureAbi = [\n  enableSessionAbi,\n  { type: 'bytes' },\n] as const\n\nexport const abi = [\n  {\n    type: 'function',\n    name: 'areActionsEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'actions',\n        type: 'tuple[]',\n        internalType: 'struct ActionData[]',\n        components: [\n          {\n            name: 'actionTargetSelector',\n            type: 'bytes4',\n            internalType: 'bytes4',\n          },\n          {\n            name: 'actionTarget',\n            type: 'address',\n            internalType: 'address',\n          },\n          {\n            name: 'actionPolicies',\n            type: 'tuple[]',\n            internalType: 'struct PolicyData[]',\n            components: [\n              {\n                name: 'policy',\n                type: 'address',\n                internalType: 'address',\n              },\n              { name: 'initData', type: 'bytes', internalType: 'bytes' },\n            ],\n          },\n        ],\n      },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'areERC1271PoliciesEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'erc1271Policies',\n        type: 'tuple[]',\n        internalType: 'struct PolicyData[]',\n        components: [\n          { name: 'policy', type: 'address', internalType: 'address' },\n          { name: 'initData', type: 'bytes', internalType: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'areUserOpPoliciesEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'userOpPolicies',\n        type: 'tuple[]',\n        internalType: 'struct PolicyData[]',\n        components: [\n          { name: 'policy', type: 'address', internalType: 'address' },\n          { name: 'initData', type: 'bytes', internalType: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'disableActionId',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'actionId', type: 'bytes32', internalType: 'ActionId' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'disableActionPolicies',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'actionId', type: 'bytes32', internalType: 'ActionId' },\n      { name: 'policies', type: 'address[]', internalType: 'address[]' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'disableERC1271Policies',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'policies',\n        type: 'address[]',\n        internalType: 'address[]',\n      },\n      {\n        name: 'contexts',\n        type: 'tuple[]',\n        internalType: 'struct ERC7739Context[]',\n        components: [\n          {\n            name: 'appDomainSeparator',\n            type: 'bytes32',\n            internalType: 'bytes32',\n          },\n          {\n            name: 'contentName',\n            type: 'string[]',\n            internalType: 'string[]',\n          },\n        ],\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'disableUserOpPolicies',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'policies', type: 'address[]', internalType: 'address[]' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'enableActionPolicies',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'actionPolicies',\n        type: 'tuple[]',\n        internalType: 'struct ActionData[]',\n        components: [\n          {\n            name: 'actionTargetSelector',\n            type: 'bytes4',\n            internalType: 'bytes4',\n          },\n          {\n            name: 'actionTarget',\n            type: 'address',\n            internalType: 'address',\n          },\n          {\n            name: 'actionPolicies',\n            type: 'tuple[]',\n            internalType: 'struct PolicyData[]',\n            components: [\n              {\n                name: 'policy',\n                type: 'address',\n                internalType: 'address',\n              },\n              { name: 'initData', type: 'bytes', internalType: 'bytes' },\n            ],\n          },\n        ],\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'enableERC1271Policies',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'erc1271Policies',\n        type: 'tuple',\n        internalType: 'struct ERC7739Data',\n        components: [\n          {\n            name: 'allowedERC7739Content',\n            type: 'tuple[]',\n            internalType: 'struct ERC7739Context[]',\n            components: [\n              {\n                name: 'appDomainSeparator',\n                type: 'bytes32',\n                internalType: 'bytes32',\n              },\n              {\n                name: 'contentName',\n                type: 'string[]',\n                internalType: 'string[]',\n              },\n            ],\n          },\n          {\n            name: 'erc1271Policies',\n            type: 'tuple[]',\n            internalType: 'struct PolicyData[]',\n            components: [\n              {\n                name: 'policy',\n                type: 'address',\n                internalType: 'address',\n              },\n              { name: 'initData', type: 'bytes', internalType: 'bytes' },\n            ],\n          },\n        ],\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'enableSessions',\n    inputs: [\n      {\n        name: 'sessions',\n        type: 'tuple[]',\n        internalType: 'struct Session[]',\n        components: [\n          {\n            name: 'sessionValidator',\n            type: 'address',\n            internalType: 'contract ISessionValidator',\n          },\n          {\n            name: 'sessionValidatorInitData',\n            type: 'bytes',\n            internalType: 'bytes',\n          },\n          { name: 'salt', type: 'bytes32', internalType: 'bytes32' },\n          {\n            name: 'userOpPolicies',\n            type: 'tuple[]',\n            internalType: 'struct PolicyData[]',\n            components: [\n              {\n                name: 'policy',\n                type: 'address',\n                internalType: 'address',\n              },\n              { name: 'initData', type: 'bytes', internalType: 'bytes' },\n            ],\n          },\n          {\n            name: 'erc7739Policies',\n            type: 'tuple',\n            internalType: 'struct ERC7739Data',\n            components: [\n              {\n                name: 'allowedERC7739Content',\n                type: 'tuple[]',\n                internalType: 'struct ERC7739Context[]',\n                components: [\n                  {\n                    name: 'appDomainSeparator',\n                    type: 'bytes32',\n                    internalType: 'bytes32',\n                  },\n                  {\n                    name: 'contentName',\n                    type: 'string[]',\n                    internalType: 'string[]',\n                  },\n                ],\n              },\n              {\n                name: 'erc1271Policies',\n                type: 'tuple[]',\n                internalType: 'struct PolicyData[]',\n                components: [\n                  {\n                    name: 'policy',\n                    type: 'address',\n                    internalType: 'address',\n                  },\n                  {\n                    name: 'initData',\n                    type: 'bytes',\n                    internalType: 'bytes',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'actions',\n            type: 'tuple[]',\n            internalType: 'struct ActionData[]',\n            components: [\n              {\n                name: 'actionTargetSelector',\n                type: 'bytes4',\n                internalType: 'bytes4',\n              },\n              {\n                name: 'actionTarget',\n                type: 'address',\n                internalType: 'address',\n              },\n              {\n                name: 'actionPolicies',\n                type: 'tuple[]',\n                internalType: 'struct PolicyData[]',\n                components: [\n                  {\n                    name: 'policy',\n                    type: 'address',\n                    internalType: 'address',\n                  },\n                  {\n                    name: 'initData',\n                    type: 'bytes',\n                    internalType: 'bytes',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'permitERC4337Paymaster',\n            type: 'bool',\n            internalType: 'bool',\n          },\n        ],\n      },\n    ],\n    outputs: [\n      {\n        name: 'permissionIds',\n        type: 'bytes32[]',\n        internalType: 'PermissionId[]',\n      },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'enableUserOpPolicies',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'userOpPolicies',\n        type: 'tuple[]',\n        internalType: 'struct PolicyData[]',\n        components: [\n          { name: 'policy', type: 'address', internalType: 'address' },\n          { name: 'initData', type: 'bytes', internalType: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'getActionPolicies',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'actionId', type: 'bytes32', internalType: 'ActionId' },\n    ],\n    outputs: [{ name: '', type: 'address[]', internalType: 'address[]' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getERC1271Policies',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [{ name: '', type: 'address[]', internalType: 'address[]' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getEnabledActions',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [{ name: '', type: 'bytes32[]', internalType: 'bytes32[]' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getEnabledERC7739Content',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [\n      {\n        name: 'enabledERC7739ContentHashes',\n        type: 'tuple[]',\n        internalType: 'struct ERC7739ContextHashes[]',\n        components: [\n          {\n            name: 'appDomainSeparator',\n            type: 'bytes32',\n            internalType: 'bytes32',\n          },\n          {\n            name: 'contentNameHashes',\n            type: 'bytes32[]',\n            internalType: 'bytes32[]',\n          },\n        ],\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getNonce',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getPermissionIDs',\n    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],\n    outputs: [\n      {\n        name: 'permissionIds',\n        type: 'bytes32[]',\n        internalType: 'PermissionId[]',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getPermissionId',\n    inputs: [\n      {\n        name: 'session',\n        type: 'tuple',\n        internalType: 'struct Session',\n        components: [\n          {\n            name: 'sessionValidator',\n            type: 'address',\n            internalType: 'contract ISessionValidator',\n          },\n          {\n            name: 'sessionValidatorInitData',\n            type: 'bytes',\n            internalType: 'bytes',\n          },\n          { name: 'salt', type: 'bytes32', internalType: 'bytes32' },\n          {\n            name: 'userOpPolicies',\n            type: 'tuple[]',\n            internalType: 'struct PolicyData[]',\n            components: [\n              {\n                name: 'policy',\n                type: 'address',\n                internalType: 'address',\n              },\n              { name: 'initData', type: 'bytes', internalType: 'bytes' },\n            ],\n          },\n          {\n            name: 'erc7739Policies',\n            type: 'tuple',\n            internalType: 'struct ERC7739Data',\n            components: [\n              {\n                name: 'allowedERC7739Content',\n                type: 'tuple[]',\n                internalType: 'struct ERC7739Context[]',\n                components: [\n                  {\n                    name: 'appDomainSeparator',\n                    type: 'bytes32',\n                    internalType: 'bytes32',\n                  },\n                  {\n                    name: 'contentName',\n                    type: 'string[]',\n                    internalType: 'string[]',\n                  },\n                ],\n              },\n              {\n                name: 'erc1271Policies',\n                type: 'tuple[]',\n                internalType: 'struct PolicyData[]',\n                components: [\n                  {\n                    name: 'policy',\n                    type: 'address',\n                    internalType: 'address',\n                  },\n                  {\n                    name: 'initData',\n                    type: 'bytes',\n                    internalType: 'bytes',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'actions',\n            type: 'tuple[]',\n            internalType: 'struct ActionData[]',\n            components: [\n              {\n                name: 'actionTargetSelector',\n                type: 'bytes4',\n                internalType: 'bytes4',\n              },\n              {\n                name: 'actionTarget',\n                type: 'address',\n                internalType: 'address',\n              },\n              {\n                name: 'actionPolicies',\n                type: 'tuple[]',\n                internalType: 'struct PolicyData[]',\n                components: [\n                  {\n                    name: 'policy',\n                    type: 'address',\n                    internalType: 'address',\n                  },\n                  {\n                    name: 'initData',\n                    type: 'bytes',\n                    internalType: 'bytes',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'permitERC4337Paymaster',\n            type: 'bool',\n            internalType: 'bool',\n          },\n        ],\n      },\n    ],\n    outputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    stateMutability: 'pure',\n  },\n  {\n    type: 'function',\n    name: 'getSessionDigest',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'data',\n        type: 'tuple',\n        internalType: 'struct Session',\n        components: [\n          {\n            name: 'sessionValidator',\n            type: 'address',\n            internalType: 'contract ISessionValidator',\n          },\n          {\n            name: 'sessionValidatorInitData',\n            type: 'bytes',\n            internalType: 'bytes',\n          },\n          { name: 'salt', type: 'bytes32', internalType: 'bytes32' },\n          {\n            name: 'userOpPolicies',\n            type: 'tuple[]',\n            internalType: 'struct PolicyData[]',\n            components: [\n              {\n                name: 'policy',\n                type: 'address',\n                internalType: 'address',\n              },\n              { name: 'initData', type: 'bytes', internalType: 'bytes' },\n            ],\n          },\n          {\n            name: 'erc7739Policies',\n            type: 'tuple',\n            internalType: 'struct ERC7739Data',\n            components: [\n              {\n                name: 'allowedERC7739Content',\n                type: 'tuple[]',\n                internalType: 'struct ERC7739Context[]',\n                components: [\n                  {\n                    name: 'appDomainSeparator',\n                    type: 'bytes32',\n                    internalType: 'bytes32',\n                  },\n                  {\n                    name: 'contentName',\n                    type: 'string[]',\n                    internalType: 'string[]',\n                  },\n                ],\n              },\n              {\n                name: 'erc1271Policies',\n                type: 'tuple[]',\n                internalType: 'struct PolicyData[]',\n                components: [\n                  {\n                    name: 'policy',\n                    type: 'address',\n                    internalType: 'address',\n                  },\n                  {\n                    name: 'initData',\n                    type: 'bytes',\n                    internalType: 'bytes',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'actions',\n            type: 'tuple[]',\n            internalType: 'struct ActionData[]',\n            components: [\n              {\n                name: 'actionTargetSelector',\n                type: 'bytes4',\n                internalType: 'bytes4',\n              },\n              {\n                name: 'actionTarget',\n                type: 'address',\n                internalType: 'address',\n              },\n              {\n                name: 'actionPolicies',\n                type: 'tuple[]',\n                internalType: 'struct PolicyData[]',\n                components: [\n                  {\n                    name: 'policy',\n                    type: 'address',\n                    internalType: 'address',\n                  },\n                  {\n                    name: 'initData',\n                    type: 'bytes',\n                    internalType: 'bytes',\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'permitERC4337Paymaster',\n            type: 'bool',\n            internalType: 'bool',\n          },\n        ],\n      },\n      {\n        name: 'mode',\n        type: 'uint8',\n        internalType: 'enum SmartSessionMode',\n      },\n    ],\n    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getSessionValidatorAndConfig',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [\n      {\n        name: 'sessionValidator',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'sessionValidatorData',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getUserOpPolicies',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [{ name: '', type: 'address[]', internalType: 'address[]' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isActionIdEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'actionId', type: 'bytes32', internalType: 'ActionId' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isActionPolicyEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'actionId', type: 'bytes32', internalType: 'ActionId' },\n      { name: 'policy', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isERC1271PolicyEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'policy', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isERC7739ContentEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'appDomainSeparator',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n      { name: 'content', type: 'string', internalType: 'string' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isISessionValidatorSet',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isInitialized',\n    inputs: [\n      { name: 'smartAccount', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isModuleType',\n    inputs: [{ name: 'typeID', type: 'uint256', internalType: 'uint256' }],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'pure',\n  },\n  {\n    type: 'function',\n    name: 'isPermissionEnabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isUserOpPolicyEnabled',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'policy', type: 'address', internalType: 'address' },\n    ],\n    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'isValidSignatureWithSender',\n    inputs: [\n      { name: 'sender', type: 'address', internalType: 'address' },\n      { name: 'hash', type: 'bytes32', internalType: 'bytes32' },\n      { name: 'signature', type: 'bytes', internalType: 'bytes' },\n    ],\n    outputs: [{ name: 'result', type: 'bytes4', internalType: 'bytes4' }],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'onInstall',\n    inputs: [{ name: 'data', type: 'bytes', internalType: 'bytes' }],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'onUninstall',\n    inputs: [{ name: '', type: 'bytes', internalType: 'bytes' }],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'removeSession',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'revokeEnableSignature',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'setpermitERC4337Paymaster',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'enabled', type: 'bool', internalType: 'bool' },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'validateUserOp',\n    inputs: [\n      {\n        name: 'userOp',\n        type: 'tuple',\n        internalType: 'struct PackedUserOperation',\n        components: [\n          { name: 'sender', type: 'address', internalType: 'address' },\n          { name: 'nonce', type: 'uint256', internalType: 'uint256' },\n          { name: 'initCode', type: 'bytes', internalType: 'bytes' },\n          { name: 'callData', type: 'bytes', internalType: 'bytes' },\n          {\n            name: 'accountGasLimits',\n            type: 'bytes32',\n            internalType: 'bytes32',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n            internalType: 'uint256',\n          },\n          { name: 'gasFees', type: 'bytes32', internalType: 'bytes32' },\n          {\n            name: 'paymasterAndData',\n            type: 'bytes',\n            internalType: 'bytes',\n          },\n          { name: 'signature', type: 'bytes', internalType: 'bytes' },\n        ],\n      },\n      { name: 'userOpHash', type: 'bytes32', internalType: 'bytes32' },\n    ],\n    outputs: [{ name: 'vd', type: 'uint256', internalType: 'ValidationData' }],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'event',\n    name: 'ActionIdDisabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'actionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'ActionId',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'NonceIterated',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'account',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n      {\n        name: 'newValue',\n        type: 'uint256',\n        indexed: false,\n        internalType: 'uint256',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'PermissionIdpermitERC4337Paymaster',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n      {\n        name: 'enabled',\n        type: 'bool',\n        indexed: false,\n        internalType: 'bool',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'PolicyDisabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'policyType',\n        type: 'uint8',\n        indexed: false,\n        internalType: 'enum PolicyType',\n      },\n      {\n        name: 'policy',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'PolicyEnabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'policyType',\n        type: 'uint8',\n        indexed: false,\n        internalType: 'enum PolicyType',\n      },\n      {\n        name: 'policy',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'SessionCreated',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'account',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'SessionRemoved',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'SessionValidatorDisabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'sessionValidator',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'SessionValidatorEnabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        indexed: false,\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'sessionValidator',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n      {\n        name: 'smartAccount',\n        type: 'address',\n        indexed: false,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'error',\n    name: 'AssociatedArray_OutOfBounds',\n    inputs: [{ name: 'index', type: 'uint256', internalType: 'uint256' }],\n  },\n  {\n    type: 'error',\n    name: 'ChainIdMismatch',\n    inputs: [\n      {\n        name: 'providedChainId',\n        type: 'uint64',\n        internalType: 'uint64',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ChainIdMismatch',\n    inputs: [\n      {\n        name: 'providedChainId',\n        type: 'uint64',\n        internalType: 'uint64',\n      },\n    ],\n  },\n  { type: 'error', name: 'ForbiddenValidationData', inputs: [] },\n  {\n    type: 'error',\n    name: 'HashIndexOutOfBounds',\n    inputs: [{ name: 'index', type: 'uint256', internalType: 'uint256' }],\n  },\n  {\n    type: 'error',\n    name: 'HashMismatch',\n    inputs: [\n      {\n        name: 'providedHash',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n      { name: 'computedHash', type: 'bytes32', internalType: 'bytes32' },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'HashMismatch',\n    inputs: [\n      {\n        name: 'providedHash',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n      { name: 'computedHash', type: 'bytes32', internalType: 'bytes32' },\n    ],\n  },\n  { type: 'error', name: 'InvalidActionId', inputs: [] },\n  { type: 'error', name: 'InvalidCallTarget', inputs: [] },\n  { type: 'error', name: 'InvalidData', inputs: [] },\n  {\n    type: 'error',\n    name: 'InvalidEnableSignature',\n    inputs: [\n      { name: 'account', type: 'address', internalType: 'address' },\n      { name: 'hash', type: 'bytes32', internalType: 'bytes32' },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'InvalidISessionValidator',\n    inputs: [\n      {\n        name: 'sessionValidator',\n        type: 'address',\n        internalType: 'contract ISessionValidator',\n      },\n    ],\n  },\n  { type: 'error', name: 'InvalidMode', inputs: [] },\n  {\n    type: 'error',\n    name: 'InvalidPermissionId',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n  },\n  { type: 'error', name: 'InvalidSelfCall', inputs: [] },\n  {\n    type: 'error',\n    name: 'InvalidSession',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'InvalidSessionKeySignature',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      {\n        name: 'sessionValidator',\n        type: 'address',\n        internalType: 'address',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n      { name: 'userOpHash', type: 'bytes32', internalType: 'bytes32' },\n    ],\n  },\n  { type: 'error', name: 'InvalidTarget', inputs: [] },\n  {\n    type: 'error',\n    name: 'InvalidUserOpSender',\n    inputs: [{ name: 'sender', type: 'address', internalType: 'address' }],\n  },\n  { type: 'error', name: 'NoExecutionsInBatch', inputs: [] },\n  {\n    type: 'error',\n    name: 'NoPoliciesSet',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n  },\n  { type: 'error', name: 'PartlyEnabledActions', inputs: [] },\n  { type: 'error', name: 'PartlyEnabledPolicies', inputs: [] },\n  {\n    type: 'error',\n    name: 'PaymasterValidationNotEnabled',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'PolicyViolation',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'policy', type: 'address', internalType: 'address' },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'SignerNotFound',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'SignerNotFound',\n    inputs: [\n      {\n        name: 'permissionId',\n        type: 'bytes32',\n        internalType: 'PermissionId',\n      },\n      { name: 'account', type: 'address', internalType: 'address' },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'SmartSessionModuleAlreadyInstalled',\n    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],\n  },\n  { type: 'error', name: 'UnsupportedExecutionType', inputs: [] },\n  {\n    type: 'error',\n    name: 'UnsupportedPolicy',\n    inputs: [{ name: 'policy', type: 'address', internalType: 'address' }],\n  },\n  {\n    type: 'error',\n    name: 'UnsupportedSmartSessionMode',\n    inputs: [\n      {\n        name: 'mode',\n        type: 'uint8',\n        internalType: 'enum SmartSessionMode',\n      },\n    ],\n  },\n] as const\n", "import { AccountType } from '../../account'\nimport { Address, Hex } from 'viem'\n\nexport type Session = {\n  sessionValidator: Address\n  sessionValidatorInitData: Hex\n  // todo: make this optional with default 0\n  salt: Hex\n  // todo: make the below optional but require one of them to be defined\n  userOpPolicies: PolicyData[]\n  erc7739Policies: ERC7739Data\n  actions: ActionData[]\n  permitERC4337Paymaster: boolean\n  chainId: bigint\n}\n\nexport type SignedPermissions = {\n  permitGenericPolicy: boolean\n  permitAdminAccess: boolean\n  ignoreSecurityAttestations: boolean\n  permitERC4337Paymaster: boolean\n  userOpPolicies: PolicyData[]\n  erc7739Policies: ERC7739Data\n  actions: ActionData[]\n}\n\nexport type SignedSession = {\n  account: Address\n  permissions: SignedPermissions\n  sessionValidator: Address\n  sessionValidatorInitData: Hex\n  salt: Hex\n  smartSession: Address\n  nonce: bigint\n}\n\nexport type PolicyData = {\n  policy: Address\n  initData: Hex\n}\n\nexport type ERC7739Data = {\n  allowedERC7739Content: ERC7739Context[]\n  erc1271Policies: PolicyData[]\n}\n\nexport type ERC7739Context = {\n  appDomainSeparator: Hex\n  contentName: string[]\n}\n\nexport type ActionData = {\n  actionTargetSelector: Hex\n  actionTarget: Address\n  actionPolicies: PolicyData[]\n}\n\nexport const SmartSessionMode = {\n  USE: '0x00' as Hex,\n  ENABLE: '0x01' as Hex,\n  UNSAFE_ENABLE: '0x02' as Hex,\n} as const\n\nexport type SmartSessionModeType =\n  (typeof SmartSessionMode)[keyof typeof SmartSessionMode]\n\nexport type EnableSession = {\n  chainDigestIndex: number\n  hashesAndChainIds: ChainDigest[]\n  sessionToEnable: Session\n  permissionEnableSig: Hex\n}\n\nexport type EnableSessionData = {\n  enableSession: EnableSession\n  validator: Address\n  accountType: AccountType\n}\n\nexport type ChainDigest = {\n  chainId: bigint\n  sessionDigest: Hex\n}\n\nexport type ChainSession = {\n  chainId: bigint\n  session: SignedSession\n}\n", "import { Address, encodeAbiParameters, encodePacked } from 'viem'\nimport { Module } from '../types'\nimport { Session } from './types'\nimport { installSmartSessionsAbi } from './abi'\nimport { SmartSessionMode } from './types'\nimport { CallType } from '../../module/types'\nimport { GLOBAL_CONSTANTS } from '../../constants'\n\ntype Params = {\n  sessions?: Session[]\n  useRegistry?: boolean\n  hook?: Address\n}\n\nexport const getSmartSessionsValidator = ({\n  sessions,\n  useRegistry = true,\n  hook,\n}: Params): Module => {\n  return {\n    address: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    module: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    initData: sessions?.length\n      ? encodePacked(\n          ['bytes1', 'bytes'],\n          [\n            useRegistry\n              ? SmartSessionMode.ENABLE\n              : SmartSessionMode.UNSAFE_ENABLE,\n            encodeAbiParameters(installSmartSessionsAbi, [sessions]),\n          ],\n        )\n      : '0x',\n    deInitData: '0x',\n    additionalContext: '0x',\n    type: 'validator',\n    hook,\n  }\n}\n\nexport const getSmartSessionsCompatibilityFallback = (): Module => {\n  return {\n    address: GLOBAL_CONSTANTS.SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS,\n    module: GLOBAL_CONSTANTS.SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS,\n    initData: '0x',\n    deInitData: '0x',\n    selector: '0x84b0196e',\n    callType: CallType.CALLTYPE_SINGLE,\n    additionalContext: '0x',\n    type: 'fallback',\n  }\n}\n", "import {\n  encodePacked,\n  Hex,\n  PublicClient,\n  hashTypedData,\n  encodeAbiParameters,\n  Address,\n  encodeFunctionData,\n  keccak256,\n  slice,\n  decodeAbiParameters,\n} from 'viem'\nimport { abi, encodeEnableSessionSignatureAbi } from './abi'\nimport {\n  ActionData,\n  ChainSession,\n  EnableSessionData,\n  ERC7739Context,\n  ERC7739Data,\n  PolicyData,\n  Session,\n  SmartSessionMode,\n  SmartSessionModeType,\n} from './types'\nimport { LibZip } from 'solady'\nimport { Account, AccountType, Execution, isAccount } from '../../account'\nimport { GLOBAL_CONSTANTS } from '../../constants'\n\nexport const getPermissionId = ({ session }: { session: Session }): Hex => {\n  return keccak256(\n    encodeAbiParameters(\n      [\n        {\n          type: 'address',\n          name: 'sessionValidator',\n        },\n        {\n          type: 'bytes',\n          name: 'sessionValidatorInitData',\n        },\n        {\n          type: 'bytes32',\n          name: 'salt',\n        },\n      ],\n      [\n        session.sessionValidator,\n        session.sessionValidatorInitData,\n        session.salt,\n      ],\n    ),\n  )\n}\n\nexport const getActionId = async ({\n  target,\n  selector,\n}: {\n  target: Address\n  selector: Hex\n}) => {\n  return keccak256(encodePacked(['address', 'bytes4'], [target, selector]))\n}\n\nexport const getSessionNonce = async ({\n  client,\n  account,\n  permissionId,\n}: {\n  client: PublicClient\n  account: Account | Address\n  permissionId: Hex\n}) => {\n  return (await client.readContract({\n    address: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    abi,\n    functionName: 'getNonce',\n    args: [permissionId, isAccount(account) ? account.address : account],\n  })) as bigint\n}\n\nexport const getVerifySignatureResult = async ({\n  client,\n  account,\n  sender,\n  hash,\n  signature,\n}: {\n  client: PublicClient\n  account: Account\n  sender: Address\n  hash: Hex\n  signature: Hex\n}) => {\n  let calldata = encodeFunctionData({\n    abi,\n    functionName: 'isValidSignatureWithSender',\n    args: [sender, hash, signature],\n  })\n  const { data } = await client.call({\n    account: account.address,\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    data: calldata,\n  })\n\n  return (\n    data ===\n    '0x1626ba7e00000000000000000000000000000000000000000000000000000000'\n  )\n}\n\nexport const getAccountEIP712Domain = async ({\n  client,\n  account,\n}: {\n  client: PublicClient\n  account: Account\n}) => {\n  let data = await client.readContract({\n    address: account.address,\n    abi: [\n      {\n        type: 'function',\n        name: 'eip712Domain',\n        inputs: [],\n        outputs: [\n          {\n            type: 'bytes1',\n            name: 'fields,',\n          },\n          {\n            type: 'string',\n            name: 'name',\n          },\n          {\n            type: 'string',\n            name: 'version',\n          },\n          {\n            type: 'uint256',\n            name: 'chainId',\n          },\n          {\n            type: 'address',\n            name: 'verifyingContract',\n          },\n          {\n            type: 'bytes32',\n            name: 'salt',\n          },\n          {\n            type: 'uint256[]',\n            name: 'extensions',\n          },\n        ],\n        stateMutability: 'view',\n        constant: true,\n      },\n    ],\n    functionName: 'eip712Domain',\n    args: [],\n  })\n  return {\n    name: data[1],\n    version: data[2],\n    chainId: data[3],\n    verifyingContract: data[4],\n    salt: data[5],\n  }\n}\n\nexport const isSessionEnabled = async ({\n  client,\n  account,\n  permissionId,\n}: {\n  client: PublicClient\n  account: Account | Address\n  permissionId: Hex\n}) => {\n  return (await client.readContract({\n    address: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    abi,\n    functionName: 'isPermissionEnabled',\n    args: [permissionId, isAccount(account) ? account.address : account],\n  })) as boolean\n}\n\nexport const getSessionDigest = async ({\n  client,\n  account,\n  session,\n  permissionId,\n  mode,\n}: {\n  client: PublicClient\n  account: Account\n  session: Session\n  permissionId: Hex\n  mode: SmartSessionModeType\n}) => {\n  return (await client.readContract({\n    address: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    abi,\n    functionName: 'getSessionDigest',\n    args: [permissionId, account.address, session, Number(mode)],\n  })) as Hex\n}\n\nexport const encodeSmartSessionSignature = ({\n  mode,\n  permissionId,\n  signature,\n  enableSessionData,\n}: {\n  mode: SmartSessionModeType\n  permissionId: Hex\n  signature: Hex\n  enableSessionData?: EnableSessionData\n}) => {\n  switch (mode) {\n    case SmartSessionMode.USE:\n      return encodePacked(\n        ['bytes1', 'bytes32', 'bytes'],\n        [mode, permissionId, signature],\n      )\n    case SmartSessionMode.ENABLE:\n    case SmartSessionMode.UNSAFE_ENABLE:\n      if (!enableSessionData) {\n        throw new Error('enableSession is required for ENABLE mode')\n      }\n      return encodePacked(\n        ['bytes1', 'bytes'],\n        [\n          mode,\n          LibZip.flzCompress(\n            encodeEnableSessionSignature({ enableSessionData, signature }),\n          ) as Hex,\n        ],\n      )\n    default:\n      throw new Error(`Unknown mode ${mode}`)\n  }\n}\n\nexport const encodeUseOrEnableSmartSessionSignature = async ({\n  account,\n  client,\n  permissionId,\n  signature,\n  enableSessionData,\n}: {\n  account: Account\n  client: PublicClient\n  permissionId: Hex\n  signature: Hex\n  enableSessionData: EnableSessionData\n}) => {\n  const sessionEnabled = await isSessionEnabled({\n    account,\n    client,\n    permissionId,\n  })\n\n  return sessionEnabled\n    ? encodePacked(\n        ['bytes1', 'bytes32', 'bytes'],\n        [SmartSessionMode.USE, permissionId, signature],\n      )\n    : encodePacked(\n        ['bytes1', 'bytes'],\n        [\n          SmartSessionMode.ENABLE,\n          LibZip.flzCompress(\n            encodeEnableSessionSignature({ enableSessionData, signature }),\n          ) as Hex,\n        ],\n      )\n}\n\nexport const decodeSmartSessionSignature = ({\n  signature,\n  account,\n}: {\n  signature: Hex\n  account?: Account\n}) => {\n  const mode = slice(signature, 0, 1)\n  let permissionId\n  let compressedData\n  let data\n\n  switch (mode) {\n    case SmartSessionMode.USE:\n      permissionId = slice(signature, 1, 33)\n      const decodedSignature = slice(signature, 33)\n      return {\n        mode,\n        permissionId,\n        signature: decodedSignature,\n      }\n    case SmartSessionMode.ENABLE:\n    case SmartSessionMode.UNSAFE_ENABLE:\n      compressedData = slice(signature, 1)\n      data = LibZip.flzDecompress(compressedData) as Hex\n\n      if (!account) {\n        throw new Error('account is required for ENABLE mode decoding')\n      }\n\n      const decodedData = decodeAbiParameters(\n        encodeEnableSessionSignatureAbi,\n        data,\n      )\n      const enableSession = decodedData[0]\n\n      const permissionEnableSigSlice = account.type === 'kernel' ? 1 : 0\n      if (\n        account.type === 'kernel' &&\n        !enableSession.permissionEnableSig.startsWith('0x01')\n      ) {\n        throw new Error('Invalid permissionEnableSig for kernel account')\n      }\n      const permissionEnableSig = slice(\n        enableSession.permissionEnableSig,\n        20 + permissionEnableSigSlice,\n      )\n      const validator = slice(\n        enableSession.permissionEnableSig,\n        0 + permissionEnableSigSlice,\n        20 + permissionEnableSigSlice,\n      )\n      return {\n        mode: mode,\n        permissionId: keccak256(\n          encodeAbiParameters(\n            [\n              {\n                type: 'address',\n                name: 'sessionValidator',\n              },\n              {\n                type: 'bytes',\n                name: 'sessionValidatorInitData',\n              },\n              {\n                type: 'bytes32',\n                name: 'salt',\n              },\n            ],\n            [\n              enableSession.sessionToEnable.sessionValidator,\n              enableSession.sessionToEnable.sessionValidatorInitData,\n              enableSession.sessionToEnable.salt,\n            ],\n          ),\n        ),\n        signature: decodedData[1],\n        enableSessionData: {\n          enableSession: {\n            chainDigestIndex: enableSession.chainDigestIndex,\n            hashesAndChainIds: enableSession.hashesAndChainIds,\n            sessionToEnable: enableSession.sessionToEnable,\n            permissionEnableSig: permissionEnableSig,\n          },\n          validator: validator,\n          accountType: account.type,\n        } as EnableSessionData,\n      }\n    default:\n      throw new Error(`Unknown mode ${mode}`)\n  }\n}\n\nexport const hashChainSessions = (chainSessions: ChainSession[]): Hex => {\n  return hashTypedData({\n    domain: {\n      name: 'SmartSession',\n      version: '1',\n    },\n    types: {\n      PolicyData: [\n        { name: 'policy', type: 'address' },\n        { name: 'initData', type: 'bytes' },\n      ],\n      ActionData: [\n        { name: 'actionTargetSelector', type: 'bytes4' },\n        { name: 'actionTarget', type: 'address' },\n        { name: 'actionPolicies', type: 'PolicyData[]' },\n      ],\n      ERC7739Context: [\n        { name: 'appDomainSeparator', type: 'bytes32' },\n        { name: 'contentName', type: 'string[]' },\n      ],\n      ERC7739Data: [\n        { name: 'allowedERC7739Content', type: 'ERC7739Context[]' },\n        { name: 'erc1271Policies', type: 'PolicyData[]' },\n      ],\n      SignedPermissions: [\n        { name: 'permitGenericPolicy', type: 'bool' },\n        { name: 'permitAdminAccess', type: 'bool' },\n        { name: 'ignoreSecurityAttestations', type: 'bool' },\n        { name: 'permitERC4337Paymaster', type: 'bool' },\n        { name: 'userOpPolicies', type: 'PolicyData[]' },\n        { name: 'erc7739Policies', type: 'ERC7739Data' },\n        { name: 'actions', type: 'ActionData[]' },\n      ],\n      SignedSession: [\n        { name: 'account', type: 'address' },\n        { name: 'permissions', type: 'SignedPermissions' },\n        { name: 'sessionValidator', type: 'address' },\n        { name: 'sessionValidatorInitData', type: 'bytes' },\n        { name: 'salt', type: 'bytes32' },\n        { name: 'smartSession', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n      ],\n      ChainSession: [\n        { name: 'chainId', type: 'uint64' },\n        { name: 'session', type: 'SignedSession' },\n      ],\n      MultiChainSession: [\n        { name: 'sessionsAndChainIds', type: 'ChainSession[]' },\n      ],\n    },\n    primaryType: 'MultiChainSession',\n    message: {\n      sessionsAndChainIds: chainSessions,\n    },\n  })\n}\n\nconst encodeEnableSessionSignature = ({\n  enableSessionData,\n  signature,\n}: {\n  enableSessionData: EnableSessionData\n  signature: Hex\n}) => {\n  return encodeAbiParameters(encodeEnableSessionSignatureAbi, [\n    {\n      chainDigestIndex: enableSessionData.enableSession.chainDigestIndex,\n      hashesAndChainIds: enableSessionData.enableSession.hashesAndChainIds,\n      sessionToEnable: enableSessionData.enableSession.sessionToEnable,\n      permissionEnableSig: formatPermissionEnableSig({\n        signature: enableSessionData.enableSession.permissionEnableSig,\n        validator: enableSessionData.validator,\n        accountType: enableSessionData.accountType,\n      }),\n    },\n    signature,\n  ])\n}\n\nexport const formatPermissionEnableSig = ({\n  signature,\n  validator,\n  accountType,\n}: {\n  signature: Hex\n  validator: Address\n  accountType: AccountType\n}) => {\n  switch (accountType) {\n    case 'erc7579-implementation':\n      return encodePacked(['address', 'bytes'], [validator, signature])\n    case 'nexus':\n      return encodePacked(['address', 'bytes'], [validator, signature])\n    case 'safe':\n      return encodePacked(['address', 'bytes'], [validator, signature])\n    case 'kernel':\n      return encodePacked(\n        ['bytes1', 'address', 'bytes'],\n        ['0x01', validator, signature],\n      )\n    default:\n      throw new Error(`Unsupported account type: ${accountType}`)\n  }\n}\n\nexport const getEnableSessionsAction = ({\n  sessions,\n}: {\n  sessions: Session[]\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'enableSessions',\n    args: [sessions],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getRemoveSessionAction = ({\n  permissionId,\n}: {\n  permissionId: Hex\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'removeSession',\n    args: [permissionId],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getEnableUserOpPoliciesAction = ({\n  permissionId,\n  userOpPolicies,\n}: {\n  permissionId: Hex\n  userOpPolicies: PolicyData[]\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'enableUserOpPolicies',\n    args: [permissionId, userOpPolicies],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getDisableUserOpPoliciesAction = ({\n  permissionId,\n  userOpPolicies,\n}: {\n  permissionId: Hex\n  userOpPolicies: Address[]\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'disableUserOpPolicies',\n    args: [permissionId, userOpPolicies],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getEnableERC1271PoliciesAction = ({\n  permissionId,\n  erc1271Policies,\n}: {\n  permissionId: Hex\n  erc1271Policies: ERC7739Data\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'enableERC1271Policies',\n    args: [permissionId, erc1271Policies],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getDisableERC1271PoliciesAction = ({\n  permissionId,\n  policies,\n  contents,\n}: {\n  permissionId: Hex\n  policies: Address[]\n  contents: ERC7739Context[]\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'disableERC1271Policies',\n    args: [permissionId, policies, contents],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getEnableActionPoliciesAction = ({\n  permissionId,\n  actionPolicies,\n}: {\n  permissionId: Hex\n  actionPolicies: ActionData[]\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'enableActionPolicies',\n    args: [permissionId, actionPolicies],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getDisableActionPoliciesAction = ({\n  permissionId,\n  actionId,\n  policies,\n}: {\n  permissionId: Hex\n  actionId: Hex\n  policies: Address[]\n}): Execution => {\n  const data = encodeFunctionData({\n    abi,\n    functionName: 'disableActionPolicies',\n    args: [permissionId, actionId, policies],\n  })\n\n  return {\n    to: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    target: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n    value: BigInt(0),\n    callData: data,\n    data,\n  }\n}\n\nexport const getEnableSessionDetails = async ({\n  sessions,\n  sessionIndex,\n  enableMode,\n  account,\n  clients,\n  enableValidatorAddress,\n  permitGenericPolicy = false,\n  permitAdminAccess = false,\n  ignoreSecurityAttestations = false,\n  sessionNonces,\n}: {\n  sessions: Session[]\n  sessionIndex?: number\n  enableMode?: SmartSessionModeType\n  account: Account\n  clients: PublicClient[]\n  enableValidatorAddress?: Address\n  permitGenericPolicy?: boolean\n  permitAdminAccess?: boolean\n  ignoreSecurityAttestations?: boolean\n  sessionNonces?: bigint[]\n}) => {\n  const chainDigests = []\n  const chainSessions: ChainSession[] = []\n  for (const session of sessions) {\n    const permissionId = getPermissionId({\n      session,\n    })\n\n    const client = clients.find(\n      (c) => BigInt(c.chain?.id ?? 0) === session.chainId,\n    )\n\n    if (!client) {\n      throw new Error(`Client not found for chainId ${session.chainId}`)\n    }\n\n    const currentIndex = sessions.indexOf(session)\n\n    const sessionNonce =\n      sessionNonces?.[currentIndex] ??\n      (await getSessionNonce({\n        client,\n        account,\n        permissionId,\n      }))\n\n    const sessionDigest = await getSessionDigest({\n      client,\n      account,\n      session,\n      mode: enableMode || SmartSessionMode.ENABLE,\n      permissionId,\n    })\n\n    chainDigests.push({\n      chainId: session.chainId,\n      sessionDigest,\n    })\n\n    chainSessions.push({\n      chainId: session.chainId,\n      session: {\n        ...session,\n        permissions: {\n          permitGenericPolicy: permitGenericPolicy,\n          permitAdminAccess: permitAdminAccess,\n          ignoreSecurityAttestations: ignoreSecurityAttestations,\n          permitERC4337Paymaster: session.permitERC4337Paymaster,\n          userOpPolicies: session.userOpPolicies,\n          erc7739Policies: session.erc7739Policies,\n          actions: session.actions,\n        },\n        account: account.address,\n        smartSession: GLOBAL_CONSTANTS.SMART_SESSIONS_ADDRESS,\n        nonce: sessionNonce,\n      },\n    })\n  }\n\n  const permissionEnableHash = hashChainSessions(chainSessions)\n\n  const sessionToEnable = sessions[sessionIndex || 0]\n  const permissionId = getPermissionId({\n    session: sessionToEnable,\n  })\n\n  return {\n    permissionEnableHash,\n    mode: enableMode || SmartSessionMode.ENABLE,\n    permissionId,\n    signature: '0x' as Hex,\n    enableSessionData: {\n      enableSession: {\n        chainDigestIndex: sessionIndex || 0,\n        hashesAndChainIds: chainDigests,\n        sessionToEnable,\n        permissionEnableSig: '0x' as Hex,\n      },\n      validator: enableValidatorAddress ?? sessionToEnable.sessionValidator,\n      accountType: account.type,\n    },\n  }\n}\n", "import { Policy } from '../types'\nimport { Address, encodeAbiParameters } from 'viem'\nimport { GLOBAL_CONSTANTS } from '../../../../constants'\n\ntype Params = {\n  token: Address\n  limit: bigint\n}[]\n\nexport const getSpendingLimitsPolicy = (params: Params): Policy => {\n  return {\n    policy: GLOBAL_CONSTANTS.SPENDING_LIMITS_POLICY_ADDRESS,\n    address: GLOBAL_CONSTANTS.SPENDING_LIMITS_POLICY_ADDRESS,\n    initData: encodeAbiParameters(\n      [{ type: 'address[]' }, { type: 'uint256[]' }],\n      [params.map(({ token }) => token), params.map(({ limit }) => limit)],\n    ),\n  }\n}\n", "import { Policy } from '../types'\nimport { GLOBAL_CONSTANTS } from '../../../../constants'\n\nexport const getSudoPolicy = (): Policy => {\n  return {\n    policy: GLOBAL_CONSTANTS.SUDO_POLICY_ADDRESS,\n    address: GLOBAL_CONSTANTS.SUDO_POLICY_ADDRESS,\n    initData: '0x',\n  }\n}\n", "import { Address } from 'viem'\n\nexport const UNIVERSAL_ACTION_POLICY_ADDRESS: Address =\n  '0x0000006DDA6c463511C4e9B05CFc34C1247fCF1F'\n\nexport const MAX_RULES = 16\n", "import { MAX_RULES } from './constants'\nimport { Policy } from '../types'\nimport { encodeAbiParameters } from 'viem'\nimport { abi } from './abi'\nimport { ActionConfig } from './types'\nimport { GLOBAL_CONSTANTS } from '../../../../constants'\n\nexport const getUniversalActionPolicy = (\n  actionConfig: ActionConfig,\n): Policy => {\n  if (actionConfig.paramRules.rules.length > MAX_RULES) {\n    throw new Error(`Max number of rules is ${MAX_RULES}`)\n  }\n\n  return {\n    policy: GLOBAL_CONSTANTS.UNIVERSAL_ACTION_POLICY_ADDRESS,\n    address: GLOBAL_CONSTANTS.UNIVERSAL_ACTION_POLICY_ADDRESS,\n    initData: encodeAbiParameters(\n      [\n        {\n          components: [\n            {\n              name: 'valueLimitPerUse',\n              type: 'uint256',\n            },\n            {\n              components: [\n                {\n                  name: 'length',\n                  type: 'uint256',\n                },\n                {\n                  components: [\n                    {\n                      name: 'condition',\n                      type: 'uint8',\n                    },\n                    {\n                      name: 'offset',\n                      type: 'uint64',\n                    },\n                    {\n                      name: 'isLimited',\n                      type: 'bool',\n                    },\n                    {\n                      name: 'ref',\n                      type: 'bytes32',\n                    },\n                    {\n                      components: [\n                        {\n                          name: 'limit',\n                          type: 'uint256',\n                        },\n                        {\n                          name: 'used',\n                          type: 'uint256',\n                        },\n                      ],\n                      name: 'usage',\n                      type: 'tuple',\n                    },\n                  ],\n                  name: 'rules',\n                  type: 'tuple[16]',\n                },\n              ],\n              name: 'paramRules',\n              type: 'tuple',\n            },\n          ],\n          name: 'ActionConfig',\n          type: 'tuple',\n        },\n      ],\n      [actionConfig],\n    ),\n  }\n}\n", "import { Policy } from '../types'\nimport { encodePacked } from 'viem'\nimport { GLOBAL_CONSTANTS } from '../../../../constants'\n\ntype Params = {\n  validUntil: number\n  validAfter: number\n}\n\nexport const getTimeFramePolicy = (param: Params): Policy => {\n  return {\n    policy: GLOBAL_CONSTANTS.TIME_FRAME_POLICY_ADDRESS,\n    address: GLOBAL_CONSTANTS.TIME_FRAME_POLICY_ADDRESS,\n    initData: encodePacked(\n      ['uint128', 'uint128'],\n      [BigInt(param.validUntil), BigInt(param.validAfter)],\n    ),\n  }\n}\n", "import { Policy } from '../types'\nimport { encodePacked } from 'viem'\nimport { GLOBAL_CONSTANTS } from '../../../../constants'\n\ntype Params = {\n  limit: bigint\n}\n\nexport const getUsageLimitPolicy = (params: Params): Policy => {\n  return {\n    policy: GLOBAL_CONSTANTS.USAGE_LIMIT_POLICY_ADDRESS,\n    address: GLOBAL_CONSTANTS.USAGE_LIMIT_POLICY_ADDRESS,\n    initData: encodePacked(['uint128'], [params.limit]),\n  }\n}\n", "import { GLOBAL_CONSTANTS } from '../../../../constants'\nimport { Policy } from '../types'\nimport { encodeAbiParameters } from 'viem'\n\ntype Params = {\n  limit: bigint\n}\n\nexport const getValueLimitPolicy = (params: Params): Policy => {\n  return {\n    policy: GLOBAL_CONSTANTS.VALUE_LIMIT_POLICY_ADDRESS,\n    address: GLOBAL_CONSTANTS.VALUE_LIMIT_POLICY_ADDRESS,\n    initData: encodeAbiParameters([{ type: 'uint256' }], [params.limit]),\n  }\n}\n", "import { Hex } from 'viem'\n\nexport enum ParamCondition {\n  EQUAL = 0,\n  GREATER_THAN = 1,\n  LESS_THAN = 2,\n  GREATER_THAN_OR_EQUAL = 3,\n  LESS_THAN_OR_EQUAL = 4,\n  NOT_EQUAL = 5,\n  IN_RANGE = 6,\n}\n\n// LimitUsage struct\nexport interface LimitUsage {\n  limit: bigint // uint256 in Solidity\n  used: bigint // uint256 in Solidity\n}\n\n// ParamRule struct\nexport interface ParamRule {\n  condition: ParamCondition\n  offset: bigint\n  isLimited: boolean\n  ref: Hex\n  usage: LimitUsage\n}\n\n// ParamRules struct with fixed length array\nexport interface ParamRules {\n  length: bigint\n  rules: [\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n    ParamRule,\n  ] // ParamRule[16] in Solidity\n}\n\n// ActionConfig struct\nexport interface ActionConfig {\n  valueLimitPerUse: bigint // uint256 in Solidity\n  paramRules: ParamRules\n}\n", "import { Address } from 'viem'\n\nexport const REGISTRY_ADDRESS: Address =\n  '0x000000000069E2a187AEFFb852bF3cCdC95151B2'\nexport const RHINESTONE_ATTESTER_ADDRESS: Address =\n  '0x000000333034E9f539ce08819E12c1b8Cb29084d'\nexport const MOCK_ATTESTER_ADDRESS: Address =\n  '0xA4C777199658a41688E9488c4EcbD7a2925Cc23A'\n", "import { Address } from 'viem'\n\nexport const UNIVERSAL_EMAIL_RECOVERY_ADDRESS: Address =\n  '0x636632FA22052d2a4Fb6e3Bab84551B620b9C1F9'\n\nexport const MAX_VALIDATORS = 32\nexport const MAX_NUMBER_OF_GUARDIANS = 32\nexport const MINIMUM_RECOVERY_WINDOW = 2 * 24 * 60 * 60 // 2 days in seconds;\nexport const CANCEL_EXPIRED_RECOVERY_COOLDOWN = 24 * 60 * 60 // 1 day in seconds;\n", "import {\n    type Chain,\n    type Client,\n    ContractFunctionExecutionError,\n    type Transport,\n    decodeFunctionResult,\n    encodeFunctionData\n} from \"viem\"\nimport type {\n    GetSmartAccountParameter,\n    SmartAccount\n} from \"viem/account-abstraction\"\nimport { call, readContract } from \"viem/actions\"\nimport { getAction } from \"viem/utils\"\nimport { AccountNotFoundError } from \"../../errors/index.js\"\n\nexport async function accountId<TSmartAccount extends SmartAccount | undefined>(\n    client: Client<Transport, Chain | undefined, TSmartAccount>,\n    args?: GetSmartAccountParameter<TSmartAccount>\n): Promise<string> {\n    let account_ = client.account\n\n    if (args) {\n        account_ = args.account as TSmartAccount\n    }\n\n    if (!account_) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const account = account_ as SmartAccount\n\n    const publicClient = account.client\n\n    const abi = [\n        {\n            name: \"accountId\",\n            type: \"function\",\n            stateMutability: \"view\",\n            inputs: [],\n            outputs: [\n                {\n                    type: \"string\",\n                    name: \"accountImplementationId\"\n                }\n            ]\n        }\n    ] as const\n\n    try {\n        return await getAction(\n            publicClient,\n            readContract,\n            \"readContract\"\n        )({\n            abi,\n            functionName: \"accountId\",\n            address: await account.getAddress()\n        })\n    } catch (error) {\n        if (error instanceof ContractFunctionExecutionError) {\n            const { factory, factoryData } = await account.getFactoryArgs()\n\n            const result = await getAction(\n                publicClient,\n                call,\n                \"call\"\n            )({\n                factory: factory,\n                factoryData: factoryData,\n                to: account.address,\n                data: encodeFunctionData({\n                    abi,\n                    functionName: \"accountId\"\n                })\n            })\n\n            if (!result || !result.data) {\n                throw new Error(\"accountId result is empty\")\n            }\n\n            return decodeFunctionResult({\n                abi,\n                functionName: \"accountId\",\n                data: result.data\n            })\n        }\n\n        throw error\n    }\n}\n", "import type { Address, Client, Hex, OneOf, SignedAuthorization } from \"viem\"\nimport {\n    type GetSmartAccountParameter,\n    type PaymasterActions,\n    type SmartAccount,\n    sendUserOperation\n} from \"viem/account-abstraction\"\nimport { getAction, parseAccount } from \"viem/utils\"\nimport { AccountNotFoundError } from \"../../errors/index.js\"\nimport { encodeInstallModule } from \"../../utils/encodeInstallModule.js\"\nimport type { ModuleType } from \"./supportsModule.js\"\n\nexport type InstallModuleParameters<\n    TSmartAccount extends SmartAccount | undefined\n> = GetSmartAccountParameter<TSmartAccount> & {\n    authorization?: SignedAuthorization<number> | undefined\n    type: ModuleType\n    address: Address\n    maxFeePerGas?: bigint\n    maxPriorityFeePerGas?: bigint\n    nonce?: bigint\n    calls?: readonly {\n        to: Address\n        value?: bigint | undefined\n        data?: Hex | undefined\n    }[]\n    paymaster?:\n        | Address\n        | true\n        | {\n              /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\n              getPaymasterData?:\n                  | PaymasterActions[\"getPaymasterData\"]\n                  | undefined\n              /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\n              getPaymasterStubData?:\n                  | PaymasterActions[\"getPaymasterStubData\"]\n                  | undefined\n          }\n        | undefined\n    /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\n    paymasterContext?: unknown | undefined\n} & OneOf<\n        | {\n              context: Hex\n          }\n        | {\n              initData: Hex\n          }\n    >\n\nexport function installModule<TSmartAccount extends SmartAccount | undefined>(\n    client: Client,\n    parameters: InstallModuleParameters<TSmartAccount>\n): Promise<Hex> {\n    const {\n        account: account_ = client.account,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        address,\n        context,\n        initData,\n        type,\n        calls,\n        paymaster,\n        authorization,\n        paymasterContext\n    } = parameters\n\n    if (!account_) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const account = parseAccount(account_) as SmartAccount\n\n    return getAction(\n        client,\n        sendUserOperation,\n        \"sendUserOperation\"\n    )({\n        calls: [\n            ...encodeInstallModule({\n                account,\n                modules: [{ address, context: context ?? initData, type }]\n            }),\n            ...(calls ?? [])\n        ],\n        paymaster,\n        paymasterContext,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        authorization,\n        account\n    })\n}\n", "import type {\n    Address,\n    Chain,\n    Client,\n    Hex,\n    SignedAuthorization,\n    Transport\n} from \"viem\"\nimport {\n    type PaymasterActions,\n    type SmartAccount,\n    sendUserOperation\n} from \"viem/account-abstraction\"\nimport { getAction, parseAccount } from \"viem/utils\"\nimport { AccountNotFoundError } from \"../../errors/index.js\"\nimport {\n    type EncodeInstallModuleParameters,\n    encodeInstallModule\n} from \"../../utils/encodeInstallModule.js\"\n\nexport type InstallModulesParameters<\n    TSmartAccount extends SmartAccount | undefined\n> = EncodeInstallModuleParameters<TSmartAccount> & {\n    authorization?: SignedAuthorization<number> | undefined\n    maxFeePerGas?: bigint\n    maxPriorityFeePerGas?: bigint\n    nonce?: bigint\n    calls?: readonly {\n        to: Address\n        value?: bigint | undefined\n        data?: Hex | undefined\n    }[]\n    paymaster?:\n        | Address\n        | true\n        | {\n              /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\n              getPaymasterData?:\n                  | PaymasterActions[\"getPaymasterData\"]\n                  | undefined\n              /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\n              getPaymasterStubData?:\n                  | PaymasterActions[\"getPaymasterStubData\"]\n                  | undefined\n          }\n        | undefined\n    /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\n    paymasterContext?: unknown | undefined\n}\n\nexport async function installModules<\n    TSmartAccount extends SmartAccount | undefined\n>(\n    client: Client<Transport, Chain | undefined, TSmartAccount>,\n    parameters: InstallModulesParameters<TSmartAccount>\n): Promise<Hex> {\n    const {\n        account: account_ = client.account,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        modules,\n        paymaster,\n        paymasterContext,\n        authorization,\n        calls\n    } = parameters\n\n    if (!account_) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const account = parseAccount(account_) as SmartAccount\n    return getAction(\n        client,\n        sendUserOperation,\n        \"sendUserOperation\"\n    )({\n        calls: [\n            ...encodeInstallModule({\n                account,\n                modules\n            }),\n            ...(calls ?? [])\n        ],\n        paymaster,\n        paymasterContext,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        authorization,\n        nonce,\n        account: account\n    })\n}\n", "import {\n    type Address,\n    type Chain,\n    type Client,\n    ContractFunctionExecutionError,\n    type Hex,\n    type OneOf,\n    type Transport,\n    decodeFunctionResult,\n    encodeFunctionData,\n    getAddress\n} from \"viem\"\nimport type {\n    GetSmartAccountParameter,\n    SmartAccount\n} from \"viem/account-abstraction\"\nimport { call, readContract } from \"viem/actions\"\nimport { getAction, parseAccount } from \"viem/utils\"\nimport { AccountNotFoundError } from \"../../errors/index.js\"\nimport { type ModuleType, parseModuleTypeId } from \"./supportsModule.js\"\n\nexport type IsModuleInstalledParameters<\n    TSmartAccount extends SmartAccount | undefined\n> = GetSmartAccountParameter<TSmartAccount> & {\n    type: ModuleType\n    address: Address\n} & OneOf<\n        | {\n              additionalContext: Hex\n          }\n        | {\n              context: Hex\n          }\n    >\n\nexport async function isModuleInstalled<\n    TSmartAccount extends SmartAccount | undefined\n>(\n    client: Client<Transport, Chain | undefined, TSmartAccount>,\n    parameters: IsModuleInstalledParameters<TSmartAccount>\n): Promise<boolean> {\n    const {\n        account: account_ = client.account,\n        address,\n        context,\n        additionalContext\n    } = parameters\n\n    if (!account_) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const account = parseAccount(account_) as SmartAccount\n\n    const publicClient = account.client\n\n    const abi = [\n        {\n            type: \"function\",\n            name: \"isModuleInstalled\",\n            inputs: [\n                {\n                    name: \"moduleType\",\n                    type: \"uint256\",\n                    internalType: \"uint256\"\n                },\n                { name: \"module\", type: \"address\", internalType: \"address\" },\n                {\n                    name: \"additionalContext\",\n                    type: \"bytes\",\n                    internalType: \"bytes\"\n                }\n            ],\n            outputs: [{ name: \"\", type: \"bool\", internalType: \"bool\" }],\n            stateMutability: \"view\"\n        }\n    ] as const\n\n    try {\n        return await getAction(\n            publicClient,\n            readContract,\n            \"readContract\"\n        )({\n            abi,\n            functionName: \"isModuleInstalled\",\n            args: [\n                parseModuleTypeId(parameters.type),\n                getAddress(address),\n                context ?? additionalContext\n            ],\n            address: account.address\n        })\n    } catch (error) {\n        if (error instanceof ContractFunctionExecutionError) {\n            const { factory, factoryData } = await account.getFactoryArgs()\n\n            const result = await getAction(\n                publicClient,\n                call,\n                \"call\"\n            )({\n                factory: factory,\n                factoryData: factoryData,\n                to: account.address,\n                data: encodeFunctionData({\n                    abi,\n                    functionName: \"isModuleInstalled\",\n                    args: [\n                        parseModuleTypeId(parameters.type),\n                        getAddress(address),\n                        context ?? additionalContext\n                    ]\n                })\n            })\n\n            if (!result || !result.data) {\n                throw new Error(\"accountId result is empty\")\n            }\n\n            return decodeFunctionResult({\n                abi,\n                functionName: \"isModuleInstalled\",\n                data: result.data\n            })\n        }\n\n        throw error\n    }\n}\n", "import {\n    type Address,\n    type Hex,\n    type OneOf,\n    encodeFunctionData,\n    getAddress\n} from \"viem\"\nimport type {\n    GetSmartAccountParameter,\n    SmartAccount\n} from \"viem/account-abstraction\"\nimport {\n    type ModuleType,\n    parseModuleTypeId\n} from \"../actions/erc7579/supportsModule.js\"\nimport { AccountNotFoundError } from \"../errors/index.js\"\n\nexport type EncodeUninstallModuleParameter = {\n    type: ModuleType\n    address: Address\n} & OneOf<\n    | {\n          context: Hex\n      }\n    | {\n          deInitData: Hex\n      }\n>\n\nexport type EncodeUninstallModuleParameters<\n    TSmartAccount extends SmartAccount | undefined\n> = GetSmartAccountParameter<TSmartAccount> & {\n    modules: EncodeUninstallModuleParameter[] | EncodeUninstallModuleParameter\n}\n\nexport function encodeUninstallModule<\n    TSmartAccount extends SmartAccount | undefined\n>(parameters: EncodeUninstallModuleParameters<TSmartAccount>) {\n    const account = parameters.account as SmartAccount\n\n    if (!account) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const modules = Array.isArray(parameters.modules)\n        ? parameters.modules\n        : [parameters.modules]\n\n    return modules.map(({ type, address, context, deInitData }) => ({\n        to: account.address,\n        value: BigInt(0),\n        data: encodeFunctionData({\n            abi: [\n                {\n                    type: \"function\",\n                    name: \"uninstallModule\",\n                    inputs: [\n                        {\n                            name: \"moduleType\",\n                            type: \"uint256\",\n                            internalType: \"uint256\"\n                        },\n                        {\n                            name: \"module\",\n                            type: \"address\",\n                            internalType: \"address\"\n                        },\n                        {\n                            name: \"deInitData\",\n                            type: \"bytes\",\n                            internalType: \"bytes\"\n                        }\n                    ],\n                    outputs: [],\n                    stateMutability: \"nonpayable\"\n                }\n            ],\n            functionName: \"uninstallModule\",\n            args: [\n                parseModuleTypeId(type),\n                getAddress(address),\n                context ?? deInitData\n            ]\n        })\n    }))\n}\n", "import type { Address, Chain, Client, Hex, OneOf, Transport } from \"viem\"\nimport {\n    type GetSmartAccountParameter,\n    type PaymasterActions,\n    type SmartAccount,\n    sendUserOperation\n} from \"viem/account-abstraction\"\nimport { getAction } from \"viem/utils\"\nimport { parseAccount } from \"viem/utils\"\nimport { AccountNotFoundError } from \"../../errors/index.js\"\nimport { encodeUninstallModule } from \"../../utils/encodeUninstallModule.js\"\nimport type { ModuleType } from \"./supportsModule.js\"\n\nexport type UninstallModuleParameters<\n    TSmartAccount extends SmartAccount | undefined\n> = GetSmartAccountParameter<TSmartAccount> & {\n    type: ModuleType\n    address: Address\n    maxFeePerGas?: bigint\n    maxPriorityFeePerGas?: bigint\n    nonce?: bigint\n    calls?: readonly {\n        to: Address\n        value?: bigint | undefined\n        data?: Hex | undefined\n    }[]\n    paymaster?:\n        | Address\n        | true\n        | {\n              /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\n              getPaymasterData?:\n                  | PaymasterActions[\"getPaymasterData\"]\n                  | undefined\n              /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\n              getPaymasterStubData?:\n                  | PaymasterActions[\"getPaymasterStubData\"]\n                  | undefined\n          }\n        | undefined\n    /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\n    paymasterContext?: unknown | undefined\n} & OneOf<\n        | {\n              deInitData: Hex\n          }\n        | {\n              context: Hex\n          }\n    >\n\nexport async function uninstallModule<\n    TSmartAccount extends SmartAccount | undefined\n>(\n    client: Client<Transport, Chain | undefined, TSmartAccount>,\n    parameters: UninstallModuleParameters<TSmartAccount>\n): Promise<Hex> {\n    const {\n        account: account_ = client.account,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        address,\n        context,\n        deInitData,\n        type,\n        calls,\n        paymaster,\n        paymasterContext\n    } = parameters\n\n    if (!account_) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const account = parseAccount(account_) as SmartAccount\n\n    return getAction(\n        client,\n        sendUserOperation,\n        \"sendUserOperation\"\n    )({\n        calls: [\n            ...encodeUninstallModule({\n                account,\n                modules: [{ type, address, context: context ?? deInitData }]\n            }),\n            ...(calls ?? [])\n        ],\n        paymaster,\n        paymasterContext,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        account: account\n    })\n}\n", "import type { Address, Chain, Client, Hex, Transport } from \"viem\"\nimport {\n    type PaymasterActions,\n    type SmartAccount,\n    sendUserOperation\n} from \"viem/account-abstraction\"\nimport { getAction } from \"viem/utils\"\nimport { parseAccount } from \"viem/utils\"\nimport { AccountNotFoundError } from \"../../errors/index.js\"\nimport {\n    type EncodeUninstallModuleParameters,\n    encodeUninstallModule\n} from \"../../utils/encodeUninstallModule.js\"\n\nexport type UninstallModulesParameters<\n    TSmartAccount extends SmartAccount | undefined\n> = EncodeUninstallModuleParameters<TSmartAccount> & {\n    maxFeePerGas?: bigint\n    maxPriorityFeePerGas?: bigint\n    nonce?: bigint\n    calls?: readonly {\n        to: Address\n        value?: bigint | undefined\n        data?: Hex | undefined\n    }[]\n    paymaster?:\n        | Address\n        | true\n        | {\n              /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\n              getPaymasterData?:\n                  | PaymasterActions[\"getPaymasterData\"]\n                  | undefined\n              /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\n              getPaymasterStubData?:\n                  | PaymasterActions[\"getPaymasterStubData\"]\n                  | undefined\n          }\n        | undefined\n    /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\n    paymasterContext?: unknown | undefined\n}\n\nexport async function uninstallModules<\n    TSmartAccount extends SmartAccount | undefined\n>(\n    client: Client<Transport, Chain | undefined, TSmartAccount>,\n    parameters: UninstallModulesParameters<TSmartAccount>\n): Promise<Hex> {\n    const {\n        account: account_ = client.account,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        modules,\n        calls,\n        paymaster,\n        paymasterContext\n    } = parameters\n\n    if (!account_) {\n        throw new AccountNotFoundError({\n            docsPath: \"/docs/actions/wallet/sendTransaction\"\n        })\n    }\n\n    const account = parseAccount(account_) as SmartAccount\n\n    return getAction(\n        client,\n        sendUserOperation,\n        \"sendUserOperation\"\n    )({\n        calls: [\n            ...encodeUninstallModule({\n                account,\n                modules\n            }),\n            ...(calls ?? [])\n        ],\n        paymaster,\n        paymasterContext,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        account\n    })\n}\n", "import type { Chain, Client, Hash, Transport } from \"viem\"\nimport type {\n    GetSmartAccountParameter,\n    SmartAccount\n} from \"viem/account-abstraction\"\nimport { accountId } from \"./erc7579/accountId.js\"\nimport {\n    type InstallModuleParameters,\n    installModule\n} from \"./erc7579/installModule.js\"\nimport {\n    type InstallModulesParameters,\n    installModules\n} from \"./erc7579/installModules.js\"\nimport {\n    type IsModuleInstalledParameters,\n    isModuleInstalled\n} from \"./erc7579/isModuleInstalled.js\"\nimport {\n    type SupportsExecutionModeParameters,\n    supportsExecutionMode\n} from \"./erc7579/supportsExecutionMode.js\"\nimport type {\n    CallType,\n    ExecutionMode\n} from \"./erc7579/supportsExecutionMode.js\"\nimport {\n    type SupportsModuleParameters,\n    supportsModule\n} from \"./erc7579/supportsModule.js\"\nimport type { ModuleType } from \"./erc7579/supportsModule.js\"\nimport {\n    type UninstallModuleParameters,\n    uninstallModule\n} from \"./erc7579/uninstallModule.js\"\nimport {\n    type UninstallModulesParameters,\n    uninstallModules\n} from \"./erc7579/uninstallModules.js\"\n\nexport type Erc7579Actions<TSmartAccount extends SmartAccount | undefined> = {\n    accountId: (\n        args?: GetSmartAccountParameter<TSmartAccount>\n    ) => Promise<string>\n    installModule: (\n        args: InstallModuleParameters<TSmartAccount>\n    ) => Promise<Hash>\n    installModules: (\n        args: InstallModulesParameters<TSmartAccount>\n    ) => Promise<Hash>\n    isModuleInstalled: (\n        args: IsModuleInstalledParameters<TSmartAccount>\n    ) => Promise<boolean>\n    supportsExecutionMode: (\n        args: SupportsExecutionModeParameters<TSmartAccount>\n    ) => Promise<boolean>\n    supportsModule: (\n        args: SupportsModuleParameters<TSmartAccount>\n    ) => Promise<boolean>\n    uninstallModule: (\n        args: UninstallModuleParameters<TSmartAccount>\n    ) => Promise<Hash>\n    uninstallModules: (\n        args: UninstallModulesParameters<TSmartAccount>\n    ) => Promise<Hash>\n}\n\nexport type {\n    InstallModuleParameters,\n    IsModuleInstalledParameters,\n    CallType,\n    ExecutionMode,\n    SupportsExecutionModeParameters,\n    ModuleType,\n    SupportsModuleParameters,\n    UninstallModuleParameters\n}\n\nexport {\n    accountId,\n    installModule,\n    installModules,\n    isModuleInstalled,\n    supportsExecutionMode,\n    supportsModule,\n    uninstallModule,\n    uninstallModules\n}\n\nexport function erc7579Actions() {\n    return <TSmartAccount extends SmartAccount | undefined>(\n        client: Client<Transport, Chain | undefined, TSmartAccount>\n    ): Erc7579Actions<TSmartAccount> => ({\n        accountId: (args) => accountId(client, args),\n        installModule: (args) => installModule(client, args),\n        installModules: (args) => installModules(client, args),\n        isModuleInstalled: (args) => isModuleInstalled(client, args),\n        supportsExecutionMode: (args) => supportsExecutionMode(client, args),\n        supportsModule: (args) => supportsModule(client, args),\n        uninstallModule: (args) => uninstallModule(client, args),\n        uninstallModules: (args) => uninstallModules(client, args)\n    })\n}\n", "[\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AlreadyAMember\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AlreadyAnEditor\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AlreadyNotAMember\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AlreadyNotAnEditor\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"where\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"who\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"permissionId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"DaoUnauthorized\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"limit\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"actual\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"DateOutOfBounds\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"limit\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"actual\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"DurationOutOfBounds\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"EmptyContent\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"InvalidAddresslistUpdate\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"InvalidInterface\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"NoEditorsLeft\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"caller\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"NotAMember\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"NotAnEditor\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"OnlyCreatorCanCancel\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"length\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"OnlyOneEditorPerCall\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"sender\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"ProposalCreationForbidden\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ProposalExecutionForbidden\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"ProposalIsNotOpen\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"limit\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"actual\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"RatioOutOfBounds\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"Unauthorized\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"enum IMajorityVoting.VoteOption\",\n                \"name\": \"voteOption\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"name\": \"VoteCastForbidden\",\n        \"type\": \"error\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"subspace\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AcceptSubspaceProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AddEditorProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"previousAdmin\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"newAdmin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AdminChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"beacon\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"BeaconUpgraded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"EditorAdded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"EditorLeft\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"EditorRemoved\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address[]\",\n                \"name\": \"editors\",\n                \"type\": \"address[]\"\n            }\n        ],\n        \"name\": \"EditorsAdded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint8\",\n                \"name\": \"version\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"name\": \"Initialized\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"MemberAdded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"MemberLeft\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"MemberRemoved\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ProposalCanceled\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"to\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"bytes\",\n                        \"name\": \"data\",\n                        \"type\": \"bytes\"\n                    }\n                ],\n                \"indexed\": false,\n                \"internalType\": \"struct IDAO.Action[]\",\n                \"name\": \"actions\",\n                \"type\": \"tuple[]\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"allowFailureMap\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ProposalExecuted\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"string\",\n                \"name\": \"contentUri\",\n                \"type\": \"string\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"PublishEditsProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"RemoveEditorProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"RemoveMemberProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"subspace\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"RemoveSubspaceProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"implementation\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"Upgraded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"voter\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"enum IMajorityVoting.VoteOption\",\n                \"name\": \"voteOption\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"votingPower\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"VoteCast\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"enum MajorityVotingBase.VotingMode\",\n                \"name\": \"votingMode\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint32\",\n                \"name\": \"supportThreshold\",\n                \"type\": \"uint32\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"duration\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"VotingSettingsUpdated\",\n        \"type\": \"event\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"UPDATE_ADDRESSES_PERMISSION_ID\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"UPDATE_VOTING_SETTINGS_PERMISSION_ID\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"UPGRADE_PLUGIN_PERMISSION_ID\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"addEditor\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"addMember\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"addresslistLength\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_blockNumber\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"addresslistLengthAtBlock\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"canExecute\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_voter\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"enum IMajorityVoting.VoteOption\",\n                \"name\": \"_voteOption\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"name\": \"canVote\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"cancelProposal\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"to\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"bytes\",\n                        \"name\": \"data\",\n                        \"type\": \"bytes\"\n                    }\n                ],\n                \"internalType\": \"struct IDAO.Action[]\",\n                \"name\": \"_actions\",\n                \"type\": \"tuple[]\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_allowFailureMap\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"enum IMajorityVoting.VoteOption\",\n                \"name\": \"_voteOption\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"_tryEarlyExecution\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"createProposal\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"dao\",\n        \"outputs\": [\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"duration\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"execute\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"getProposal\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"open\",\n                \"type\": \"bool\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"executed\",\n                \"type\": \"bool\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"enum MajorityVotingBase.VotingMode\",\n                        \"name\": \"votingMode\",\n                        \"type\": \"uint8\"\n                    },\n                    {\n                        \"internalType\": \"uint32\",\n                        \"name\": \"supportThreshold\",\n                        \"type\": \"uint32\"\n                    },\n                    {\n                        \"internalType\": \"uint64\",\n                        \"name\": \"startDate\",\n                        \"type\": \"uint64\"\n                    },\n                    {\n                        \"internalType\": \"uint64\",\n                        \"name\": \"endDate\",\n                        \"type\": \"uint64\"\n                    },\n                    {\n                        \"internalType\": \"uint64\",\n                        \"name\": \"snapshotBlock\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                \"internalType\": \"struct MajorityVotingBase.ProposalParameters\",\n                \"name\": \"parameters\",\n                \"type\": \"tuple\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"abstain\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"yes\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"no\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                \"internalType\": \"struct MajorityVotingBase.Tally\",\n                \"name\": \"tally\",\n                \"type\": \"tuple\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"to\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"bytes\",\n                        \"name\": \"data\",\n                        \"type\": \"bytes\"\n                    }\n                ],\n                \"internalType\": \"struct IDAO.Action[]\",\n                \"name\": \"actions\",\n                \"type\": \"tuple[]\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"allowFailureMap\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_voter\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"getVoteOption\",\n        \"outputs\": [\n            {\n                \"internalType\": \"enum IMajorityVoting.VoteOption\",\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"implementation\",\n        \"outputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"_dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"enum MajorityVotingBase.VotingMode\",\n                        \"name\": \"votingMode\",\n                        \"type\": \"uint8\"\n                    },\n                    {\n                        \"internalType\": \"uint32\",\n                        \"name\": \"supportThreshold\",\n                        \"type\": \"uint32\"\n                    },\n                    {\n                        \"internalType\": \"uint64\",\n                        \"name\": \"duration\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                \"internalType\": \"struct MajorityVotingBase.VotingSettings\",\n                \"name\": \"_votingSettings\",\n                \"type\": \"tuple\"\n            },\n            {\n                \"internalType\": \"address[]\",\n                \"name\": \"_initialEditors\",\n                \"type\": \"address[]\"\n            },\n            {\n                \"internalType\": \"contract MemberAccessPlugin\",\n                \"name\": \"_memberAccessPlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"initialize\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isEditor\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isListed\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_blockNumber\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"isListedAtBlock\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isMember\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"isMinParticipationReached\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"isSupportThresholdReached\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"isSupportThresholdReachedEarly\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"leaveSpace\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"leaveSpaceAsEditor\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"memberAccessPlugin\",\n        \"outputs\": [\n            {\n                \"internalType\": \"contract MemberAccessPlugin\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"pluginType\",\n        \"outputs\": [\n            {\n                \"internalType\": \"enum IPlugin.PluginType\",\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"pure\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"proposalCount\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"_subspaceDao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_spacePlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeAcceptSubspace\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_proposedEditor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeAddEditor\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_proposedMember\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeAddMember\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_editsContentUri\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_spacePlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeEdits\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeRemoveEditor\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeRemoveMember\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadataContentUri\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"_subspaceDao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_spacePlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"proposeRemoveSubspace\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"proxiableUUID\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"removeEditor\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"removeMember\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"supportThreshold\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint32\",\n                \"name\": \"\",\n                \"type\": \"uint32\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes4\",\n                \"name\": \"_interfaceId\",\n                \"type\": \"bytes4\"\n            }\n        ],\n        \"name\": \"supportsInterface\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_blockNumber\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"totalVotingPower\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"enum MajorityVotingBase.VotingMode\",\n                        \"name\": \"votingMode\",\n                        \"type\": \"uint8\"\n                    },\n                    {\n                        \"internalType\": \"uint32\",\n                        \"name\": \"supportThreshold\",\n                        \"type\": \"uint32\"\n                    },\n                    {\n                        \"internalType\": \"uint64\",\n                        \"name\": \"duration\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                \"internalType\": \"struct MajorityVotingBase.VotingSettings\",\n                \"name\": \"_votingSettings\",\n                \"type\": \"tuple\"\n            }\n        ],\n        \"name\": \"updateVotingSettings\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"newImplementation\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"upgradeTo\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"newImplementation\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"data\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"name\": \"upgradeToAndCall\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"internalType\": \"enum IMajorityVoting.VoteOption\",\n                \"name\": \"_voteOption\",\n                \"type\": \"uint8\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"_tryEarlyExecution\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"vote\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"votingMode\",\n        \"outputs\": [\n            {\n                \"internalType\": \"enum MajorityVotingBase.VotingMode\",\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]\n", "[\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"where\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"who\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"permissionId\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"DaoUnauthorized\",\n        \"type\": \"error\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"caller\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"NotAMember\",\n        \"type\": \"error\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"EditorAdded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"EditorLeft\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"EditorRemoved\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address[]\",\n                \"name\": \"editors\",\n                \"type\": \"address[]\"\n            }\n        ],\n        \"name\": \"EditorsAdded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint8\",\n                \"name\": \"version\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"name\": \"Initialized\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"MemberAdded\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"MemberLeft\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"address\",\n                \"name\": \"member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"MemberRemoved\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"creator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"startDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint64\",\n                \"name\": \"endDate\",\n                \"type\": \"uint64\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bytes\",\n                \"name\": \"metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"to\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"bytes\",\n                        \"name\": \"data\",\n                        \"type\": \"bytes\"\n                    }\n                ],\n                \"indexed\": false,\n                \"internalType\": \"struct IDAO.Action[]\",\n                \"name\": \"actions\",\n                \"type\": \"tuple[]\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"uint256\",\n                \"name\": \"allowFailureMap\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ProposalCreated\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"uint256\",\n                \"name\": \"proposalId\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ProposalExecuted\",\n        \"type\": \"event\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"dao\",\n        \"outputs\": [\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes\",\n                \"name\": \"_metadata\",\n                \"type\": \"bytes\"\n            },\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"to\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"value\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"bytes\",\n                        \"name\": \"data\",\n                        \"type\": \"bytes\"\n                    }\n                ],\n                \"internalType\": \"struct IDAO.Action[]\",\n                \"name\": \"_actions\",\n                \"type\": \"tuple[]\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"_allowFailureMap\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"executeProposal\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"_dao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_initialEditor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"initialize\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isEditor\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_account\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isMember\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"leaveSpace\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"pluginType\",\n        \"outputs\": [\n            {\n                \"internalType\": \"enum IPlugin.PluginType\",\n                \"name\": \"\",\n                \"type\": \"uint8\"\n            }\n        ],\n        \"stateMutability\": \"pure\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"proposalCount\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"_subspaceDao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_spacePlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitAcceptSubspace\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_contentUri\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_spacePlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitEdits\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_newEditor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitNewEditor\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_newMember\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitNewMember\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_editor\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitRemoveEditor\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_member\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitRemoveMember\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"contract IDAO\",\n                \"name\": \"_subspaceDao\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"_spacePlugin\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"submitRemoveSubspace\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes4\",\n                \"name\": \"_interfaceId\",\n                \"type\": \"bytes4\"\n            }\n        ],\n        \"name\": \"supportsInterface\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]\n", "import mainVotingAbi from './abis/MainVotingPlugin.json' with { type: 'json' };\nimport personalSpaceAdminAbi from './abis/PersonalSpaceAdminPlugin.json' with { type: 'json' };\n\nexport { mainVotingAbi, personalSpaceAdminAbi };\n\n// Simplified ABI for the Safe Module Manager with the functions we need\nexport const safeModuleManagerAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'module',\n        type: 'address',\n      },\n    ],\n    name: 'enableModule',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'module',\n        type: 'address',\n      },\n    ],\n    name: 'disableModule',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\nexport const safeOwnerManagerAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'threshold',\n        type: 'uint256',\n      },\n    ],\n    name: 'addOwnerWithThreshold',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'isOwner',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\n// We only use this for revokeEnableSignature to use as a noop when creating a smart session\nexport const smartSessionsAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'PermissionId',\n        name: 'permissionId',\n        type: 'bytes32',\n      },\n    ],\n    name: 'revokeEnableSignature',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n\n// ABI for the Safe7579 module, only with the functions we need\nexport const safe7579Abi = [\n  {\n    type: 'function',\n    name: 'isModuleInstalled',\n    inputs: [\n      {\n        name: 'moduleType',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      { name: 'module', type: 'address', internalType: 'address' },\n      { name: 'additionalContext', type: 'bytes', internalType: 'bytes' },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n  },\n];\n\n// ABI for the DAO Factory, only with the functions we need\nexport const daoFactoryAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'trustedForwarder',\n            type: 'address',\n          },\n          {\n            internalType: 'string',\n            name: 'daoURI',\n            type: 'string',\n          },\n          {\n            internalType: 'string',\n            name: 'subdomain',\n            type: 'string',\n          },\n          {\n            internalType: 'bytes',\n            name: 'metadata',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct DAOFactory.DAOSettings',\n        name: '_daoSettings',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            components: [\n              {\n                components: [\n                  {\n                    internalType: 'uint8',\n                    name: 'release',\n                    type: 'uint8',\n                  },\n                  {\n                    internalType: 'uint16',\n                    name: 'build',\n                    type: 'uint16',\n                  },\n                ],\n                internalType: 'struct PluginRepo.Tag',\n                name: 'versionTag',\n                type: 'tuple',\n              },\n              {\n                internalType: 'contract PluginRepo',\n                name: 'pluginSetupRepo',\n                type: 'address',\n              },\n            ],\n            internalType: 'struct PluginSetupRef',\n            name: 'pluginSetupRef',\n            type: 'tuple',\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes',\n          },\n        ],\n        internalType: 'struct DAOFactory.PluginSettings[]',\n        name: '_pluginSettings',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'createDao',\n    outputs: [\n      {\n        internalType: 'contract DAO',\n        name: 'createdDao',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n", "import { MAINNET, TESTNET } from '@graphprotocol/grc-20/contracts';\nimport { randomBytes } from '@noble/hashes/utils';\nimport {\n  OWNABLE_VALIDATOR_ADDRESS,\n  RHINESTONE_ATTESTER_ADDRESS,\n  type Session,\n  SmartSessionMode,\n  encodeSmartSessionSignature,\n  encodeValidationData,\n  encodeValidatorNonce,\n  getAccount,\n  getEnableSessionDetails,\n  getOwnableValidator,\n  getOwnableValidatorMockSignature,\n  getPermissionId,\n  getSmartSessionsValidator,\n  getSpendingLimitsPolicy,\n  getSudoPolicy,\n  getTimeFramePolicy,\n  getUniversalActionPolicy,\n  getUsageLimitPolicy,\n  getValueLimitPolicy,\n} from '@rhinestone/module-sdk';\nimport { type SmartAccountClient, createSmartAccountClient, encodeInstallModule } from 'permissionless';\nimport { type ToSafeSmartAccountParameters, toSafeSmartAccount } from 'permissionless/accounts';\nimport { getAccountNonce } from 'permissionless/actions';\nimport { erc7579Actions } from 'permissionless/actions/erc7579';\nimport { createPimlicoClient } from 'permissionless/clients/pimlico';\nimport {\n  http,\n  type AbiFunction,\n  type Account,\n  type Address,\n  type Calls,\n  type Chain,\n  ContractFunctionExecutionError,\n  type Hex,\n  type Narrow,\n  type PrivateKeyAccount,\n  type SignableMessage,\n  type WalletClient,\n  createPublicClient,\n  encodeFunctionData,\n  getAbiItem,\n  toBytes,\n  toFunctionSelector,\n  toHex,\n} from 'viem';\nimport {\n  type UserOperation,\n  type WaitForUserOperationReceiptReturnType,\n  entryPoint07Address,\n  getUserOperationHash,\n} from 'viem/account-abstraction';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { bytesToHex } from '../utils/hexBytesAddressUtils.js';\nimport {\n  daoFactoryAbi,\n  mainVotingAbi,\n  personalSpaceAdminAbi,\n  safe7579Abi,\n  safeModuleManagerAbi,\n  safeOwnerManagerAbi,\n  smartSessionsAbi,\n} from './abis.js';\n\nexport const DEFAULT_RPC_URL = 'https://rpc-geo-genesis-h0q2s21xx8.t.conduit.xyz';\nexport const TESTNET_RPC_URL = 'https://rpc-geo-test-zc16z3tcvf.t.conduit.xyz';\n/**\n * We provide a fallback API key for gas sponsorship for the duration of the\n * Geo Genesis early access period. This API key is gas-limited.\n */\nconst DEFAULT_API_KEY = 'pim_KqHm63txxhbCYjdDaWaHqH';\nconst BUNDLER_TRANSPORT_URL_BASE = 'https://api.pimlico.io/v2/';\n\nconst SAFE_7579_MODULE_ADDRESS = '0x7579EE8307284F293B1927136486880611F20002';\nconst SAFE_4337_MODULE_ADDRESS = '0x75cf11467937ce3F2f357CE24ffc3DBF8fD5c226';\nconst ERC7579_LAUNCHPAD_ADDRESS = '0x7579011aB74c46090561ea277Ba79D510c6C00ff';\n\nconst SPACE_FACTORY_ADDRESS: Record<string, Hex> = {\n  '80451': MAINNET.DAO_FACTORY_ADDRESS,\n  '19411': TESTNET.DAO_FACTORY_ADDRESS,\n};\n\nconst MODULE_TYPE_VALIDATOR = 1;\n\nconst PUBLIC_SPACE_FUNCTIONS = [\n  'leaveSpace',\n  'leaveSpaceAsEditor',\n  'createProposal',\n  'proposeEdits',\n  'proposeAcceptSubspace',\n  'proposeRemoveSubspace',\n  'proposeAddMember',\n  'proposeRemoveMember',\n  'proposeAddEditor',\n  'proposeRemoveEditor',\n  'cancelProposal',\n  'vote',\n  'execute',\n];\n\nconst PERSONAL_SPACE_FUNCTIONS = [\n  'executeProposal',\n  'submitEdits',\n  'submitAcceptSubspace',\n  'submitRemoveSubspace',\n  'submitNewMember',\n  'submitRemoveMember',\n  'leaveSpace',\n  'submitNewEditor',\n  'submitRemoveEditor',\n];\n\nexport const GEOGENESIS = {\n  id: Number('80451'),\n  name: 'Geo Genesis',\n  nativeCurrency: {\n    name: 'Graph Token',\n    symbol: 'GRT',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: [DEFAULT_RPC_URL],\n    },\n    public: {\n      http: [DEFAULT_RPC_URL],\n    },\n  },\n};\n\nexport const GEO_TESTNET = {\n  id: Number('19411'),\n  name: 'Geo Testnet',\n  nativeCurrency: {\n    name: 'Sepolia Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: {\n    default: {\n      http: [TESTNET_RPC_URL],\n    },\n    public: {\n      http: [TESTNET_RPC_URL],\n    },\n  },\n};\n\nexport type Action = {\n  actionTarget: Address;\n  actionTargetSelector: Hex;\n  actionPolicies: { policy: Address; address: Address; initData: Hex }[];\n};\n\n// We re-export these functions to allow creating sessions with policies for\n// additional actions without needing the Rhinestone module SDK.\nexport {\n  getSudoPolicy,\n  getUniversalActionPolicy,\n  getSpendingLimitsPolicy,\n  getTimeFramePolicy,\n  getUsageLimitPolicy,\n  getValueLimitPolicy,\n};\n\nexport type SmartSessionClient = {\n  account: Account;\n  chain: Chain;\n  sendUserOperation: <const calls extends readonly unknown[]>({ calls }: { calls: calls }) => Promise<string>;\n  waitForUserOperationReceipt: ({ hash }: { hash: Hex }) => Promise<WaitForUserOperationReceiptReturnType>;\n  signMessage: ({ message }: { message: SignableMessage }) => Promise<Hex>;\n};\n\n// Gets the legacy Geo smart account wallet client. If the smart account returned\n// by this function is deployed, it means it might need to be updated to have the 7579 module installed\nconst getLegacySmartAccountWalletClient = async ({\n  owner,\n  address,\n  chain = GEOGENESIS,\n  rpcUrl = DEFAULT_RPC_URL,\n  apiKey = DEFAULT_API_KEY,\n}: {\n  owner: WalletClient | Account;\n  address?: Hex;\n  chain?: Chain;\n  rpcUrl?: string;\n  apiKey?: string;\n}): Promise<SmartAccountClient> => {\n  const transport = http(rpcUrl);\n  const publicClient = createPublicClient({\n    transport,\n    chain,\n  });\n\n  const safeAccountParams: ToSafeSmartAccountParameters<'0.7', undefined> = {\n    client: publicClient,\n    owners: [owner],\n    entryPoint: {\n      address: entryPoint07Address,\n      version: '0.7',\n    },\n    version: '1.4.1',\n  };\n  if (address) {\n    safeAccountParams.address = address;\n  }\n\n  if (chain.id === GEO_TESTNET.id) {\n    // Custom SAFE Addresses\n    // TODO: remove this once we have the smart sessions module deployed on testnet\n    // (and the canonical addresses are deployed)\n    safeAccountParams.safeModuleSetupAddress = '0x2dd68b007B46fBe91B9A7c3EDa5A7a1063cB5b47';\n    safeAccountParams.safe4337ModuleAddress = '0x75cf11467937ce3F2f357CE24ffc3DBF8fD5c226';\n    safeAccountParams.safeProxyFactoryAddress = '0xd9d2Ba03a7754250FDD71333F444636471CACBC4';\n    safeAccountParams.safeSingletonAddress = '0x639245e8476E03e789a244f279b5843b9633b2E7';\n    safeAccountParams.multiSendAddress = '0x7B21BBDBdE8D01Df591fdc2dc0bE9956Dde1e16C';\n    safeAccountParams.multiSendCallOnlyAddress = '0x32228dDEA8b9A2bd7f2d71A958fF241D79ca5eEC';\n  }\n  const safeAccount = await toSafeSmartAccount(safeAccountParams);\n\n  const bundlerTransport = http(`${BUNDLER_TRANSPORT_URL_BASE}${chain.id}/rpc?apikey=${apiKey}`);\n  const paymasterClient = createPimlicoClient({\n    transport: bundlerTransport,\n    chain,\n    entryPoint: {\n      address: entryPoint07Address,\n      version: '0.7',\n    },\n  });\n\n  const smartAccountClient = createSmartAccountClient({\n    chain,\n    account: safeAccount,\n    paymaster: paymasterClient,\n    bundlerTransport,\n    userOperation: {\n      estimateFeesPerGas: async () => {\n        return (await paymasterClient.getUserOperationGasPrice()).fast;\n      },\n    },\n  });\n  return smartAccountClient;\n};\n\n// Gets the 7579 smart account wallet client. This is the new type of smart account that\n// includes the session keys validator and the 7579 module.\nconst get7579SmartAccountWalletClient = async ({\n  owner,\n  address,\n  chain = GEOGENESIS,\n  rpcUrl = DEFAULT_RPC_URL,\n  apiKey = DEFAULT_API_KEY,\n}: {\n  owner: WalletClient | Account;\n  address?: Hex;\n  chain?: Chain;\n  rpcUrl?: string;\n  apiKey?: string;\n}): Promise<SmartAccountClient> => {\n  const transport = http(rpcUrl);\n  const publicClient = createPublicClient({\n    transport,\n    chain,\n  });\n  console.log('owner', owner);\n  console.log('chain', chain);\n  console.log('rpcUrl', rpcUrl);\n  console.log('apiKey', apiKey);\n  console.log('address', address);\n  const ownerAddress = 'account' in owner ? owner.account?.address : owner.address;\n  if (!ownerAddress) {\n    throw new Error('Owner address not found');\n  }\n\n  const ownableValidator = getOwnableValidator({\n    owners: [ownerAddress],\n    threshold: 1,\n  });\n  const smartSessionsValidator = getSmartSessionsValidator({});\n\n  const safeAccountParams: ToSafeSmartAccountParameters<'0.7', Hex> = {\n    client: publicClient,\n    owners: [owner],\n    version: '1.4.1' as const,\n    entryPoint: {\n      address: entryPoint07Address,\n      version: '0.7' as const,\n    },\n    safe4337ModuleAddress: SAFE_7579_MODULE_ADDRESS as Hex,\n    erc7579LaunchpadAddress: ERC7579_LAUNCHPAD_ADDRESS as Hex,\n    attesters: [\n      RHINESTONE_ATTESTER_ADDRESS, // Rhinestone Attester\n    ],\n    attestersThreshold: 1,\n    validators: [\n      {\n        address: ownableValidator.address,\n        context: ownableValidator.initData,\n      },\n      {\n        address: smartSessionsValidator.address,\n        context: smartSessionsValidator.initData,\n      },\n    ],\n  };\n  if (address) {\n    safeAccountParams.address = address;\n  }\n  const safeAccount = await toSafeSmartAccount(safeAccountParams);\n\n  const bundlerTransport = http(`${BUNDLER_TRANSPORT_URL_BASE}${chain.id}/rpc?apikey=${apiKey}`);\n  const paymasterClient = createPimlicoClient({\n    transport: bundlerTransport,\n    chain,\n    entryPoint: {\n      address: entryPoint07Address,\n      version: '0.7',\n    },\n  });\n\n  const smartAccountClient = createSmartAccountClient({\n    chain,\n    account: safeAccount,\n    paymaster: paymasterClient,\n    bundlerTransport,\n    userOperation: {\n      estimateFeesPerGas: async () => {\n        return (await paymasterClient.getUserOperationGasPrice()).fast;\n      },\n    },\n  }).extend(erc7579Actions());\n  // For some reason, the .extend() breaks the type inference, so we need to cast to unknown\n  return smartAccountClient as unknown as SmartAccountClient;\n};\n\n// Checks if the smart account is deployed.\nexport const isSmartAccountDeployed = async (smartAccountClient: SmartAccountClient): Promise<boolean> => {\n  if (!smartAccountClient.account) {\n    throw new Error('Invalid smart account');\n  }\n  return smartAccountClient.account.isDeployed();\n};\n\nexport type SmartAccountParams = {\n  owner: WalletClient | Account;\n  address?: Hex;\n  chain?: Chain;\n  rpcUrl?: string;\n  apiKey?: string;\n};\n// Gets the smart account wallet client. This is the main function to use to get a smart account wallet client.\n// It will return the 7579 smart account wallet client if the smart account is deployed, otherwise it will return the legacy smart account wallet client, that might need to be updated.\n// You can use smartAccountNeedsUpdate to check if the smart account needs to be updated, and then call updateLegacySmartAccount to update it,\n// which requires executing a user operation.\nexport const getSmartAccountWalletClient = async ({\n  owner,\n  address,\n  chain = GEOGENESIS,\n  rpcUrl = DEFAULT_RPC_URL,\n  apiKey = DEFAULT_API_KEY,\n}: SmartAccountParams): Promise<SmartAccountClient> => {\n  if (chain.id === GEO_TESTNET.id) {\n    // We don't have the smart sessions module deployed on testnet yet, so we need to use the legacy smart account wallet client\n    // TODO: remove this once we have the smart sessions module deployed on testnet\n    const params: SmartAccountParams = { owner, chain, rpcUrl, apiKey };\n    if (address) {\n      params.address = address;\n    }\n    console.log('on testnet, getting legacy smart account wallet client');\n    return getLegacySmartAccountWalletClient(params);\n  }\n  if (address) {\n    return get7579SmartAccountWalletClient({ owner, address, chain, rpcUrl, apiKey });\n  }\n  const legacyClient = await getLegacySmartAccountWalletClient({ owner, chain, rpcUrl, apiKey });\n  if (await isSmartAccountDeployed(legacyClient)) {\n    return legacyClient;\n  }\n  return get7579SmartAccountWalletClient({ owner, chain, rpcUrl, apiKey });\n};\n\n// Checks if the smart account has the 7579 module installed, the smart sessions validator installed, and the ownable validator installed.\nexport const legacySmartAccountUpdateStatus = async (\n  smartAccountClient: SmartAccountClient,\n  chain: Chain,\n  rpcUrl: string,\n): Promise<{ has7579Module: boolean; hasSmartSessionsValidator: boolean; hasOwnableValidator: boolean }> => {\n  if (!smartAccountClient.account) {\n    throw new Error('Invalid smart account');\n  }\n  // We assume the smart account is deployed, so we just need to check if it has the 7579 module and smart sesions validator installed\n  // TODO: call the isModuleInstalled function from the safe7579Abi on the\n  // smart account, checking if the smart sessions validator is installed. This would fail\n  // if the smart account doesn't have the 7579 module installed.\n  const transport = http(rpcUrl);\n  const publicClient = createPublicClient({\n    transport,\n    chain,\n  });\n  const smartSessionsValidator = getSmartSessionsValidator({});\n  let isSmartSessionsValidatorInstalled = false;\n  try {\n    isSmartSessionsValidatorInstalled = (await publicClient.readContract({\n      abi: safe7579Abi,\n      address: smartAccountClient.account.address,\n      functionName: 'isModuleInstalled',\n      args: [MODULE_TYPE_VALIDATOR, smartSessionsValidator.address, '0x'],\n    })) as boolean;\n  } catch (error) {\n    if (error instanceof ContractFunctionExecutionError && error.details.includes('execution reverted')) {\n      // If the smart account doesn't have the 7579 module installed, the isModuleInstalled function will revert\n      return { has7579Module: false, hasSmartSessionsValidator: false, hasOwnableValidator: false };\n    }\n    throw error;\n  }\n  const ownableValidator = getOwnableValidator({\n    owners: [smartAccountClient.account.address],\n    threshold: 1,\n  });\n  // This shouldn't throw because by now we know the smart account has the 7579 module installed\n  const isOwnableValidatorInstalled = (await publicClient.readContract({\n    abi: safe7579Abi,\n    address: smartAccountClient.account.address,\n    functionName: 'isModuleInstalled',\n    args: [MODULE_TYPE_VALIDATOR, ownableValidator.address, '0x'],\n  })) as boolean;\n  return {\n    has7579Module: true,\n    hasSmartSessionsValidator: isSmartSessionsValidatorInstalled,\n    hasOwnableValidator: isOwnableValidatorInstalled,\n  };\n};\n\n// Checks if the smart account needs to be updated from a legacy ERC-4337 smart account to an ERC-7579 smart account\n// with support for smart sessions.\nexport const smartAccountNeedsUpdate = async (\n  smartAccountClient: SmartAccountClient,\n  chain: Chain,\n  rpcUrl: string,\n): Promise<boolean> => {\n  if (chain.id === GEO_TESTNET.id) {\n    // We don't have the smart sessions module deployed on testnet yet, so we need to use the legacy smart account wallet client\n    // TODO: remove this once we have the smart sessions module deployed on testnet\n    return false;\n  }\n  // If we haven't deployed the smart account, we would always deploy an updated version\n  if (!(await isSmartAccountDeployed(smartAccountClient))) {\n    return false;\n  }\n  const updateStatus = await legacySmartAccountUpdateStatus(smartAccountClient, chain, rpcUrl);\n  return !updateStatus.has7579Module || !updateStatus.hasSmartSessionsValidator || !updateStatus.hasOwnableValidator;\n};\n\n// Legacy Geo smart accounts (i.e. the ones that don't have the 7579 module installed)\n// need to be updated to have the 7579 module installed with the ownable and smart sessions validators.\nexport const updateLegacySmartAccount = async (\n  smartAccountClient: SmartAccountClient,\n  chain: Chain,\n  rpcUrl: string,\n): Promise<WaitForUserOperationReceiptReturnType | undefined> => {\n  if (!smartAccountClient.account?.address) {\n    throw new Error('Invalid smart account');\n  }\n  if (chain.id === GEO_TESTNET.id) {\n    // We don't have the smart sessions module deployed on testnet yet, so we need to use the legacy smart account wallet client\n    // TODO: remove this once we have the smart sessions module deployed on testnet\n    console.log('on testnet, skipping updateLegacySmartAccount');\n    return;\n  }\n  const ownableValidator = getOwnableValidator({\n    owners: [smartAccountClient.account.address],\n    threshold: 1,\n  });\n  const smartSessionsValidator = getSmartSessionsValidator({});\n  const installValidatorsTx = encodeInstallModule({\n    account: smartAccountClient.account,\n    modules: [\n      {\n        type: ownableValidator.type,\n        address: ownableValidator.address,\n        context: ownableValidator.initData,\n      },\n      {\n        type: smartSessionsValidator.type,\n        address: smartSessionsValidator.address,\n        context: smartSessionsValidator.initData,\n      },\n    ],\n  });\n\n  const updateStatus = await legacySmartAccountUpdateStatus(smartAccountClient, chain, rpcUrl);\n  const calls = [];\n  if (!updateStatus.has7579Module) {\n    calls.push({\n      to: smartAccountClient.account.address,\n      data: encodeFunctionData({\n        abi: safeModuleManagerAbi,\n        functionName: 'enableModule',\n        args: [SAFE_7579_MODULE_ADDRESS as Hex],\n      }),\n      value: BigInt(0),\n    });\n    calls.push({\n      to: smartAccountClient.account.address,\n      data: encodeFunctionData({\n        abi: safeModuleManagerAbi,\n        functionName: 'setFallbackHandler',\n        args: [SAFE_7579_MODULE_ADDRESS as Hex],\n      }),\n      value: BigInt(0),\n    });\n    calls.push({\n      to: smartAccountClient.account.address,\n      data: encodeFunctionData({\n        abi: safeModuleManagerAbi,\n        functionName: 'disableModule',\n        args: [SAFE_4337_MODULE_ADDRESS as Hex],\n      }),\n      value: BigInt(0),\n    });\n  }\n  if (!updateStatus.hasOwnableValidator) {\n    calls.push({\n      to: installValidatorsTx[0].to,\n      data: installValidatorsTx[0].data,\n      value: installValidatorsTx[0].value,\n    });\n  }\n  if (!updateStatus.hasSmartSessionsValidator) {\n    calls.push({\n      to: installValidatorsTx[1].to,\n      data: installValidatorsTx[1].data,\n      value: installValidatorsTx[1].value,\n    });\n  }\n  if (calls.length === 0) {\n    return;\n  }\n  const tx = await smartAccountClient.sendUserOperation({\n    calls,\n  });\n  const receipt = await smartAccountClient.waitForUserOperationReceipt({\n    hash: tx,\n  });\n  if (!receipt.success) {\n    throw new Error('Transaction to update legacy smart account failed');\n  }\n  return receipt;\n};\n\n// Gets the actions that a session key needs permission to perform on a space.\nconst getSpaceActions = (space: { address: Hex; type: 'personal' | 'public' }) => {\n  const actions: Action[] = [];\n  if (space.type === 'public') {\n    for (const functionName of PUBLIC_SPACE_FUNCTIONS) {\n      actions.push({\n        actionTarget: space.address,\n        actionTargetSelector: toFunctionSelector(\n          getAbiItem({\n            abi: mainVotingAbi,\n            name: functionName,\n          }) as AbiFunction,\n        ),\n        actionPolicies: [getSudoPolicy()],\n      });\n    }\n  } else {\n    for (const functionName of PERSONAL_SPACE_FUNCTIONS) {\n      actions.push({\n        actionTarget: space.address,\n        actionTargetSelector: toFunctionSelector(\n          getAbiItem({\n            abi: personalSpaceAdminAbi,\n            name: functionName,\n          }) as AbiFunction,\n        ),\n        actionPolicies: [getSudoPolicy()],\n      });\n    }\n  }\n  return actions;\n};\n\nexport const addSmartAccountOwner = async (\n  smartAccountClient: SmartAccountClient,\n  newOwner: Address,\n  chain: Chain,\n  rpcUrl: string,\n) => {\n  if (!smartAccountClient.account) {\n    throw new Error('Invalid smart account');\n  }\n  const publicClient = createPublicClient({\n    transport: http(rpcUrl),\n    chain,\n  });\n  if (await isSmartAccountDeployed(smartAccountClient)) {\n    const isOwner = await publicClient.readContract({\n      abi: safeOwnerManagerAbi,\n      address: smartAccountClient.account.address,\n      functionName: 'isOwner',\n      args: [newOwner],\n    });\n    if (isOwner) {\n      return;\n    }\n  }\n\n  const tx = await smartAccountClient.sendUserOperation({\n    calls: [\n      {\n        to: smartAccountClient.account.address,\n        data: encodeFunctionData({\n          abi: safeOwnerManagerAbi,\n          functionName: 'addOwnerWithThreshold',\n          args: [newOwner, BigInt(1)],\n        }),\n        value: BigInt(0),\n      },\n    ],\n    account: smartAccountClient.account,\n  });\n  const receipt = await smartAccountClient.waitForUserOperationReceipt({\n    hash: tx,\n  });\n  if (!receipt.success) {\n    throw new Error('Transaction to add smart account owner failed');\n  }\n  return receipt;\n};\n\n// This is the function that the Connect app uses to create a smart session and\n// enable it on the smart account.\n// It will prompt the user to sign the message to enable the session, and then\n// execute the transaction to enable the session.\n// It will return the permissionId that can be used to create a smart session client.\nexport const createSmartSession = async (\n  owner: WalletClient | PrivateKeyAccount,\n  accountAddress: Hex,\n  sessionPrivateKey: Hex,\n  chain: Chain,\n  rpcUrl: string,\n  {\n    allowCreateSpace = false,\n    spaces = [],\n    additionalActions = [],\n  }: {\n    allowCreateSpace?: boolean;\n    spaces?: {\n      address: Hex;\n      type: 'personal' | 'public';\n    }[];\n    additionalActions?: Action[];\n  } = {},\n): Promise<Hex> => {\n  const smartAccountClient = await getSmartAccountWalletClient({\n    owner,\n    address: accountAddress,\n    chain,\n    rpcUrl,\n  });\n  if (!smartAccountClient.account) {\n    throw new Error('Invalid wallet client');\n  }\n  if (!smartAccountClient.account.isDeployed()) {\n    throw new Error('Smart account must be deployed');\n  }\n  if (await smartAccountNeedsUpdate(smartAccountClient, chain, rpcUrl)) {\n    throw new Error('Smart account needs to be updated');\n  }\n  if (!smartAccountClient.chain) {\n    throw new Error('Invalid smart account chain');\n  }\n\n  const sessionKeyAccount = privateKeyToAccount(sessionPrivateKey);\n  const transport = http(rpcUrl);\n  const publicClient = createPublicClient({\n    transport,\n    chain,\n  });\n  if (chain.id === GEO_TESTNET.id) {\n    // We don't have the smart sessions module deployed on testnet yet, so we need to fake it by adding an account owner\n    // TODO: remove this once we have the smart sessions module deployed on testnet\n    console.log('on testnet, faking a smart session by adding an account owner');\n    const tx = await smartAccountClient.sendUserOperation({\n      calls: [\n        {\n          to: smartAccountClient.account.address,\n          data: encodeFunctionData({\n            abi: safeOwnerManagerAbi,\n            functionName: 'addOwnerWithThreshold',\n            args: [sessionKeyAccount.address, BigInt(1)],\n          }),\n          value: BigInt(0),\n        },\n      ],\n      account: smartAccountClient.account,\n    });\n    const receipt = await smartAccountClient.waitForUserOperationReceipt({\n      hash: tx,\n    });\n    if (!receipt.success) {\n      throw new Error('Transaction to add account owner failed');\n    }\n    console.log('account owner added');\n    return bytesToHex(randomBytes(32)) as Hex;\n  }\n  // We create a dummy action so that we can execute a userOp immediately and create the session onchain,\n  // rather than having to pass along all the enable data to the end user app.\n  // In the future, if we enable attestations with the Rhinestone registry, we can remove this and instead\n  // call enableSessions on the smart sessions module from the smart account.\n  console.log('creating noOpActionPolicy');\n  const noOpActionPolicy = getUniversalActionPolicy({\n    paramRules: {\n      length: BigInt(1),\n      // @ts-expect-error - The Rhinestone SDK doesn't export the types we need here\n      rules: new Array(16).fill({\n        condition: BigInt(0), // ParamCondition.EQUAL\n        isLimited: false,\n        offset: BigInt(0),\n        ref: toHex(toBytes('0x', { size: 32 })),\n        usage: { limit: BigInt(0), used: BigInt(0) },\n      }),\n    },\n    valueLimitPerUse: BigInt(0),\n  });\n  console.log('noOpActionPolicy created');\n  const actions: Action[] = [\n    {\n      actionTarget: sessionKeyAccount.address,\n      actionTargetSelector: toFunctionSelector(\n        getAbiItem({\n          abi: smartSessionsAbi,\n          name: 'revokeEnableSignature',\n        }) as AbiFunction,\n      ),\n      actionPolicies: [noOpActionPolicy],\n    },\n  ];\n\n  console.log('getting space actions');\n  for (const space of spaces) {\n    actions.push(...getSpaceActions(space));\n  }\n  console.log('space actions created');\n  if (allowCreateSpace) {\n    const spaceFactoryAddress = SPACE_FACTORY_ADDRESS[chain.id.toString()];\n    actions.push({\n      actionTarget: spaceFactoryAddress,\n      actionTargetSelector: toFunctionSelector(\n        getAbiItem({\n          abi: daoFactoryAbi,\n          name: 'createDao',\n        }) as AbiFunction,\n      ),\n      actionPolicies: [getSudoPolicy()],\n    });\n  }\n  if (additionalActions) {\n    actions.push(...additionalActions);\n  }\n  console.log('actions created');\n  const session: Session = {\n    sessionValidator: OWNABLE_VALIDATOR_ADDRESS,\n    sessionValidatorInitData: encodeValidationData({\n      threshold: 1,\n      owners: [sessionKeyAccount.address],\n    }),\n    salt: bytesToHex(randomBytes(32)) as Hex,\n    userOpPolicies: [getSudoPolicy()],\n    erc7739Policies: {\n      allowedERC7739Content: [],\n      erc1271Policies: [],\n    },\n    actions,\n    chainId: BigInt(smartAccountClient.chain.id),\n    permitERC4337Paymaster: true,\n  };\n  const account = getAccount({\n    address: smartAccountClient.account.address,\n    type: 'safe',\n  });\n\n  console.log('session object');\n  // We use UNSAFE_ENABLE because we're not using Rhinestone's Registry\n  // contract to attest to the sessions we're creating.\n  // That's also why we set ignoreSecurityAttestations to true.\n  const sessionDetails = await getEnableSessionDetails({\n    // enableMode: SmartSessionMode.ENABLE,\n    sessions: [session],\n    account,\n    clients: [publicClient],\n    // ignoreSecurityAttestations: true,\n  });\n\n  console.log('signing session details');\n  // This will prompt the user to sign the message to enable the session\n  sessionDetails.enableSessionData.enableSession.permissionEnableSig = await (owner as WalletClient).signMessage({\n    message: { raw: sessionDetails.permissionEnableHash },\n    account: (owner as WalletClient).account?.address ?? (owner as PrivateKeyAccount).address,\n  });\n  console.log('session details signed');\n  const smartSessions = getSmartSessionsValidator({});\n  const nonce = await getAccountNonce(publicClient, {\n    address: smartAccountClient.account.address,\n    entryPointAddress: entryPoint07Address,\n    key: encodeValidatorNonce({\n      account,\n      validator: smartSessions,\n    }),\n  });\n  console.log('nonce');\n  // This will be replaced with the actual signature below\n  sessionDetails.signature = getOwnableValidatorMockSignature({\n    threshold: 1,\n  });\n  console.log('prep user op');\n  const userOperation = await smartAccountClient.prepareUserOperation({\n    account: smartAccountClient.account,\n    calls: [\n      {\n        // We use the revokeEnableSignature with permissionId 0 function to create a noop action\n        to: sessionKeyAccount.address,\n        value: BigInt(0),\n        data: encodeFunctionData({\n          abi: smartSessionsAbi,\n          functionName: 'revokeEnableSignature',\n          args: [toHex(toBytes('0x', { size: 32 }))],\n        }),\n      },\n    ],\n    nonce,\n    signature: encodeSmartSessionSignature(sessionDetails),\n  });\n  console.log('user operation prepared');\n  const userOpHashToSign = getUserOperationHash({\n    chainId: chain.id,\n    entryPointAddress: entryPoint07Address,\n    entryPointVersion: '0.7',\n    userOperation,\n  });\n  console.log('user op hash to sign');\n  sessionDetails.signature = await sessionKeyAccount.signMessage({\n    message: { raw: userOpHashToSign },\n  });\n  console.log('user op hash to sign signed');\n  userOperation.signature = encodeSmartSessionSignature(sessionDetails);\n  console.log('user op hash to sign encoded');\n  const userOpHash = await smartAccountClient.sendUserOperation(userOperation as UserOperation); // No idea why the type doesn't match\n  console.log('user op hash');\n  const receipt = await smartAccountClient.waitForUserOperationReceipt({\n    hash: userOpHash,\n  });\n  if (!receipt.success) {\n    throw new Error('Transaction to create smart session failed');\n  }\n  return getPermissionId({ session });\n};\n\n// This is the function that we use on the end user app to create a smart session client that can send transactions to the smart account.\n// The session must have previously been created by the createSmartSession function.\n// The client also includes a signMessage function that can be used to sign messages with the session key.\nexport const getSmartSessionClient = async ({\n  accountAddress,\n  chain = GEOGENESIS,\n  rpcUrl = DEFAULT_RPC_URL,\n  apiKey = DEFAULT_API_KEY,\n  sessionPrivateKey,\n  permissionId,\n}: {\n  accountAddress: Hex;\n  chain?: Chain;\n  rpcUrl?: string;\n  apiKey?: string;\n  sessionPrivateKey: Hex;\n  permissionId: Hex;\n}): Promise<SmartSessionClient> => {\n  const sessionKeyAccount = privateKeyToAccount(sessionPrivateKey);\n  const smartAccountClient = await getSmartAccountWalletClient({\n    owner: sessionKeyAccount, // Won't really be used (except in testnet), but we need to pass in an account\n    address: accountAddress,\n    chain,\n    rpcUrl,\n    apiKey,\n  });\n  if (!smartAccountClient.account) {\n    throw new Error('Invalid smart account');\n  }\n\n  const smartSessions = getSmartSessionsValidator({});\n  const publicClient = createPublicClient({\n    transport: http(rpcUrl),\n    chain,\n  });\n\n  return {\n    account: smartAccountClient.account,\n    chain,\n    sendUserOperation: async <const calls extends readonly unknown[]>({ calls }: { calls: calls }) => {\n      if (!smartAccountClient.account) {\n        throw new Error('Invalid smart account');\n      }\n      if (chain.id === GEO_TESTNET.id) {\n        // We don't have the smart sessions module deployed on testnet yet, so we need to use the legacy smart account wallet client\n        // TODO: remove this once we have the smart sessions module deployed on testnet\n        return smartAccountClient.sendUserOperation({\n          calls: calls as Calls<Narrow<calls>>,\n          account: smartAccountClient.account,\n        });\n      }\n      const account = getAccount({\n        address: smartAccountClient.account.address,\n        type: 'safe',\n      });\n      const sessionDetails = {\n        mode: SmartSessionMode.USE,\n        permissionId,\n        signature: getOwnableValidatorMockSignature({\n          threshold: 1,\n        }),\n      };\n      const nonce = await getAccountNonce(publicClient, {\n        address: smartAccountClient.account.address,\n        entryPointAddress: entryPoint07Address,\n        key: encodeValidatorNonce({\n          account,\n          validator: smartSessions,\n        }),\n      });\n      const userOperation = await smartAccountClient.prepareUserOperation({\n        account: smartAccountClient.account,\n        calls,\n        nonce,\n        signature: encodeSmartSessionSignature(sessionDetails),\n      });\n\n      const userOpHashToSign = getUserOperationHash({\n        chainId: chain.id,\n        entryPointAddress: entryPoint07Address,\n        entryPointVersion: '0.7',\n        userOperation,\n      });\n\n      sessionDetails.signature = await sessionKeyAccount.signMessage({\n        message: { raw: userOpHashToSign },\n      });\n\n      userOperation.signature = encodeSmartSessionSignature(sessionDetails);\n\n      return smartAccountClient.sendUserOperation(userOperation as UserOperation);\n    },\n    signMessage: async ({ message }: { message: SignableMessage }) => {\n      return sessionKeyAccount.signMessage({ message });\n    },\n    waitForUserOperationReceipt: async ({ hash }: { hash: Hex }) => {\n      return smartAccountClient.waitForUserOperationReceipt({ hash });\n    },\n  };\n};\n", "import * as Schema from 'effect/Schema';\nimport type { SmartAccountClient } from 'permissionless';\nimport type { Address, Chain, Hex, WalletClient } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { proveIdentityOwnership } from '../identity/prove-ownership.js';\nimport * as Messages from '../messages/index.js';\nimport { store } from '../store-connect.js';\nimport { loadAccountAddress, storeAccountAddress, storeKeys } from './auth-storage.js';\nimport { createIdentityKeys } from './create-identity-keys.js';\nimport { decryptIdentity, encryptIdentity } from './identity-encryption.js';\nimport {\n  type SmartAccountParams,\n  addSmartAccountOwner,\n  getSmartAccountWalletClient,\n  isSmartAccountDeployed,\n  smartAccountNeedsUpdate,\n  updateLegacySmartAccount,\n} from './smart-account.js';\nimport type { IdentityKeys, Signer, Storage } from './types.js';\n\nexport async function identityExists(accountAddress: string, syncServerUri: string) {\n  const res = await fetch(new URL(`/identity?accountAddress=${accountAddress}`, syncServerUri), {\n    method: 'GET',\n  });\n  return res.status === 200;\n}\n\nexport async function signup(\n  signer: Signer,\n  walletClient: WalletClient,\n  smartAccountClient: SmartAccountClient,\n  accountAddress: Address,\n  syncServerUri: string,\n  addressStorage: Storage,\n  keysStorage: Storage,\n  identityToken: string,\n  chain: Chain,\n  rpcUrl: string,\n) {\n  const keys = createIdentityKeys();\n  const { ciphertext, nonce } = await encryptIdentity(signer, keys);\n\n  const localAccount = privateKeyToAccount(keys.signaturePrivateKey as `0x${string}`);\n  // This will deploy the smart account if it's not deployed\n  await addSmartAccountOwner(smartAccountClient, localAccount.address, chain, rpcUrl);\n  const localSmartAccountClient = await getSmartAccountWalletClient({\n    owner: localAccount,\n    address: accountAddress,\n    rpcUrl,\n    chain,\n  });\n\n  const { accountProof, keyProof } = await proveIdentityOwnership(localSmartAccountClient, accountAddress, keys);\n\n  const req: Messages.RequestConnectCreateIdentity = {\n    keyBox: { signer: await signer.getAddress(), accountAddress, ciphertext, nonce },\n    accountProof,\n    keyProof,\n    signaturePublicKey: keys.signaturePublicKey,\n    encryptionPublicKey: keys.encryptionPublicKey,\n  };\n  const res = await fetch(new URL('/connect/identity', syncServerUri), {\n    method: 'POST',\n    headers: {\n      'privy-id-token': identityToken,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(req),\n  });\n  if (res.status !== 200) {\n    // TODO: handle this better?\n    throw new Error(`Error creating identity: ${res.status}`);\n  }\n  const decoded = Schema.decodeUnknownSync(Messages.ResponseConnectCreateIdentity)(await res.json());\n  if (!decoded.success) {\n    throw new Error('Error creating identity');\n  }\n  storeKeys(keysStorage, accountAddress, keys);\n  storeAccountAddress(addressStorage, accountAddress);\n  return {\n    accountAddress,\n    keys,\n  };\n}\n\nexport async function restoreKeys(\n  signer: Signer,\n  accountAddress: Address,\n  syncServerUri: string,\n  addressStorage: Storage,\n  keysStorage: Storage,\n  identityToken: string,\n) {\n  const res = await fetch(new URL('/connect/identity/encrypted', syncServerUri), {\n    method: 'GET',\n    headers: {\n      'privy-id-token': identityToken,\n      'account-address': accountAddress,\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (res.status === 200) {\n    const decoded = Schema.decodeUnknownSync(Messages.ResponseIdentityEncrypted)(await res.json());\n    const { keyBox } = decoded;\n    const { ciphertext, nonce } = keyBox;\n    const keys = await decryptIdentity(signer, ciphertext, nonce);\n    storeKeys(keysStorage, accountAddress, keys);\n    storeAccountAddress(addressStorage, accountAddress);\n    return {\n      accountAddress,\n      keys,\n    };\n  }\n  throw new Error(`Error fetching identity ${res.status}`);\n}\n\nconst getAndUpdateSmartAccount = async (\n  walletClient: WalletClient,\n  rpcUrl: string,\n  chain: Chain,\n  addressStorage: Storage,\n) => {\n  const accountAddressFromStorage = loadAccountAddress(addressStorage) as Hex;\n  const smartAccountParams: SmartAccountParams = {\n    owner: walletClient,\n    rpcUrl,\n    chain,\n  };\n  if (accountAddressFromStorage) {\n    smartAccountParams.address = accountAddressFromStorage;\n  }\n  const smartAccountWalletClient = await getSmartAccountWalletClient(smartAccountParams);\n  if (!smartAccountWalletClient.account) {\n    throw new Error('Smart account wallet client not found');\n  }\n  console.log('smartAccountWalletClient', smartAccountWalletClient);\n  console.log('address', smartAccountWalletClient.account.address);\n  console.log('is deployed', await isSmartAccountDeployed(smartAccountWalletClient));\n  // This will prompt the user to sign a user operation to update the smart account\n  if (await smartAccountNeedsUpdate(smartAccountWalletClient, chain, rpcUrl)) {\n    console.log('updating smart account');\n    await updateLegacySmartAccount(smartAccountWalletClient, chain, rpcUrl);\n    smartAccountParams.address = smartAccountWalletClient.account.address;\n    // Create the client again to ensure we have the 7579 config now\n    return getSmartAccountWalletClient(smartAccountParams);\n  }\n  return smartAccountWalletClient;\n};\n\nexport async function login({\n  walletClient,\n  signer,\n  syncServerUri,\n  addressStorage,\n  keysStorage,\n  identityToken,\n  rpcUrl,\n  chain,\n}: {\n  walletClient: WalletClient;\n  signer: Signer;\n  syncServerUri: string;\n  addressStorage: Storage;\n  keysStorage: Storage;\n  identityToken: string;\n  rpcUrl: string;\n  chain: Chain;\n}) {\n  const smartAccountWalletClient = await getAndUpdateSmartAccount(walletClient, rpcUrl, chain, addressStorage);\n  if (!smartAccountWalletClient.account) {\n    throw new Error('Smart account wallet client account not found');\n  }\n  const accountAddress = smartAccountWalletClient.account.address;\n\n  let authData: {\n    accountAddress: Address;\n    keys: IdentityKeys;\n  };\n  const exists = await identityExists(accountAddress, syncServerUri);\n  if (!exists) {\n    authData = await signup(\n      signer,\n      walletClient,\n      smartAccountWalletClient,\n      accountAddress,\n      syncServerUri,\n      addressStorage,\n      keysStorage,\n      identityToken,\n      chain,\n      rpcUrl,\n    );\n  } else {\n    authData = await restoreKeys(signer, accountAddress, syncServerUri, addressStorage, keysStorage, identityToken);\n  }\n  store.send({ type: 'reset' });\n  store.send({\n    ...authData,\n    sessionToken: 'dummy', // not needed in the connect app\n    type: 'setAuth',\n  });\n}\n", "import * as Effect from 'effect/Effect';\nimport * as Either from 'effect/Either';\nimport * as Schema from 'effect/Schema';\nimport { ConnectAuthPayload, FailedToParseConnectAuthUrl } from '../types.js';\n\ntype ParseAuthUrlParams = {\n  data: unknown;\n  redirect: string;\n  nonce: string;\n};\n\nconst decodePayload = Schema.decodeEither(ConnectAuthPayload);\n\nexport const parseAuthParams = (\n  params: ParseAuthUrlParams,\n): Effect.Effect<{ payload: ConnectAuthPayload; redirect: string; nonce: string }, FailedToParseConnectAuthUrl> => {\n  const { data, redirect, nonce } = params;\n  if (!data || !redirect || !nonce) {\n    return Effect.fail(new FailedToParseConnectAuthUrl({ message: 'Missing data or redirect in callback URL' }));\n  }\n\n  if (nonce.length !== 64) {\n    return Effect.fail(new FailedToParseConnectAuthUrl({ message: 'Invalid nonce' }));\n  }\n\n  try {\n    const result = decodePayload(data as ConnectAuthPayload);\n\n    if (Either.isLeft(result)) {\n      return Effect.fail(new FailedToParseConnectAuthUrl({ message: 'Failed to parse connect auth payload' }));\n    }\n\n    return Effect.succeed({ payload: result.right, redirect, nonce });\n  } catch (error) {\n    return Effect.fail(new FailedToParseConnectAuthUrl({ message: 'Failed to parse connect auth payload' }));\n  }\n};\n", "import { bytesToUtf8, hexToBytes } from '@noble/hashes/utils';\nimport { cryptoBoxSealOpen } from '@serenity-kit/noble-sodium';\nimport * as Effect from 'effect/Effect';\nimport * as Either from 'effect/Either';\nimport * as Schema from 'effect/Schema';\nimport { ConnectCallbackDecryptedData, type ConnectCallbackResult, FailedToParseAuthCallbackUrl } from '../types.js';\n\ntype ParseCallbackUrlParams = {\n  ciphertext: string;\n  nonce: string;\n  storedNonce: string;\n  storedExpiry: number;\n  storedSecretKey: string;\n  storedPublicKey: string;\n};\n\nconst decodeDecryptedResult = Schema.decodeEither(ConnectCallbackDecryptedData);\n\nexport const parseCallbackParams = ({\n  ciphertext,\n  nonce,\n  storedNonce,\n  storedExpiry,\n  storedSecretKey,\n  storedPublicKey,\n}: ParseCallbackUrlParams): Effect.Effect<ConnectCallbackResult, FailedToParseAuthCallbackUrl> => {\n  if (nonce !== storedNonce) {\n    return Effect.fail(new FailedToParseAuthCallbackUrl({ message: 'Invalid nonce' }));\n  }\n\n  try {\n    const publicKey = hexToBytes(storedPublicKey);\n    const decryptionResult = cryptoBoxSealOpen({\n      ciphertext: hexToBytes(ciphertext),\n      privateKey: hexToBytes(storedSecretKey),\n      publicKey,\n    });\n    const decoded = decodeDecryptedResult(JSON.parse(bytesToUtf8(decryptionResult)));\n    if (Either.isLeft(decoded)) {\n      return Effect.fail(\n        new FailedToParseAuthCallbackUrl({ message: 'Failed to parse connect auth callback payload' }),\n      );\n    }\n    const data = decoded.right;\n    if (data.expiry !== storedExpiry) {\n      return Effect.fail(new FailedToParseAuthCallbackUrl({ message: 'Incorrect expiry' }));\n    }\n    if (data.expiry < Date.now()) {\n      return Effect.fail(new FailedToParseAuthCallbackUrl({ message: 'Expired nonce' }));\n    }\n\n    return Effect.succeed({\n      appIdentityAddress: data.appIdentityAddress,\n      appIdentityAddressPrivateKey: data.appIdentityAddressPrivateKey,\n      accountAddress: data.accountAddress,\n      permissionId: data.permissionId,\n      signaturePublicKey: data.signaturePublicKey,\n      signaturePrivateKey: data.signaturePrivateKey,\n      encryptionPublicKey: data.encryptionPublicKey,\n      encryptionPrivateKey: data.encryptionPrivateKey,\n      sessionToken: data.sessionToken,\n      sessionTokenExpires: new Date(data.sessionTokenExpires),\n      privateSpaces: data.privateSpaces,\n      publicSpaces: data.publicSpaces,\n    });\n  } catch (error) {\n    console.error(error);\n    return Effect.fail(new FailedToParseAuthCallbackUrl({ message: 'Failed to parse connect auth callback payload' }));\n  }\n};\n", "export * from './create.js';\nexport * from './delete.js';\nexport * from './entity.js';\nexport * from './findMany.js';\nexport * from './findOne.js';\nexport * from './removeRelation.js';\nexport * from './types.js';\nexport * from './update.js';\n", "export const hasValidTypesProperty = (value: unknown): value is Record<'@@types@@', unknown[]> => {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    '@@types@@' in value &&\n    Array.isArray((value as { '@@types@@': unknown })['@@types@@'])\n  );\n};\n", "import type * as Schema from 'effect/Schema';\nimport { isRelationField } from '../utils/isRelationField.js';\nimport { hasValidTypesProperty } from './hasValidTypesProperty.js';\nimport type { AnyNoContext, DocumentContent, Entity } from './types.js';\nexport const getEntityRelations = <const S extends AnyNoContext>(\n  entityId: string,\n  type: S,\n  doc: DocumentContent,\n  include: { [K in keyof Schema.Schema.Type<S>]?: Record<string, Record<string, never>> } | undefined,\n) => {\n  const relations: Record<string, Entity<AnyNoContext>> = {};\n  for (const [fieldName, field] of Object.entries(type.fields)) {\n    // skip non-relation fields or relations that are not defined in the include object\n    if (!isRelationField(field)) continue;\n\n    // Currently we still add an empty array for relations that are not included.\n    // This is to ensure that the relation is not undefined in the decoded entity.\n    // In the future we might want to derive a schema based on the include object.\n    if (!include?.[fieldName]) {\n      relations[fieldName] = [];\n      continue;\n    }\n\n    const relationEntities: Array<Entity<AnyNoContext>> = [];\n\n    for (const [relationId, relation] of Object.entries(doc.relations ?? {})) {\n      // @ts-expect-error name is defined\n      const typeName = type.name;\n\n      if (relation.fromTypeName !== typeName || relation.fromPropertyName !== fieldName || relation.from !== entityId)\n        continue;\n\n      if (relation.__deleted) continue;\n\n      const relationEntity = doc.entities?.[relation.to];\n      if (!hasValidTypesProperty(relationEntity)) continue;\n\n      relationEntities.push({ ...relationEntity, id: relation.to, _relation: { id: relationId } });\n    }\n\n    relations[fieldName] = relationEntities;\n  }\n\n  return relations;\n};\n", "import type { DocHandle } from '@automerge/automerge-repo';\nimport * as Schema from 'effect/Schema';\nimport { getEntityRelations } from './getEntityRelations.js';\nimport { hasValidTypesProperty } from './hasValidTypesProperty.js';\nimport type { AnyNoContext, DocumentContent, Entity } from './types.js';\n\n/**\n * Find the entity of the given type, with the given id, from the repo.\n */\nexport const findOne = <const S extends AnyNoContext>(\n  handle: DocHandle<DocumentContent>,\n  type: S,\n  include: { [K in keyof Schema.Schema.Type<S>]?: Record<string, never> } = {},\n) => {\n  const decode = Schema.decodeUnknownSync(type);\n\n  // TODO: what's the right way to get the name of the type?\n  // @ts-expect-error name is defined\n  const typeName = type.name;\n\n  return (id: string): Entity<S> | undefined => {\n    // TODO: Instead of this insane filtering logic, we should be keeping track of the entities in\n    // an index and store the decoded values instead of re-decoding over and over again.\n    const doc = handle.doc();\n    const entity = doc?.entities?.[id];\n    const relations = doc ? getEntityRelations(id, type, doc, include) : {};\n\n    if (hasValidTypesProperty(entity) && entity['@@types@@'].includes(typeName)) {\n      const decoded = { ...decode({ ...entity, id, ...relations }), type: typeName };\n      // injecting the schema to the entity to be able to access it in the preparePublish function\n      decoded.__schema = type;\n      return decoded;\n    }\n\n    return undefined;\n  };\n};\n", "import type { DocHandle } from '@automerge/automerge-repo';\nimport * as Schema from 'effect/Schema';\nimport { generateId } from '../utils/generateId.js';\nimport { isRelationField } from '../utils/isRelationField.js';\nimport { findOne } from './findOne.js';\nimport type { AnyNoContext, DocumentContent, DocumentRelation, Entity, Insert } from './types.js';\n\n/**\n * Creates an entity model of given type and stores it in the repo.\n */\nexport const create = <const S extends AnyNoContext>(handle: DocHandle<DocumentContent>, type: S) => {\n  // TODO: what's the right way to get the name of the type?\n  // @ts-expect-error name is defined\n  const typeName = type.name;\n  const encode = Schema.encodeSync(type.insert);\n\n  return (data: Readonly<Schema.Schema.Type<Insert<S>>>): Entity<S> => {\n    const entityId = generateId();\n    const encoded = encode(data);\n\n    const relations: Record<string, DocumentRelation> = {};\n\n    for (const [propertyName, field] of Object.entries(type.fields)) {\n      if (isRelationField(field) && encoded[propertyName]) {\n        for (const toEntityId of encoded[propertyName]) {\n          const relationId = generateId();\n          relations[relationId] = {\n            from: entityId,\n            to: toEntityId,\n            fromTypeName: typeName,\n            fromPropertyName: propertyName,\n            __deleted: false,\n          };\n        }\n        // we create the relation object in the repo, so we don't need it in the entity\n        delete encoded[propertyName];\n      }\n    }\n\n    // apply changes to the repo -> adds the entity to the repo entities document\n    handle.change((doc) => {\n      doc.entities ??= {};\n      doc.entities[entityId] = {\n        ...encoded,\n        '@@types@@': [typeName],\n        __deleted: false,\n        __version: '',\n      };\n      doc.relations ??= {};\n      // merge relations with existing relations\n      for (const [relationId, relation] of Object.entries(relations)) {\n        doc.relations[relationId] = relation;\n      }\n    });\n\n    return findOne(handle, type)(entityId) as Entity<S>;\n  };\n};\n", "import type { DocHandle } from '@automerge/automerge-repo';\nimport type { DocumentContent } from './types.js';\n\n/**\n * Deletes the exiting entity from the repo.\n */\nconst delete$ = (handle: DocHandle<DocumentContent>) => {\n  return (id: string): boolean => {\n    let result = false;\n\n    // apply changes to the repo -> removes the existing entity by its id\n    handle.change((doc) => {\n      if (doc.entities?.[id] !== undefined) {\n        delete doc.entities[id];\n        result = true;\n      }\n      for (const [key, relation] of Object.entries(doc.relations ?? {})) {\n        if (doc.relations?.[key] && relation.from === id) {\n          delete doc.relations[key];\n        }\n      }\n    });\n\n    return result;\n  };\n};\n\nexport { delete$ as delete };\n\n/**\n * Deletes the exiting entity from the repo.\n */\nexport const markAsDeleted = (handle: DocHandle<DocumentContent>) => {\n  return (id: string): boolean => {\n    let result = false;\n\n    // apply changes to the repo -> removes the existing entity by its id\n    handle.change((doc) => {\n      if (doc.entities?.[id] !== undefined) {\n        doc.entities[id].__deleted = true;\n        result = true;\n      }\n      for (const [key, relation] of Object.entries(doc.relations ?? {})) {\n        if (doc.relations?.[key] && relation.from === id) {\n          doc.relations[key].__deleted = true;\n        }\n      }\n    });\n\n    return result;\n  };\n};\n", "/**\n * @since 1.0.0\n */\nimport type { Brand } from 'effect/Brand';\nimport type * as Effect from 'effect/Effect';\nimport { constUndefined, dual } from 'effect/Function';\nimport * as Option from 'effect/Option';\nimport * as ParseResult from 'effect/ParseResult';\nimport { type Pipeable, pipeArguments } from 'effect/Pipeable';\nimport * as Predicate from 'effect/Predicate';\nimport * as Schema from 'effect/Schema';\nimport type * as AST from 'effect/SchemaAST';\nimport * as Struct_ from 'effect/Struct';\n\n/**\n * @since 1.0.0\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for('@effect/experimental/VariantSchema');\n\n/**\n * @since 1.0.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId;\n\nconst cacheSymbol = Symbol.for('@effect/experimental/VariantSchema/cache');\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport interface Struct<in out A extends Field.Fields> extends Pipeable {\n  readonly [TypeId]: A;\n  /** @internal */\n  [cacheSymbol]?: Record<string, Schema.Schema.All>;\n}\n\n/**\n * @since 1.0.0\n * @category guards\n */\nexport const isStruct = (u: unknown): u is Struct<any> => Predicate.hasProperty(u, TypeId);\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport declare namespace Struct {\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Any = { readonly [TypeId]: any };\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Fields = {\n    readonly [key: string]: Schema.Schema.All | Schema.PropertySignature.All | Field<any> | Struct<any> | undefined;\n  };\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Validate<A, Variant extends string> = {\n    readonly [K in keyof A]: A[K] extends { readonly [TypeId]: infer _ }\n      ? Validate<A[K], Variant>\n      : A[K] extends Field<infer Config>\n        ? [keyof Config] extends [Variant]\n          ? {}\n          : 'field must have valid variants'\n        : {};\n  };\n}\n\n/**\n * @since 1.0.0\n * @category type ids\n */\nexport const FieldTypeId: unique symbol = Symbol.for('@effect/experimental/VariantSchema/Field');\n\n/**\n * @since 1.0.0\n * @category type ids\n */\nexport type FieldTypeId = typeof FieldTypeId;\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport interface Field<in out A extends Field.Config> extends Pipeable {\n  readonly [FieldTypeId]: FieldTypeId;\n  readonly schemas: A;\n}\n\n/**\n * @since 1.0.0\n * @category guards\n */\nexport const isField = (u: unknown): u is Field<any> => Predicate.hasProperty(u, FieldTypeId);\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport declare namespace Field {\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Any = { readonly [FieldTypeId]: FieldTypeId };\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  type ValueAny = Schema.Schema.All | Schema.PropertySignature.All;\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Config = {\n    readonly [key: string]: Schema.Schema.All | Schema.PropertySignature.All | undefined;\n  };\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type ConfigWithKeys<K extends string> = {\n    readonly [P in K]?: Schema.Schema.All | Schema.PropertySignature.All;\n  };\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Fields = {\n    readonly [key: string]: Schema.Schema.All | Schema.PropertySignature.All | Field<any> | Struct<any> | undefined;\n  };\n}\n\n/**\n * @since 1.0.0\n * @category extractors\n */\nexport type ExtractFields<V extends string, Fields extends Struct.Fields, IsDefault = false> = {\n  readonly [K in keyof Fields as [Fields[K]] extends [Field<infer Config>]\n    ? V extends keyof Config\n      ? K\n      : never\n    : K]: [Fields[K]] extends [Struct<infer _>]\n    ? Extract<V, Fields[K], IsDefault>\n    : [Fields[K]] extends [Field<infer Config>]\n      ? [Config[V]] extends [Schema.Schema.All | Schema.PropertySignature.All]\n        ? Config[V]\n        : never\n      : [Fields[K]] extends [Schema.Schema.All | Schema.PropertySignature.All]\n        ? Fields[K]\n        : never;\n};\n\n/**\n * @since 1.0.0\n * @category extractors\n */\nexport type Extract<V extends string, A extends Struct<any>, IsDefault = false> = [A] extends [Struct<infer Fields>]\n  ? IsDefault extends true\n    ? [A] extends [Schema.Schema.Any]\n      ? A\n      : Schema.Struct<Schema.Simplify<ExtractFields<V, Fields>>>\n    : Schema.Struct<Schema.Simplify<ExtractFields<V, Fields>>>\n  : never;\n\nconst extract: {\n  <V extends string, const IsDefault extends boolean = false>(\n    variant: V,\n    options?: {\n      readonly isDefault?: IsDefault | undefined;\n    },\n  ): <A extends Struct<any>>(self: A) => Extract<V, A, IsDefault>;\n  <V extends string, A extends Struct<any>, const IsDefault extends boolean = false>(\n    self: A,\n    variant: V,\n    options?: {\n      readonly isDefault?: IsDefault | undefined;\n    },\n  ): Extract<V, A, IsDefault>;\n} = dual(\n  (args) => isStruct(args[0]),\n  <V extends string, A extends Struct<any>>(\n    self: A,\n    variant: V,\n    options?: {\n      readonly isDefault?: boolean | undefined;\n    },\n  ): Extract<V, A> => {\n    const cache = self[cacheSymbol] ?? (self[cacheSymbol] = {});\n    const cacheKey = options?.isDefault === true ? '__default' : variant;\n    if (cache[cacheKey] !== undefined) {\n      return cache[cacheKey] as any;\n    }\n    const fields: Record<string, any> = {};\n    for (const key of Object.keys(self[TypeId])) {\n      const value = self[TypeId][key];\n      if (TypeId in value) {\n        if (options?.isDefault === true && Schema.isSchema(value)) {\n          fields[key] = value;\n        } else {\n          fields[key] = extract(value, variant);\n        }\n      } else if (FieldTypeId in value) {\n        if (variant in value.schemas) {\n          fields[key] = value.schemas[variant];\n        }\n      } else {\n        fields[key] = value;\n      }\n    }\n    return (cache[cacheKey] = Schema.Struct(fields) as any);\n  },\n);\n\n/**\n * @category accessors\n * @since 1.0.0\n */\nexport const fields = <A extends Struct<any>>(self: A): A[TypeId] => self[TypeId];\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport interface Class<Self, Fields extends Struct.Fields, SchemaFields extends Schema.Struct.Fields, A, I, R, C>\n  extends Schema.Schema<Self, Schema.Simplify<I>, R>,\n    Struct<Fields> {\n  new (\n    props: RequiredKeys<C> extends never ? void | Schema.Simplify<C> : Schema.Simplify<C>,\n    options?: {\n      readonly disableValidation?: boolean;\n    },\n  ): A;\n\n  readonly ast: AST.Transformation;\n\n  make<Args extends Array<any>, X>(this: { new (...args: Args): X }, ...args: Args): X;\n\n  annotations(annotations: Schema.Annotations.Schema<Self>): Schema.SchemaClass<Self, Schema.Simplify<I>, R>;\n\n  readonly identifier: string;\n  readonly fields: SchemaFields;\n}\n\ntype ClassFromFields<Self, Fields extends Struct.Fields, SchemaFields extends Schema.Struct.Fields> = Class<\n  Self,\n  Fields,\n  SchemaFields,\n  Schema.Struct.Type<SchemaFields>,\n  Schema.Struct.Encoded<SchemaFields>,\n  Schema.Struct.Context<SchemaFields>,\n  Schema.Struct.Constructor<SchemaFields>\n>;\n\ntype MissingSelfGeneric<Params extends string = ''> =\n  `Missing \\`Self\\` generic - use \\`class Self extends Class<Self>()(${Params}{ ... })\\``;\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport interface Union<Members extends ReadonlyArray<Struct<any>>>\n  extends Schema.Union<{\n    readonly [K in keyof Members]: [Members[K]] extends [Schema.Schema.All] ? Members[K] : never;\n  }> {}\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport declare namespace Union {\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type Variants<Members extends ReadonlyArray<Struct<any>>, Variants extends string> = {\n    readonly [Variant in Variants]: Schema.Union<{\n      [K in keyof Members]: Extract<Variant, Members[K]>;\n    }>;\n  };\n}\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport interface fromKey<S extends Schema.Schema.All, Key extends string>\n  extends Schema.PropertySignature<\n    ':',\n    Schema.Schema.Type<S>,\n    Key,\n    ':',\n    Schema.Schema.Encoded<S>,\n    false,\n    Schema.Schema.Context<S>\n  > {}\n\n/**\n * @since 1.0.0\n * @category models\n */\nexport declare namespace fromKey {\n  /**\n   * @since 1.0.0\n   */\n  export type Rename<S, Key extends string> = S extends Schema.PropertySignature<\n    infer _TypeToken,\n    infer _Type,\n    infer _Key,\n    infer _EncodedToken,\n    infer _Encoded,\n    infer _HasDefault,\n    infer _R\n  >\n    ? Schema.PropertySignature<_TypeToken, _Type, Key, _EncodedToken, _Encoded, _HasDefault, _R>\n    : S extends Schema.Schema.All\n      ? fromKey<S, Key>\n      : never;\n}\n\n/**\n * @since 1.0.0\n * @category constructors\n */\nexport const make = <const Variants extends ReadonlyArray<string>, const Default extends Variants[number]>(options: {\n  readonly variants: Variants;\n  readonly defaultVariant: Default;\n}): {\n  readonly Struct: <const A extends Struct.Fields>(fields: A & Struct.Validate<A, Variants[number]>) => Struct<A>;\n  readonly Field: <const A extends Field.ConfigWithKeys<Variants[number]>>(\n    config: A & { readonly [K in Exclude<keyof A, Variants[number]>]: never },\n  ) => Field<A>;\n  readonly FieldOnly: <const Keys extends ReadonlyArray<Variants[number]>>(\n    ...keys: Keys\n  ) => <S extends Schema.Schema.All | Schema.PropertySignature.All>(\n    schema: S,\n  ) => Field<{ readonly [K in Keys[number]]: S }>;\n  readonly FieldExcept: <const Keys extends ReadonlyArray<Variants[number]>>(\n    ...keys: Keys\n  ) => <S extends Schema.Schema.All | Schema.PropertySignature.All>(\n    schema: S,\n  ) => Field<{ readonly [K in Exclude<Variants[number], Keys[number]>]: S }>;\n  readonly fieldEvolve: {\n    <\n      Self extends Field<any> | Field.ValueAny,\n      const Mapping extends Self extends Field<infer S>\n        ? { readonly [K in keyof S]?: (variant: S[K]) => Field.ValueAny }\n        : { readonly [K in Variants[number]]?: (variant: Self) => Field.ValueAny },\n    >(\n      f: Mapping,\n    ): (self: Self) => Field<\n      Self extends Field<infer S>\n        ? {\n            readonly [K in keyof S]: K extends keyof Mapping\n              ? Mapping[K] extends (arg: any) => any\n                ? ReturnType<Mapping[K]>\n                : S[K]\n              : S[K];\n          }\n        : {\n            readonly [K in Variants[number]]: K extends keyof Mapping\n              ? Mapping[K] extends (arg: any) => any\n                ? ReturnType<Mapping[K]>\n                : Self\n              : Self;\n          }\n    >;\n    <\n      Self extends Field<any> | Field.ValueAny,\n      const Mapping extends Self extends Field<infer S>\n        ? {\n            readonly [K in keyof S]?: (variant: S[K]) => Field.ValueAny;\n          }\n        : { readonly [K in Variants[number]]?: (variant: Self) => Field.ValueAny },\n    >(\n      self: Self,\n      f: Mapping,\n    ): Field<\n      Self extends Field<infer S>\n        ? {\n            readonly [K in keyof S]: K extends keyof Mapping\n              ? Mapping[K] extends (arg: any) => any\n                ? ReturnType<Mapping[K]>\n                : S[K]\n              : S[K];\n          }\n        : {\n            readonly [K in Variants[number]]: K extends keyof Mapping\n              ? Mapping[K] extends (arg: any) => any\n                ? ReturnType<Mapping[K]>\n                : Self\n              : Self;\n          }\n    >;\n  };\n  readonly fieldFromKey: {\n    <\n      Self extends Field<any> | Field.ValueAny,\n      const Mapping extends Self extends Field<infer S>\n        ? { readonly [K in keyof S]?: string }\n        : { readonly [K in Variants[number]]?: string },\n    >(\n      mapping: Mapping,\n    ): (self: Self) => Field<\n      Self extends Field<infer S>\n        ? {\n            readonly [K in keyof S]: K extends keyof Mapping\n              ? Mapping[K] extends string\n                ? fromKey.Rename<S[K], Mapping[K]>\n                : S[K]\n              : S[K];\n          }\n        : {\n            readonly [K in Variants[number]]: K extends keyof Mapping\n              ? Mapping[K] extends string\n                ? fromKey.Rename<Self, Mapping[K]>\n                : Self\n              : Self;\n          }\n    >;\n    <\n      Self extends Field<any> | Field.ValueAny,\n      const Mapping extends Self extends Field<infer S>\n        ? { readonly [K in keyof S]?: string }\n        : { readonly [K in Variants[number]]?: string },\n    >(\n      self: Self,\n      mapping: Mapping,\n    ): Field<\n      Self extends Field<infer S>\n        ? {\n            readonly [K in keyof S]: K extends keyof Mapping\n              ? Mapping[K] extends string\n                ? fromKey.Rename<S[K], Mapping[K]>\n                : S[K]\n              : S[K];\n          }\n        : {\n            readonly [K in Variants[number]]: K extends keyof Mapping\n              ? Mapping[K] extends string\n                ? fromKey.Rename<Self, Mapping[K]>\n                : Self\n              : Self;\n          }\n    >;\n  };\n  readonly Class: <Self = never>(\n    identifier: string,\n  ) => <const Fields extends Struct.Fields>(\n    fields: Fields & Struct.Validate<Fields, Variants[number]>,\n    annotations?: Schema.Annotations.Schema<Self>,\n  ) => [Self] extends [never]\n    ? MissingSelfGeneric\n    : ClassFromFields<Self, Fields, Schema.Simplify<ExtractFields<Default, Fields, true>>> & {\n        readonly [V in Variants[number]]: Extract<V, Struct<Fields>>;\n      };\n  readonly Union: <const Members extends ReadonlyArray<Struct<any>>>(\n    ...members: Members\n  ) => Union<Members> & Union.Variants<Members, Variants[number]>;\n  readonly extract: {\n    <V extends Variants[number]>(\n      variant: V,\n    ): <A extends Struct<any>>(self: A) => Extract<V, A, V extends Default ? true : false>;\n    <V extends Variants[number], A extends Struct<any>>(\n      self: A,\n      variant: V,\n    ): Extract<V, A, V extends Default ? true : false>;\n  };\n} => {\n  function Class<Self>(identifier: string) {\n    return (fields: Struct.Fields, annotations?: Schema.Annotations.Schema<Self>) => {\n      const idField = Field({\n        select: Schema.String,\n      });\n      const deletedField = Field({\n        select: Schema.Boolean,\n      });\n      const versionField = Field({\n        select: Schema.String,\n      });\n      const relationField = Field({\n        select: Schema.optional(\n          Schema.Struct({\n            id: Schema.String,\n          }),\n        ),\n      });\n\n      const extractFields: Struct.Fields = {\n        ...fields,\n        id: idField,\n        __deleted: deletedField,\n        __version: versionField,\n        _relation: relationField,\n      };\n      const variantStruct = Struct(extractFields);\n      const schema = extract(variantStruct, options.defaultVariant, {\n        isDefault: true,\n      });\n      class Base extends Schema.Class<any>(identifier)(schema.fields, annotations) {\n        static [TypeId] = extractFields;\n      }\n      for (const variant of options.variants) {\n        Object.defineProperty(Base, variant, {\n          value: extract(variantStruct, variant).annotations({\n            identifier: `${identifier}.${variant}`,\n            title: `${identifier}.${variant}`,\n          }),\n        });\n      }\n      return Base;\n    };\n  }\n  function FieldOnly<Keys extends Variants>(...keys: Keys) {\n    return <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => {\n      const obj: Record<string, S> = {};\n      for (const key of keys) {\n        obj[key] = schema;\n      }\n      return Field(obj);\n    };\n  }\n  function FieldExcept<Keys extends Variants>(...keys: Keys) {\n    return <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => {\n      const obj: Record<string, S> = {};\n      for (const variant of options.variants) {\n        if (!keys.includes(variant)) {\n          obj[variant] = schema;\n        }\n      }\n      return Field(obj);\n    };\n  }\n  function UnionVariants(...members: ReadonlyArray<Struct<any>>) {\n    return Union(members, options.variants);\n  }\n  const fieldEvolve = dual(\n    2,\n    (\n      self: Field<any> | Schema.Schema.All | Schema.PropertySignature.All,\n      f: Record<string, (schema: Field.ValueAny) => Field.ValueAny>,\n    ): Field<any> => {\n      const field = isField(self)\n        ? self\n        : Field(Object.fromEntries(options.variants.map((variant) => [variant, self])));\n      return Field(Struct_.evolve(field.schemas, f));\n    },\n  );\n  const fieldFromKey = dual(\n    2,\n    (\n      self:\n        | Field<{\n            readonly [key: string]: Schema.Schema.All | Schema.PropertySignature.Any | undefined;\n          }>\n        | Schema.Schema.All\n        | Schema.PropertySignature.Any,\n      mapping: Record<string, string>,\n    ): Field<any> => {\n      const obj: Record<string, any> = {};\n      if (isField(self)) {\n        for (const [key, schema] of Object.entries(self.schemas)) {\n          obj[key] = mapping[key] !== undefined ? renameFieldValue(schema as any, mapping[key]) : schema;\n        }\n      } else {\n        for (const key of options.variants) {\n          obj[key] = mapping[key] !== undefined ? renameFieldValue(self as any, mapping[key]) : self;\n        }\n      }\n      return Field(obj);\n    },\n  );\n  const extractVariants = dual(2, (self: Struct<any>, variant: string): any =>\n    extract(self, variant, {\n      isDefault: variant === options.defaultVariant,\n    }),\n  );\n  return {\n    Struct,\n    Field,\n    FieldOnly,\n    FieldExcept,\n    Class,\n    Union: UnionVariants,\n    fieldEvolve,\n    fieldFromKey,\n    extract: extractVariants,\n  } as any;\n};\n\n/**\n * @since 1.0.0\n * @category overrideable\n */\nexport const Override = <A>(value: A): A & Brand<'Override'> => value as any;\n\n/**\n * @since 1.0.0\n * @category overrideable\n */\nexport interface Overrideable<To, From, R = never>\n  extends Schema.PropertySignature<':', (To & Brand<'Override'>) | undefined, never, ':', From, true, R> {}\n\n/**\n * @since 1.0.0\n * @category overrideable\n */\nexport const Overrideable = <From, IFrom, RFrom, To, ITo, R>(\n  from: Schema.Schema<From, IFrom, RFrom>,\n  to: Schema.Schema<To, ITo>,\n  options: {\n    readonly generate: (_: Option.Option<ITo>) => Effect.Effect<From, ParseResult.ParseIssue, R>;\n  },\n): Overrideable<To, IFrom, RFrom | R> =>\n  Schema.transformOrFail(from, Schema.Union(Schema.Undefined, to.pipe(Schema.brand('Override'))), {\n    decode: (_) => ParseResult.succeed(undefined),\n    encode: (dt) => options.generate(dt === undefined ? Option.none() : Option.some(dt)),\n  }).pipe(Schema.propertySignature, Schema.withConstructorDefault(constUndefined));\n\nconst StructProto = {\n  pipe() {\n    return pipeArguments(this, arguments);\n  },\n};\n\nconst Struct = <const A extends Field.Fields>(fields: A): Struct<A> => {\n  const self = Object.create(StructProto);\n  self[TypeId] = fields;\n  return self;\n};\n\nconst FieldProto = {\n  [FieldTypeId]: FieldTypeId,\n  pipe() {\n    return pipeArguments(this, arguments);\n  },\n};\n\nconst Field = <const A extends Field.Config>(schemas: A): Field<A> => {\n  const self = Object.create(FieldProto);\n  self.schemas = schemas;\n  return self;\n};\n\nconst Union = <Members extends ReadonlyArray<Struct<any>>, Variants extends ReadonlyArray<string>>(\n  members: Members,\n  variants: Variants,\n) => {\n  class VariantUnion extends (Schema.Union(...members.filter((member) => Schema.isSchema(member))) as any) {}\n  for (const variant of variants) {\n    Object.defineProperty(VariantUnion, variant, {\n      value: Schema.Union(...members.map((member) => extract(member, variant))),\n    });\n  }\n  return VariantUnion;\n};\n\nconst renameFieldValue = <F extends Schema.Schema.All | Schema.PropertySignature.Any>(self: F, key: string) =>\n  Schema.isPropertySignature(self) ? Schema.fromKey(self, key) : Schema.fromKey(Schema.propertySignature(self), key);\n", "import * as Data from 'effect/Data';\nimport type { AnyNoContext } from './types.js';\nimport * as VariantSchema from './variant-schema.js';\n\nconst {\n  Class,\n  Field,\n  // FieldExcept,\n  // FieldOnly,\n  // Struct,\n  // Union,\n  // extract,\n  // fieldEvolve,\n  // fieldFromKey\n} = VariantSchema.make({\n  variants: ['select', 'insert', 'update'],\n  defaultVariant: 'select',\n});\n\nexport { Class, Field };\n\nexport class EntityNotFoundError extends Data.TaggedError('EntityNotFoundError')<{\n  id: string;\n  type: AnyNoContext;\n  cause?: unknown;\n}> {}\n", "// A “plain object” is any non-null object that isn’t an array\nconst isPlainObject = (obj: unknown): obj is Record<string, unknown> =>\n  typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n\n/**\n * Deeply merges two plain‐object types T and U,\n * returning a new object that has properties of both.\n * Arrays or other non‐object values in `source` simply overwrite.\n */\nexport const deepMerge = <T extends Record<string, unknown>, U extends Record<string, unknown>>(\n  target: T,\n  source: U,\n): T & U => {\n  // Start with a shallow clone of target\n  const result = { ...target } as T & U;\n\n  for (const key of Object.keys(source) as (keyof U)[]) {\n    const srcVal = source[key];\n    // biome-ignore lint/suspicious/noExplicitAny: good enough\n    const tgtVal = (target as any)[key];\n\n    if (isPlainObject(srcVal) && isPlainObject(tgtVal)) {\n      // Both sides are plain objects → recurse\n      // biome-ignore lint/suspicious/noExplicitAny: good enough\n      result[key] = deepMerge(tgtVal as Record<string, unknown>, srcVal as Record<string, unknown>) as any;\n    } else if (isPlainObject(srcVal)) {\n      // Source is object but target missing or not object → clone source\n      // biome-ignore lint/suspicious/noExplicitAny: good enough\n      result[key] = deepMerge({} as Record<string, unknown>, srcVal as Record<string, unknown>) as any;\n    } else {\n      // Non‐objects (including arrays) overwrite\n      // biome-ignore lint/suspicious/noExplicitAny: good enough\n      result[key] = srcVal as any;\n    }\n  }\n\n  return result;\n};\n", "import type * as Schema from 'effect/Schema';\nimport type { AnyNoContext, Entity } from './types.js';\n\nexport type QueryEntry = {\n  data: Array<Entity<AnyNoContext>>; // holds the decoded entities of this query and must be a stable reference and use the same reference for the `entities` array\n  listeners: Array<() => void>; // listeners to this query\n  isInvalidated: boolean;\n  include: { [K in keyof Schema.Schema.Type<AnyNoContext>]?: Record<string, Record<string, never>> };\n};\n\nexport type DecodedEntitiesCacheEntry = {\n  decoder: (data: unknown) => unknown;\n  type: AnyNoContext; // TODO should be the type of the entity\n  entities: Map<string, Entity<AnyNoContext>>; // holds all entities of this type\n  queries: Map<\n    string, // instead of serializedQueryKey as string we could also have the actual params\n    QueryEntry\n  >;\n  isInvalidated: boolean;\n};\n\n/*\n/*\n * Note: Currently we only use one global cache for all entities.\n * In the future we probably want a build function that creates a cache and returns the\n * functions (create, update, findMany, …) that use this specific cache.\n *\n * How does it work?\n *\n * We store all decoded entities in a cache and for each query we reference the entities relevant to this query.\n * Whenever a query is registered we add it to the cache and add a listener to the query. Whenever a query is unregistered we remove the listener from the query.\n */\ntype DecodedEntitiesCache = Map<\n  string, // type name\n  DecodedEntitiesCacheEntry\n>;\n\nexport const decodedEntitiesCache: DecodedEntitiesCache = new Map();\n", "import type { DecodedEntitiesCacheEntry } from './decodedEntitiesCache.js';\n\nexport const entityRelationParentsMap: Map<\n  string, // entity ID\n  Map<DecodedEntitiesCacheEntry, number>\n> = new Map();\n", "import type { DocHandle, Patch } from '@automerge/automerge-repo';\nimport * as Schema from 'effect/Schema';\nimport { deepMerge } from '../utils/internal/deep-merge.js';\nimport { isRelationField } from '../utils/isRelationField.js';\nimport { canonicalize } from '../utils/jsc.js';\nimport { type DecodedEntitiesCacheEntry, type QueryEntry, decodedEntitiesCache } from './decodedEntitiesCache.js';\nimport { entityRelationParentsMap } from './entityRelationParentsMap.js';\nimport { getEntityRelations } from './getEntityRelations.js';\nimport { hasValidTypesProperty } from './hasValidTypesProperty.js';\nimport type {\n  AnyNoContext,\n  CrossFieldFilter,\n  DocumentContent,\n  Entity,\n  EntityFieldFilter,\n  EntityFilter,\n  EntityNumberFilter,\n  EntityTextFilter,\n} from './types.js';\n\nconst documentChangeListener: {\n  subscribedQueriesCount: number;\n  unsubscribe: undefined | (() => void);\n} = {\n  subscribedQueriesCount: 0,\n  unsubscribe: undefined,\n};\n\nconst subscribeToDocumentChanges = (handle: DocHandle<DocumentContent>) => {\n  const onChange = ({ patches, doc }: { patches: Array<Patch>; doc: DocumentContent }) => {\n    const changedRelations = new Set<string>();\n    const deletedRelations = new Set<string>();\n    const changedEntities = new Set<string>();\n    const deletedEntities = new Set<string>();\n\n    for (const patch of patches) {\n      switch (patch.action) {\n        case 'put':\n        case 'insert':\n        case 'splice': {\n          if (patch.path.length > 2 && patch.path[0] === 'entities' && typeof patch.path[1] === 'string') {\n            changedEntities.add(patch.path[1]);\n          }\n          if (patch.path.length > 2 && patch.path[0] === 'relations' && typeof patch.path[1] === 'string') {\n            changedRelations.add(patch.path[1]);\n          }\n          break;\n        }\n        case 'del': {\n          if (patch.path.length === 2 && patch.path[0] === 'entities' && typeof patch.path[1] === 'string') {\n            deletedEntities.add(patch.path[1]);\n          }\n          if (patch.path.length === 2 && patch.path[0] === 'relations' && typeof patch.path[1] === 'string') {\n            deletedRelations.add(patch.path[1]);\n          }\n          break;\n        }\n      }\n    }\n\n    const entityTypes = new Set<string>();\n    // collect all query entries that changed and only at the end make one copy to change the\n    // reference to reduce the amount of O(n) operations per query to 1\n    const touchedQueries = new Set<Array<string>>();\n\n    // collect all entities that used this entity as a entry in on of their relation fields\n    const touchedRelationParents = new Set<DecodedEntitiesCacheEntry>();\n\n    // loop over all changed entities and update the cache\n    for (const entityId of changedEntities) {\n      const entity = doc.entities?.[entityId];\n      if (!hasValidTypesProperty(entity)) continue;\n      for (const typeName of entity['@@types@@']) {\n        if (typeof typeName !== 'string') continue;\n        const cacheEntry = decodedEntitiesCache.get(typeName);\n        if (!cacheEntry) continue;\n\n        let includeFromAllQueries = {};\n        for (const [, query] of cacheEntry.queries) {\n          includeFromAllQueries = deepMerge(includeFromAllQueries, query.include);\n        }\n\n        const oldDecodedEntry = cacheEntry.entities.get(entityId);\n        const relations = getEntityRelations(entityId, cacheEntry.type, doc, includeFromAllQueries);\n        let decoded: unknown | undefined;\n        try {\n          decoded = cacheEntry.decoder({\n            ...entity,\n            ...relations,\n            id: entityId,\n          });\n          cacheEntry.entities.set(entityId, decoded);\n        } catch (error) {\n          // TODO: store the corrupt entity ids somewhere, so they can be read via the API\n          console.error('error', error);\n        }\n\n        if (oldDecodedEntry) {\n          // collect all the Ids for relation entries in the `oldDecodedEntry`\n          const deletedRelationIds = new Set<string>();\n          for (const [, value] of Object.entries(oldDecodedEntry)) {\n            if (Array.isArray(value)) {\n              for (const relationEntity of value) {\n                deletedRelationIds.add(relationEntity.id);\n              }\n            }\n          }\n\n          // it's fine to remove all of them since they are re-added below\n          for (const deletedRelationId of deletedRelationIds) {\n            const deletedRelationEntry = entityRelationParentsMap.get(deletedRelationId);\n            if (deletedRelationEntry) {\n              deletedRelationEntry.set(cacheEntry, (deletedRelationEntry.get(cacheEntry) ?? 0) - 1);\n              if (deletedRelationEntry.get(cacheEntry) === 0) {\n                deletedRelationEntry.delete(cacheEntry);\n              }\n              if (deletedRelationEntry.size === 0) {\n                entityRelationParentsMap.delete(deletedRelationId);\n              }\n            }\n          }\n        }\n\n        if (decoded) {\n          for (const [, value] of Object.entries(decoded)) {\n            if (Array.isArray(value)) {\n              for (const relationEntity of value) {\n                let relationParentEntry = entityRelationParentsMap.get(relationEntity.id);\n                if (relationParentEntry) {\n                  relationParentEntry.set(cacheEntry, (relationParentEntry.get(cacheEntry) ?? 0) + 1);\n                } else {\n                  relationParentEntry = new Map();\n                  entityRelationParentsMap.set(relationEntity.id, relationParentEntry);\n                  relationParentEntry.set(cacheEntry, 1);\n                }\n              }\n            }\n          }\n        }\n\n        for (const [queryKey, query] of cacheEntry.queries) {\n          touchedQueries.add([typeName, queryKey]);\n          query.isInvalidated = true;\n        }\n\n        entityTypes.add(typeName);\n\n        // gather all the decodedEntitiesCacheEntries that have a relation to this entity to\n        // invoke their query listeners below\n        if (entityRelationParentsMap.has(entityId)) {\n          const decodedEntitiesCacheEntries = entityRelationParentsMap.get(entityId);\n          if (!decodedEntitiesCacheEntries) return;\n\n          for (const [entry] of decodedEntitiesCacheEntries) {\n            touchedRelationParents.add(entry);\n          }\n        }\n      }\n    }\n\n    // loop over all deleted entities and remove them from the cache\n    for (const entityId of deletedEntities) {\n      for (const [affectedTypeName, cacheEntry] of decodedEntitiesCache) {\n        if (cacheEntry.entities.has(entityId)) {\n          entityTypes.add(affectedTypeName);\n          cacheEntry.entities.delete(entityId);\n\n          for (const [queryKey, query] of cacheEntry.queries) {\n            // find the entity in the query and remove it using splice\n            const index = query.data.findIndex((entity) => entity.id === entityId);\n            if (index !== -1) {\n              query.data.splice(index, 1);\n              touchedQueries.add([affectedTypeName, queryKey]);\n            }\n          }\n        }\n      }\n\n      // gather all the queries of impacted parent relation queries and then remove the cacheEntry\n      if (entityRelationParentsMap.has(entityId)) {\n        const decodedEntitiesCacheEntries = entityRelationParentsMap.get(entityId);\n        if (!decodedEntitiesCacheEntries) return;\n\n        for (const [entry] of decodedEntitiesCacheEntries) {\n          touchedRelationParents.add(entry);\n        }\n\n        entityRelationParentsMap.delete(entityId);\n      }\n    }\n\n    // update the queries affected queries\n    for (const [typeName, queryKey] of touchedQueries) {\n      const cacheEntry = decodedEntitiesCache.get(typeName);\n      if (!cacheEntry) continue;\n\n      const query = cacheEntry.queries.get(queryKey);\n      if (!query) continue;\n\n      query.data = [...query.data]; // must be a new reference for React.useSyncExternalStore\n    }\n\n    // invoke all the listeners per type\n    for (const typeName of entityTypes) {\n      const cacheEntry = decodedEntitiesCache.get(typeName);\n      if (!cacheEntry) continue;\n\n      for (const query of cacheEntry.queries.values()) {\n        for (const listener of query.listeners) {\n          listener();\n        }\n      }\n    }\n\n    // trigger all the listeners of the parent relation queries\n    for (const decodedEntitiesCacheEntry of touchedRelationParents) {\n      decodedEntitiesCacheEntry.isInvalidated = true;\n      for (const query of decodedEntitiesCacheEntry.queries.values()) {\n        query.isInvalidated = true;\n        for (const listener of query.listeners) {\n          listener();\n        }\n      }\n    }\n  };\n\n  handle.on('change', onChange);\n\n  return () => {\n    handle.off('change', onChange);\n    decodedEntitiesCache.clear(); // currently we only support exactly one space\n  };\n};\n\n/**\n * Queries for a list of entities of the given type from the repo.\n */\nexport function findMany<const S extends AnyNoContext>(\n  handle: DocHandle<DocumentContent>,\n  type: S,\n  filter: EntityFilter<Schema.Schema.Type<S>> | undefined,\n  include: { [K in keyof Schema.Schema.Type<S>]?: Record<string, Record<string, never>> } | undefined,\n): { entities: Readonly<Array<Entity<S>>>; corruptEntityIds: Readonly<Array<string>> } {\n  const decode = Schema.decodeUnknownSync(type);\n  // TODO: what's the right way to get the name of the type?\n  // @ts-expect-error name is defined\n  const typeName = type.name;\n\n  const doc = handle.doc();\n  if (!doc) {\n    return { entities: [], corruptEntityIds: [] };\n  }\n  const entities = doc.entities ?? {};\n  const corruptEntityIds: string[] = [];\n  const filtered: Array<Entity<S>> = [];\n\n  const evaluateFilter = <T>(fieldFilter: EntityFieldFilter<T>, fieldValue: T): boolean => {\n    // Handle NOT operator\n    if ('not' in fieldFilter && fieldFilter.not) {\n      return !evaluateFilter(fieldFilter.not, fieldValue);\n    }\n\n    // Handle OR operator\n    if ('or' in fieldFilter) {\n      const orFilters = fieldFilter.or;\n      if (Array.isArray(orFilters)) {\n        return orFilters.some((orFilter) => evaluateFilter(orFilter as EntityFieldFilter<T>, fieldValue));\n      }\n    }\n\n    // Handle basic filters\n    if ('is' in fieldFilter) {\n      if (typeof fieldValue === 'boolean') {\n        return fieldValue === fieldFilter.is;\n      }\n      if (typeof fieldValue === 'number') {\n        return fieldValue === fieldFilter.is;\n      }\n      if (typeof fieldValue === 'string') {\n        return fieldValue === fieldFilter.is;\n      }\n    }\n\n    if (typeof fieldValue === 'number') {\n      if ('greaterThan' in fieldFilter) {\n        const numberFilter = fieldFilter as EntityNumberFilter;\n        if (numberFilter.greaterThan !== undefined && fieldValue <= numberFilter.greaterThan) {\n          return false;\n        }\n      }\n      if ('lessThan' in fieldFilter) {\n        const numberFilter = fieldFilter as EntityNumberFilter;\n        if (numberFilter.lessThan !== undefined && fieldValue >= numberFilter.lessThan) {\n          return false;\n        }\n      }\n    }\n\n    if (typeof fieldValue === 'string') {\n      if ('startsWith' in fieldFilter) {\n        const textFilter = fieldFilter as EntityTextFilter;\n        if (textFilter.startsWith !== undefined && !fieldValue.startsWith(textFilter.startsWith)) {\n          return false;\n        }\n      }\n      if ('endsWith' in fieldFilter) {\n        const textFilter = fieldFilter as EntityTextFilter;\n        if (textFilter.endsWith !== undefined && !fieldValue.endsWith(textFilter.endsWith)) {\n          return false;\n        }\n      }\n      if ('contains' in fieldFilter) {\n        const textFilter = fieldFilter as EntityTextFilter;\n        if (textFilter.contains !== undefined && !fieldValue.includes(textFilter.contains)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const evaluateCrossFieldFilter = (\n    crossFieldFilter: CrossFieldFilter<Schema.Schema.Type<S>>,\n    entity: Entity<S>,\n  ): boolean => {\n    for (const fieldName in crossFieldFilter) {\n      const fieldFilter = crossFieldFilter[fieldName];\n      const fieldValue = entity[fieldName];\n\n      if (fieldFilter && !evaluateFilter(fieldFilter, fieldValue)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const evaluateEntityFilter = (entityFilter: EntityFilter<Schema.Schema.Type<S>>, entity: Entity<S>): boolean => {\n    // handle top-level NOT operator\n    if ('not' in entityFilter && entityFilter.not) {\n      return !evaluateCrossFieldFilter(entityFilter.not, entity);\n    }\n\n    // handle top-level OR operator\n    if ('or' in entityFilter && Array.isArray(entityFilter.or)) {\n      return entityFilter.or.some((orFilter) => evaluateCrossFieldFilter(orFilter, entity));\n    }\n\n    // evaluate regular field filters\n    return evaluateCrossFieldFilter(entityFilter, entity);\n  };\n\n  for (const id in entities) {\n    const entity = entities[id];\n    if (hasValidTypesProperty(entity) && entity['@@types@@'].includes(typeName)) {\n      const relations = getEntityRelations(id, type, doc, include);\n      try {\n        const decoded = { ...decode({ ...entity, ...relations, id }), type: typeName };\n        if (filter) {\n          if (evaluateEntityFilter(filter, decoded)) {\n            // injecting the schema to the entity to be able to access it in the preparePublish function\n            decoded.__schema = type;\n            filtered.push(decoded);\n          }\n        } else {\n          // injecting the schema to the entity to be able to access it in the preparePublish function\n          decoded.__schema = type;\n          filtered.push(decoded);\n        }\n      } catch (error) {\n        corruptEntityIds.push(id);\n      }\n    }\n  }\n\n  return { entities: filtered, corruptEntityIds: [] };\n}\n\nconst stableEmptyArray: Array<unknown> = [];\n\nexport type FindManySubscription<S extends AnyNoContext> = {\n  subscribe: (callback: () => void) => () => void;\n  getEntities: () => Readonly<Array<Entity<S>>>;\n};\n\nexport function subscribeToFindMany<const S extends AnyNoContext>(\n  handle: DocHandle<DocumentContent>,\n  type: S,\n  filter: { [K in keyof Schema.Schema.Type<S>]?: EntityFieldFilter<Schema.Schema.Type<S>[K]> } | undefined,\n  include: { [K in keyof Schema.Schema.Type<S>]?: Record<string, Record<string, never>> } | undefined,\n): FindManySubscription<S> {\n  const queryKey = filter ? canonicalize(filter) : 'all';\n  const decode = Schema.decodeUnknownSync(type);\n  // TODO: what's the right way to get the name of the type?\n  // @ts-expect-error name is defined\n  const typeName = type.name;\n\n  const getEntities = () => {\n    const cacheEntry = decodedEntitiesCache.get(typeName);\n    if (!cacheEntry) return stableEmptyArray;\n\n    const query = cacheEntry.queries.get(queryKey);\n    if (!query) return stableEmptyArray;\n\n    if (!cacheEntry.isInvalidated && !query.isInvalidated) {\n      return query.data;\n    }\n\n    const { entities } = findMany(handle, type, filter, include);\n\n    for (const entity of entities) {\n      cacheEntry?.entities.set(entity.id, entity);\n    }\n\n    // must be a new reference to ensure it can be used in React.useMemo\n    query.data = [...entities];\n    cacheEntry.isInvalidated = false;\n    query.isInvalidated = false;\n\n    return query.data;\n  };\n\n  const allTypes = new Set<S>();\n  for (const [_key, field] of Object.entries(type.fields)) {\n    if (isRelationField(field)) {\n      allTypes.add(field as S);\n    }\n  }\n\n  const subscribe = (callback: () => void) => {\n    let cacheEntry = decodedEntitiesCache.get(typeName);\n\n    if (!cacheEntry) {\n      const entitiesMap = new Map();\n      const queries = new Map<string, QueryEntry>();\n\n      queries.set(queryKey, {\n        data: [],\n        listeners: [],\n        isInvalidated: true,\n        include: include ?? {},\n      });\n\n      cacheEntry = {\n        decoder: decode,\n        type,\n        entities: entitiesMap,\n        queries,\n        isInvalidated: true,\n      };\n\n      decodedEntitiesCache.set(typeName, cacheEntry);\n    }\n\n    let query = cacheEntry.queries.get(queryKey);\n    if (!query) {\n      query = {\n        data: [],\n        listeners: [],\n        isInvalidated: true,\n        include: include ?? {},\n      };\n      // we just set up the query and expect it to correctly set itself up in findMany\n      cacheEntry.queries.set(queryKey, query);\n    }\n\n    if (query?.listeners) {\n      query.listeners.push(callback);\n    }\n\n    return () => {\n      const cacheEntry = decodedEntitiesCache.get(typeName);\n      if (cacheEntry) {\n        // first cleanup the queries\n        const query = cacheEntry.queries.get(queryKey);\n        if (query) {\n          query.listeners = query?.listeners?.filter((cachedListener) => cachedListener !== callback);\n          if (query.listeners.length === 0) {\n            cacheEntry.queries.delete(queryKey);\n          }\n        }\n        // if the last query is removed, cleanup the entityRelationParentsMap and remove the decodedEntitiesCacheEntry\n        if (cacheEntry.queries.size === 0) {\n          entityRelationParentsMap.forEach((relationCacheEntries, key) => {\n            for (const [relationCacheEntry, counter] of relationCacheEntries) {\n              if (relationCacheEntry === cacheEntry && counter === 0) {\n                relationCacheEntries.delete(cacheEntry);\n              }\n            }\n            if (relationCacheEntries.size === 0) {\n              entityRelationParentsMap.delete(key);\n            }\n          });\n          decodedEntitiesCache.delete(typeName);\n        }\n      }\n\n      documentChangeListener.subscribedQueriesCount--;\n      if (documentChangeListener.subscribedQueriesCount === 0) {\n        documentChangeListener.unsubscribe?.();\n        documentChangeListener.unsubscribe = undefined;\n      }\n    };\n  };\n\n  if (documentChangeListener.subscribedQueriesCount === 0) {\n    documentChangeListener.unsubscribe = subscribeToDocumentChanges(handle);\n  }\n  documentChangeListener.subscribedQueriesCount++;\n\n  return { subscribe, getEntities };\n}\n", "import type { DocHandle } from '@automerge/automerge-repo';\nimport type { DocumentContent } from './types.js';\n\n/**\n * Removes a relation from an entity\n */\nexport const removeRelation = (handle: DocHandle<DocumentContent>) => {\n  return (relationId: string): boolean => {\n    let result = false;\n\n    // apply changes to the repo -> removes the existing entity by its id\n    handle.change((doc) => {\n      if (doc.relations?.[relationId] !== undefined) {\n        doc.relations[relationId].__deleted = true;\n        result = true;\n      }\n    });\n\n    return result;\n  };\n};\n", "import type { DocHandle } from '@automerge/automerge-repo';\nimport * as Schema from 'effect/Schema';\nimport { EntityNotFoundError } from './entity.js';\nimport type { AnyNoContext, DocumentContent, Entity, Update } from './types.js';\n\n/**\n * Update an existing entity model of given type in the repo.\n */\nexport const update = <const S extends AnyNoContext>(handle: DocHandle<DocumentContent>, type: S) => {\n  const validate = Schema.validateSync(Schema.partial(type.update));\n  const encode = Schema.encodeSync(type.update);\n  const decode = Schema.decodeUnknownSync(type.update);\n\n  // TODO: what's the right way to get the name of the type?\n  // @ts-expect-error name is defined\n  const typeName = type.name;\n\n  return (id: string, data: Schema.Simplify<Partial<Schema.Schema.Type<Update<S>>>>): Entity<S> => {\n    validate(data);\n\n    // apply changes to the repo -> updates the existing entity to the repo entities document\n    let updated: Schema.Schema.Type<S> | undefined = undefined;\n    handle.change((doc) => {\n      if (doc.entities === undefined) {\n        return;\n      }\n\n      // TODO: Fetch the pre-decoded value from the local cache.\n      const entity = doc.entities[id] ?? undefined;\n      if (entity === undefined || typeof entity !== 'object') {\n        return;\n      }\n\n      // TODO: Try to get a diff of the entity properties and only override the changed ones.\n      updated = { ...decode(entity), ...data };\n\n      const encoded = {\n        ...encode(updated),\n        '@@types@@': [typeName],\n        __deleted: entity.__deleted ?? false,\n        __version: entity.__version ?? '',\n      };\n      // filter out undefined values otherwise Automerge will throw an error\n      for (const key in updated) {\n        if (updated[key] === undefined) {\n          delete encoded[key];\n        }\n      }\n      doc.entities[id] = encoded;\n    });\n\n    if (updated === undefined) {\n      throw new EntityNotFoundError({ id, type });\n    }\n\n    return {\n      id,\n      type: typeName,\n      ...(updated as Schema.Schema.Type<S>),\n      // injecting the schema to the entity to be able to access it in the preparePublish function\n      __schema: type,\n    };\n  };\n};\n", "export * from './auth-storage.js';\nexport * from './get-verified-identity.js';\nexport * from './identity-encryption.js';\nexport * from './prove-ownership.js';\nexport * from './logout.js';\nexport * from './types.js';\n", "import type { PrivateAppIdentity } from '../connect/types.js';\nimport type { Storage } from './types.js';\n\nexport const storeIdentity = (storage: Storage, identity: PrivateAppIdentity) => {\n  storage.setItem('hypergraph:app-identity-address', identity.address);\n  storage.setItem('hypergraph:app-identity-address-private-key', identity.addressPrivateKey);\n  storage.setItem('hypergraph:app-identity-account-address', identity.accountAddress);\n  storage.setItem('hypergraph:signature-public-key', identity.signaturePublicKey);\n  storage.setItem('hypergraph:signature-private-key', identity.signaturePrivateKey);\n  storage.setItem('hypergraph:encryption-public-key', identity.encryptionPublicKey);\n  storage.setItem('hypergraph:encryption-private-key', identity.encryptionPrivateKey);\n  storage.setItem('hypergraph:session-token', identity.sessionToken);\n  storage.setItem('hypergraph:session-token-expires', identity.sessionTokenExpires.toISOString());\n  storage.setItem('hypergraph:permission-id', identity.permissionId);\n};\n\nexport const loadIdentity = (storage: Storage): PrivateAppIdentity | null => {\n  const address = storage.getItem('hypergraph:app-identity-address');\n  const addressPrivateKey = storage.getItem('hypergraph:app-identity-address-private-key');\n  const accountAddress = storage.getItem('hypergraph:app-identity-account-address');\n  const signaturePublicKey = storage.getItem('hypergraph:signature-public-key');\n  const signaturePrivateKey = storage.getItem('hypergraph:signature-private-key');\n  const encryptionPublicKey = storage.getItem('hypergraph:encryption-public-key');\n  const encryptionPrivateKey = storage.getItem('hypergraph:encryption-private-key');\n  const sessionToken = storage.getItem('hypergraph:session-token');\n  const sessionTokenExpires = storage.getItem('hypergraph:session-token-expires');\n  const permissionId = storage.getItem('hypergraph:permission-id');\n  if (\n    !address ||\n    !addressPrivateKey ||\n    !accountAddress ||\n    !signaturePublicKey ||\n    !signaturePrivateKey ||\n    !encryptionPublicKey ||\n    !encryptionPrivateKey ||\n    !sessionToken ||\n    !sessionTokenExpires ||\n    !permissionId\n  ) {\n    return null;\n  }\n  return {\n    address,\n    addressPrivateKey,\n    accountAddress,\n    signaturePublicKey,\n    signaturePrivateKey,\n    encryptionPublicKey,\n    encryptionPrivateKey,\n    sessionToken,\n    sessionTokenExpires: new Date(sessionTokenExpires),\n    permissionId,\n  };\n};\n\nexport const wipeIdentity = (storage: Storage) => {\n  storage.removeItem('hypergraph:app-identity-address');\n  storage.removeItem('hypergraph:app-identity-address-private-key');\n  storage.removeItem('hypergraph:app-identity-account-address');\n  storage.removeItem('hypergraph:signature-public-key');\n  storage.removeItem('hypergraph:signature-private-key');\n  storage.removeItem('hypergraph:encryption-public-key');\n  storage.removeItem('hypergraph:encryption-private-key');\n  storage.removeItem('hypergraph:session-token');\n  storage.removeItem('hypergraph:session-token-expires');\n  storage.removeItem('hypergraph:permission-id');\n};\n", "import type { AnyDocumentId, DocHandle, Repo } from '@automerge/automerge-repo';\nimport { type Store, createStore } from '@xstate/store';\nimport type { PrivateAppIdentity } from './connect/types.js';\nimport type { DocumentContent } from './entity/types.js';\nimport { mergeMessages } from './inboxes/merge-messages.js';\nimport type { InboxSenderAuthPolicy } from './inboxes/types.js';\nimport type { Invitation, Updates } from './messages/index.js';\nimport type { SpaceEvent, SpaceState } from './space-events/index.js';\nimport type { Mapping } from './types.js';\nimport { idToAutomergeId } from './utils/automergeId.js';\n\nexport type InboxMessageStorageEntry = {\n  id: string;\n  plaintext: string;\n  ciphertext: string;\n  signature: {\n    hex: string;\n    recovery: number;\n  } | null;\n  createdAt: string;\n  authorAccountAddress: string | null;\n};\n\nexport type SpaceInboxStorageEntry = {\n  inboxId: string;\n  isPublic: boolean;\n  authPolicy: InboxSenderAuthPolicy;\n  encryptionPublicKey: string;\n  secretKey: string;\n  lastMessageClock: string;\n  messages: InboxMessageStorageEntry[]; // Kept sorted by UUIDv7\n  seenMessageIds: Set<string>; // For deduplication\n};\n\nexport type AccountInboxStorageEntry = {\n  inboxId: string;\n  isPublic: boolean;\n  authPolicy: InboxSenderAuthPolicy;\n  encryptionPublicKey: string;\n  lastMessageClock: string;\n  messages: InboxMessageStorageEntry[]; // Kept sorted by UUIDv7\n  seenMessageIds: Set<string>; // For deduplication\n};\n\nexport type SpaceStorageEntry = {\n  id: string;\n  name: string;\n  events: SpaceEvent[];\n  state: SpaceState | undefined;\n  keys: { id: string; key: string }[];\n  automergeDocHandle: DocHandle<DocumentContent>;\n  inboxes: SpaceInboxStorageEntry[];\n};\n\ninterface StoreContext {\n  spaces: SpaceStorageEntry[];\n  spacesLoadingIsPending: boolean;\n  updatesInFlight: string[];\n  invitations: Invitation[];\n  repo: Repo | null;\n  identities: {\n    [accountAddress: string]: {\n      encryptionPublicKey: string;\n      signaturePublicKey: string;\n      accountProof: string;\n      keyProof: string;\n    };\n  };\n  authenticated: boolean;\n  identity: PrivateAppIdentity | null;\n  lastUpdateClock: { [spaceId: string]: number };\n  accountInboxes: AccountInboxStorageEntry[];\n  mapping: Mapping;\n}\n\nconst initialStoreContext: StoreContext = {\n  spaces: [],\n  spacesLoadingIsPending: true,\n  updatesInFlight: [],\n  invitations: [],\n  repo: null,\n  identities: {},\n  authenticated: false,\n  identity: null,\n  lastUpdateClock: {},\n  accountInboxes: [],\n  mapping: {},\n};\n\ntype StoreEvent =\n  | { type: 'setInvitations'; invitations: Invitation[] }\n  | { type: 'setMapping'; mapping: Mapping }\n  | { type: 'reset' }\n  | { type: 'addUpdateInFlight'; updateId: string }\n  | { type: 'removeUpdateInFlight'; updateId: string }\n  | { type: 'setSpacesList'; spaces: { id: string; name: string }[] }\n  | { type: 'applyEvent'; spaceId: string; event: SpaceEvent; state: SpaceState }\n  | { type: 'updateConfirmed'; spaceId: string; clock: number }\n  | { type: 'applyUpdate'; spaceId: string; firstUpdateClock: number; lastUpdateClock: number }\n  | {\n      type: 'addVerifiedIdentity';\n      accountAddress: string;\n      encryptionPublicKey: string;\n      signaturePublicKey: string;\n      accountProof: string;\n      keyProof: string;\n    }\n  | {\n      type: 'setSpaceInbox';\n      spaceId: string;\n      inbox: SpaceInboxStorageEntry;\n    }\n  | {\n      type: 'setSpaceInboxMessages';\n      spaceId: string;\n      inboxId: string;\n      messages: InboxMessageStorageEntry[];\n      lastMessageClock: string;\n    }\n  | {\n      type: 'setAccountInbox';\n      inbox: AccountInboxStorageEntry;\n    }\n  | {\n      type: 'setAccountInboxMessages';\n      inboxId: string;\n      messages: InboxMessageStorageEntry[];\n      lastMessageClock: string;\n    }\n  | {\n      type: 'setSpace';\n      spaceId: string;\n      name: string;\n      updates?: Updates;\n      events: SpaceEvent[];\n      inboxes?: SpaceInboxStorageEntry[];\n      spaceState: SpaceState;\n      keys: {\n        id: string;\n        key: string;\n      }[];\n    }\n  | {\n      type: 'setAuth';\n      identity: PrivateAppIdentity;\n    }\n  | {\n      type: 'resetAuth';\n    }\n  | {\n      type: 'setRepo';\n      repo: Repo;\n    };\n\ntype GenericEventObject = { type: string };\n\nexport const store: Store<StoreContext, StoreEvent, GenericEventObject> = createStore({\n  context: initialStoreContext,\n  on: {\n    setInvitations: (context, event: { invitations: Invitation[] }) => {\n      return {\n        ...context,\n        invitations: event.invitations,\n      };\n    },\n    setMapping: (context, event: { mapping: Mapping }) => {\n      return {\n        ...context,\n        mapping: event.mapping,\n      };\n    },\n    reset: (context) => {\n      // once the repo is initialized, there is no need to reset it\n      return { ...initialStoreContext, repo: context.repo, mapping: context.mapping };\n    },\n    addUpdateInFlight: (context, event: { updateId: string }) => {\n      return {\n        ...context,\n        updatesInFlight: [...context.updatesInFlight, event.updateId],\n      };\n    },\n    removeUpdateInFlight: (context, event: { updateId: string }) => {\n      return {\n        ...context,\n        updatesInFlight: context.updatesInFlight.filter((id) => id !== event.updateId),\n      };\n    },\n    setSpacesList: (context, event: { spaces: { id: string; name: string }[] }) => {\n      if (!context.repo) {\n        return context;\n      }\n\n      let storeContext: StoreContext = { ...context, spacesLoadingIsPending: false };\n\n      for (const space of event.spaces) {\n        const existingSpace = context.spaces.find((s) => s.id === space.id);\n        const lastUpdateClock = context.lastUpdateClock[space.id] ?? -1;\n        const result = context.repo.findWithProgress<DocumentContent>(idToAutomergeId(space.id) as AnyDocumentId);\n\n        // set it to ready to interact with the document\n        result.handle.doneLoading();\n\n        if (existingSpace) {\n          storeContext = {\n            ...storeContext,\n            spaces: storeContext.spaces.map((existingSpace) => {\n              if (existingSpace.id === space.id) {\n                const newSpace: SpaceStorageEntry = {\n                  id: existingSpace.id,\n                  name: existingSpace.name,\n                  events: existingSpace.events ?? [],\n                  state: existingSpace.state,\n                  keys: existingSpace.keys ?? [],\n                  automergeDocHandle: result.handle,\n                  inboxes: existingSpace.inboxes ?? [],\n                };\n                return newSpace;\n              }\n              return existingSpace;\n            }),\n            lastUpdateClock: {\n              ...storeContext.lastUpdateClock,\n              [space.id]: lastUpdateClock,\n            },\n          };\n        } else {\n          storeContext = {\n            ...storeContext,\n            spaces: [\n              ...storeContext.spaces,\n              {\n                id: space.id,\n                name: space.name,\n                events: [],\n                state: undefined,\n                keys: [],\n                inboxes: [],\n                automergeDocHandle: result.handle,\n              },\n            ],\n            lastUpdateClock: {\n              ...storeContext.lastUpdateClock,\n              [space.id]: -1,\n            },\n          };\n        }\n      }\n\n      return storeContext;\n    },\n    applyEvent: (context, event: { spaceId: string; event: SpaceEvent; state: SpaceState }) => {\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            return { ...space, events: [...space.events, event.event], state: event.state };\n          }\n          return space;\n        }),\n      };\n    },\n    updateConfirmed: (context, event: { spaceId: string; clock: number }) => {\n      return {\n        ...context,\n        lastUpdateClock: {\n          ...context.lastUpdateClock,\n          [event.spaceId]: event.clock,\n        },\n      };\n    },\n    applyUpdate: (context, event: { spaceId: string; firstUpdateClock: number; lastUpdateClock: number }) => {\n      const lastUpdateClock = context.lastUpdateClock[event.spaceId] ?? -1;\n      if (event.firstUpdateClock === lastUpdateClock + 1) {\n        return {\n          ...context,\n          lastUpdateClock: {\n            ...context.lastUpdateClock,\n            [event.spaceId]: event.lastUpdateClock,\n          },\n        };\n      }\n\n      // TODO else case: request missing updates from server\n      return context;\n    },\n    addVerifiedIdentity: (\n      context,\n      event: {\n        accountAddress: string;\n        encryptionPublicKey: string;\n        signaturePublicKey: string;\n        accountProof: string;\n        keyProof: string;\n      },\n    ) => {\n      return {\n        ...context,\n        identities: {\n          ...context.identities,\n          [event.accountAddress]: {\n            encryptionPublicKey: event.encryptionPublicKey,\n            signaturePublicKey: event.signaturePublicKey,\n            accountProof: event.accountProof,\n            keyProof: event.keyProof,\n          },\n        },\n      };\n    },\n    setSpaceInbox: (context, event: { spaceId: string; inbox: SpaceInboxStorageEntry }) => {\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            const existingInbox = space.inboxes.find((inbox) => inbox.inboxId === event.inbox.inboxId);\n            if (existingInbox) {\n              return {\n                ...space,\n                inboxes: space.inboxes.map((inbox) => {\n                  if (inbox.inboxId === event.inbox.inboxId) {\n                    const { messages, seenMessageIds } = mergeMessages(\n                      existingInbox.messages,\n                      existingInbox.seenMessageIds,\n                      event.inbox.messages,\n                    );\n                    return {\n                      ...event.inbox,\n                      messages,\n                      seenMessageIds,\n                    };\n                  }\n                  return inbox;\n                }),\n              };\n            }\n            return { ...space, inboxes: [...space.inboxes, event.inbox] };\n          }\n          return space;\n        }),\n      };\n    },\n    setSpaceInboxMessages: (\n      context,\n      event: { spaceId: string; inboxId: string; messages: InboxMessageStorageEntry[]; lastMessageClock: string },\n    ) => {\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            return {\n              ...space,\n              inboxes: space.inboxes.map((inbox) => {\n                if (inbox.inboxId === event.inboxId) {\n                  const { messages, seenMessageIds } = mergeMessages(\n                    inbox.messages,\n                    inbox.seenMessageIds,\n                    event.messages,\n                  );\n                  return {\n                    ...inbox,\n                    messages,\n                    seenMessageIds,\n                    lastMessageClock: new Date(\n                      Math.max(new Date(inbox.lastMessageClock).getTime(), new Date(event.lastMessageClock).getTime()),\n                    ).toISOString(),\n                  };\n                }\n                return inbox;\n              }),\n            };\n          }\n          return space;\n        }),\n      };\n    },\n    setAccountInbox: (context, event: { inbox: AccountInboxStorageEntry }) => {\n      const existingInbox = context.accountInboxes.find((inbox) => inbox.inboxId === event.inbox.inboxId);\n      if (existingInbox) {\n        return {\n          ...context,\n          accountInboxes: context.accountInboxes.map((inbox) => {\n            if (inbox.inboxId === event.inbox.inboxId) {\n              const { messages, seenMessageIds } = mergeMessages(\n                existingInbox.messages,\n                existingInbox.seenMessageIds,\n                event.inbox.messages,\n              );\n              return {\n                ...event.inbox,\n                messages,\n                seenMessageIds,\n              };\n            }\n            return inbox;\n          }),\n        };\n      }\n      return {\n        ...context,\n        accountInboxes: [...context.accountInboxes, event.inbox],\n      };\n    },\n    setAccountInboxMessages: (\n      context,\n      event: { inboxId: string; messages: InboxMessageStorageEntry[]; lastMessageClock: string },\n    ) => {\n      return {\n        ...context,\n        accountInboxes: context.accountInboxes.map((inbox) => {\n          if (inbox.inboxId === event.inboxId) {\n            const { messages, seenMessageIds } = mergeMessages(inbox.messages, inbox.seenMessageIds, event.messages);\n            return {\n              ...inbox,\n              messages,\n              seenMessageIds,\n              lastMessageClock: new Date(\n                Math.max(new Date(inbox.lastMessageClock).getTime(), new Date(event.lastMessageClock).getTime()),\n              ).toISOString(),\n            };\n          }\n          return inbox;\n        }),\n      };\n    },\n    setSpace: (\n      context,\n      event: {\n        spaceId: string;\n        name: string;\n        updates?: Updates;\n        inboxes?: SpaceInboxStorageEntry[];\n        events: SpaceEvent[];\n        spaceState: SpaceState;\n        keys: {\n          id: string;\n          key: string;\n        }[];\n      },\n    ) => {\n      const existingSpace = context.spaces.find((s) => s.id === event.spaceId);\n      if (!existingSpace && context.repo) {\n        const result = context.repo.findWithProgress<DocumentContent>(idToAutomergeId(event.spaceId) as AnyDocumentId);\n        // set it to ready to interact with the document\n        result.handle.doneLoading();\n\n        const newSpace: SpaceStorageEntry = {\n          name: event.name,\n          id: event.spaceId,\n          events: event.events,\n          state: event.spaceState,\n          keys: event.keys,\n          automergeDocHandle: result.handle,\n          inboxes: event.inboxes ?? [],\n        };\n        return {\n          ...context,\n          spaces: [...context.spaces, newSpace],\n          lastUpdateClock: {\n            ...context.lastUpdateClock,\n            [event.spaceId]: -1,\n          },\n        };\n      }\n\n      let lastUpdateClock = context.lastUpdateClock[event.spaceId] ?? -1;\n      if (event.updates?.firstUpdateClock === lastUpdateClock + 1) {\n        lastUpdateClock = event.updates.lastUpdateClock;\n      } else {\n        // TODO request missing updates from server\n      }\n\n      return {\n        ...context,\n        spaces: context.spaces.map((space) => {\n          if (space.id === event.spaceId) {\n            // Merge inboxes: keep existing ones and add new ones\n            const mergedInboxes = [...space.inboxes];\n            for (const newInbox of event.inboxes ?? []) {\n              const existingInboxIndex = mergedInboxes.findIndex((inbox) => inbox.inboxId === newInbox.inboxId);\n              if (existingInboxIndex === -1) {\n                // Only add if it's a new inbox\n                mergedInboxes.push(newInbox);\n              }\n            }\n\n            return {\n              ...space,\n              events: event.events,\n              state: event.spaceState,\n              keys: event.keys,\n              inboxes: mergedInboxes,\n            };\n          }\n          return space;\n        }),\n        lastUpdateClock: {\n          ...context.lastUpdateClock,\n          [event.spaceId]: lastUpdateClock,\n        },\n      };\n    },\n    setAuth: (context, event: { identity: PrivateAppIdentity }) => {\n      return {\n        ...context,\n        authenticated: true,\n        // TODO: remove hard-coded account address and use the one from the identity\n        identity: { ...event.identity },\n      };\n    },\n    resetAuth: (context) => {\n      return {\n        ...context,\n        identity: null,\n        authenticated: false,\n      };\n    },\n    setRepo: (context, event: { repo: Repo }) => {\n      return {\n        ...context,\n        repo: event.repo,\n      };\n    },\n  },\n});\n", "import * as Schema from 'effect/Schema';\nimport type { Chain } from 'viem';\nimport * as Messages from '../messages/index.js';\nimport { store } from '../store.js';\nimport { verifyIdentityOwnership } from './prove-ownership.js';\n\nexport const getVerifiedIdentity = async (\n  accountAddress: string,\n  syncServerUri: string,\n  chain: Chain,\n  rpcUrl: string,\n): Promise<{\n  accountAddress: string;\n  encryptionPublicKey: string;\n  signaturePublicKey: string;\n}> => {\n  const storeState = store.getSnapshot();\n  const identity = storeState.context.identities[accountAddress];\n  if (identity) {\n    return {\n      accountAddress,\n      encryptionPublicKey: identity.encryptionPublicKey,\n      signaturePublicKey: identity.signaturePublicKey,\n    };\n  }\n  const res = await fetch(`${syncServerUri}/identity?accountAddress=${accountAddress}`);\n  if (res.status !== 200) {\n    throw new Error('Failed to fetch identity');\n  }\n  const resDecoded = Schema.decodeUnknownSync(Messages.ResponseIdentity)(await res.json());\n\n  if (\n    !(await verifyIdentityOwnership(\n      resDecoded.accountAddress,\n      resDecoded.signaturePublicKey,\n      resDecoded.accountProof,\n      resDecoded.keyProof,\n      chain,\n      rpcUrl,\n    ))\n  ) {\n    throw new Error('Invalid identity in getVerifiedIdentity');\n  }\n\n  store.send({\n    type: 'addVerifiedIdentity',\n    accountAddress: resDecoded.accountAddress,\n    encryptionPublicKey: resDecoded.encryptionPublicKey,\n    signaturePublicKey: resDecoded.signaturePublicKey,\n    accountProof: resDecoded.accountProof,\n    keyProof: resDecoded.keyProof,\n  });\n  return {\n    accountAddress: resDecoded.accountAddress,\n    encryptionPublicKey: resDecoded.encryptionPublicKey,\n    signaturePublicKey: resDecoded.signaturePublicKey,\n  };\n};\n", "import { gcm } from '@noble/ciphers/aes';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\nimport { hkdf } from '@noble/hashes/hkdf';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type { Hex } from 'viem';\nimport { verifyMessage } from 'viem';\n\nimport { bytesToHex, canonicalize, hexToBytes } from '../utils/index.js';\nimport type { IdentityKeys, Signer } from './types.js';\n\n// Adapted from the XMTP approach to encrypt keys\n// See: https://github.com/xmtp/xmtp-js/blob/8d6e5a65813902926baac8150a648587acbaad92/sdks/js-sdk/src/keystore/providers/NetworkKeyManager.ts#L79-L116\n// (We reimplement their encrypt/decrypt functions using noble).\n\nconst hkdfDeriveKey = (secret: Uint8Array, salt: Uint8Array): Uint8Array => {\n  return hkdf(sha256, secret, salt, '', 32);\n};\n\n// This implements the same encryption as  https://github.com/xmtp/xmtp-js/blob/336471de4ea95416ad0f4f9850d3f12bb0a13f1e/sdks/js-sdk/src/encryption/encryption.ts#L18\n// But using @noble/ciphers instead of the WebCrypto API.\n// The XMTP code was audited by Certik: https://skynet.certik.com/projects/xmtp\n//\n// Worth noting that GCM nonce collision would break the encryption,\n// and 12 bytes is not a lot. So this function should not be used to encrypt\n// a large number of messages with the same secret. In our case it should be okay\n// as each secret is only used to encrypt a single identity. If we need\n// something more secure for a larger number of messages we should use a\n// different encryption scheme, e.g. XAES-256-GCM, see https://words.filippo.io/dispatches/xaes-256-gcm/\nconst encrypt = (msg: Uint8Array, secret: Uint8Array): string => {\n  const hkdfSalt = randomBytes(32);\n  const gcmNonce = randomBytes(12);\n  const derivedKey = hkdfDeriveKey(secret, hkdfSalt);\n\n  const aes = gcm(derivedKey, gcmNonce);\n\n  const ciphertext = aes.encrypt(msg);\n\n  // TODO: Use Effect Schema and better serialization?\n  const ciphertextJson = canonicalize({\n    aes256GcmHkdfSha256: {\n      payload: bytesToHex(ciphertext),\n      hkdfSalt: bytesToHex(hkdfSalt),\n      gcmNonce: bytesToHex(gcmNonce),\n    },\n  });\n  return bytesToHex(new TextEncoder().encode(ciphertextJson));\n};\n\n// This implements the same decryption as  https://github.com/xmtp/xmtp-js/blob/336471de4ea95416ad0f4f9850d3f12bb0a13f1e/sdks/js-sdk/src/encryption/encryption.ts#L41\n// But using @noble/ciphers instead of the WebCrypto API\n// The XMTP code was audited by Certik: https://skynet.certik.com/projects/xmtp\nconst decrypt = (ciphertext: string, secret: Uint8Array): Uint8Array => {\n  const ciphertextJson = new TextDecoder().decode(hexToBytes(ciphertext));\n  const { aes256GcmHkdfSha256 } = JSON.parse(ciphertextJson);\n  const hkdfSalt = hexToBytes(aes256GcmHkdfSha256.hkdfSalt);\n  const gcmNonce = hexToBytes(aes256GcmHkdfSha256.gcmNonce);\n  const derivedKey = hkdfDeriveKey(secret, hkdfSalt);\n\n  const aes = gcm(derivedKey, gcmNonce);\n\n  return aes.decrypt(hexToBytes(aes256GcmHkdfSha256.payload));\n};\n\nconst signatureMessage = (nonce: Uint8Array): string => {\n  return `The Graph: sign to encrypt/decrypt identity keys.\\nNonce: ${bytesToHex(nonce)}\\n`;\n};\n\nexport const encryptIdentity = async (\n  signer: Signer,\n  accountAddress: string,\n  keys: IdentityKeys,\n): Promise<{ ciphertext: string; nonce: string }> => {\n  const nonce = randomBytes(32);\n  const message = signatureMessage(nonce);\n  const signature = (await signer.signMessage(message)) as Hex;\n\n  // Check that the signature is valid\n  const valid = await verifyMessage({\n    address: accountAddress as Hex,\n    message,\n    signature,\n  });\n  if (!valid) {\n    throw new Error('Invalid signature');\n  }\n  const secretKey = hexToBytes(signature);\n  // We use a simple plaintext encoding:\n  // Hex keys separated by newlines\n  const keysTxt = [\n    keys.encryptionPublicKey,\n    keys.encryptionPrivateKey,\n    keys.signaturePublicKey,\n    keys.signaturePrivateKey,\n  ].join('\\n');\n  const keysMsg = new TextEncoder().encode(keysTxt);\n  const ciphertext = encrypt(keysMsg, secretKey);\n  return { ciphertext, nonce: bytesToHex(nonce) };\n};\n\nexport const decryptIdentity = async (\n  signer: Signer,\n  accountAddress: string,\n  ciphertext: string,\n  nonce: string,\n): Promise<IdentityKeys> => {\n  const message = signatureMessage(hexToBytes(nonce));\n  const signature = (await signer.signMessage(message)) as Hex;\n\n  // Check that the signature is valid\n  const valid = await verifyMessage({\n    address: accountAddress as Hex,\n    message,\n    signature,\n  });\n  if (!valid) {\n    throw new Error('Invalid signature');\n  }\n  const secretKey = hexToBytes(signature);\n  let keysMsg: Uint8Array;\n  try {\n    keysMsg = await decrypt(ciphertext, secretKey);\n  } catch (e) {\n    // See https://github.com/xmtp/xmtp-js/blob/8d6e5a65813902926baac8150a648587acbaad92/sdks/js-sdk/src/keystore/providers/NetworkKeyManager.ts#L142-L146\n    if (secretKey.length !== 65) {\n      throw new Error('Expected 65 bytes before trying a different recovery byte');\n    }\n    // Try the other version of recovery byte, either +27 or -27\n    const lastByte = secretKey[secretKey.length - 1];\n    let newSecret = secretKey.slice(0, secretKey.length - 1);\n    if (lastByte < 27) {\n      newSecret = new Uint8Array([...newSecret, lastByte + 27]);\n    } else {\n      newSecret = new Uint8Array([...newSecret, lastByte - 27]);\n    }\n    keysMsg = await decrypt(ciphertext, newSecret);\n  }\n  const keysTxt = new TextDecoder().decode(keysMsg);\n  const [encryptionPublicKey, encryptionPrivateKey, signaturePublicKey, signaturePrivateKey] = keysTxt.split('\\n');\n  return { encryptionPublicKey, encryptionPrivateKey, signaturePublicKey, signaturePrivateKey };\n};\n", "import { store } from './../store.js';\nimport { wipeIdentity } from './auth-storage.js';\nimport type { Storage } from './types.js';\n\nexport function logout(storage: Storage) {\n  wipeIdentity(storage);\n  store.send({ type: 'resetAuth' });\n}\n", "import { Schema } from 'effect';\n\nexport type Storage = {\n  getItem: (key: string) => string | null;\n  setItem: (key: string, value: string) => void;\n  removeItem: (key: string) => void;\n};\n\nexport type SignMessage = (message: string) => Promise<string> | string;\nexport type GetAddress = () => Promise<string> | string;\nexport type Signer = {\n  getAddress: GetAddress;\n  signMessage: SignMessage;\n};\n\nexport type IdentityKeys = {\n  encryptionPublicKey: string;\n  encryptionPrivateKey: string;\n  signaturePublicKey: string;\n  signaturePrivateKey: string;\n};\n\nexport const KeysSchema = Schema.Struct({\n  encryptionPublicKey: Schema.String,\n  encryptionPrivateKey: Schema.String,\n  signaturePublicKey: Schema.String,\n  signaturePrivateKey: Schema.String,\n});\n\nexport type KeysSchema = Schema.Schema.Type<typeof KeysSchema>;\n\nexport type Identity = IdentityKeys & {\n  accountAddress: string;\n};\n\nexport type PublicIdentity = {\n  accountAddress: string;\n  encryptionPublicKey: string;\n  signaturePublicKey: string;\n};\n\nexport class InvalidIdentityError {\n  readonly _tag = 'InvalidIdentityError';\n}\n", "export * from './create-inbox.js';\nexport * from './get-list-inboxes.js';\nexport * from './message-encryption.js';\nexport * from './message-validation.js';\nexport * from './prepare-message.js';\nexport * from './recover-inbox-creator.js';\nexport * from './recover-inbox-message-signer.js';\nexport * from './send-message.js';\nexport * from './merge-messages.js';\nexport * from './types.js';\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { cryptoBoxKeyPair } from '@serenity-kit/noble-sodium';\nimport { Effect } from 'effect';\nimport * as Messages from '../messages/index.js';\nimport * as SpaceEvents from '../space-events/index.js';\nimport { bytesToHex, canonicalize, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport type * as Inboxes from './types.js';\n\ntype CreateAccountInboxParams = {\n  accountAddress: string;\n  isPublic: boolean;\n  authPolicy: Inboxes.InboxSenderAuthPolicy;\n  encryptionPublicKey: string;\n  signaturePrivateKey: string;\n\n  // TODO: add optional schema\n};\n\ntype CreateSpaceInboxParams = {\n  author: SpaceEvents.Author;\n  spaceId: string;\n  isPublic: boolean;\n  authPolicy: Inboxes.InboxSenderAuthPolicy;\n  spaceSecretKey: string;\n  previousEventHash: string;\n};\n\n// The caller should have already verified that the accountAddress, signaturePrivateKey and encryptionPublicKey belong to the same account\nexport function createAccountInboxCreationMessage({\n  accountAddress,\n  isPublic,\n  authPolicy,\n  encryptionPublicKey,\n  signaturePrivateKey,\n}: CreateAccountInboxParams): Messages.RequestCreateAccountInbox {\n  // Generate a 32 byte random inbox id\n  const inboxId = bytesToHex(randomBytes(32));\n\n  // This message can prove to anyone wanting to send a message to the inbox that it is indeed from the account\n  // and that the public key belongs to the account\n  const messageToSign = stringToUint8Array(\n    canonicalize({\n      accountAddress,\n      inboxId,\n      encryptionPublicKey,\n    }),\n  );\n\n  const signature = secp256k1.sign(messageToSign, hexToBytes(signaturePrivateKey), { prehash: true });\n\n  return {\n    type: 'create-account-inbox',\n    inboxId: inboxId,\n    accountAddress,\n    isPublic,\n    authPolicy,\n    encryptionPublicKey,\n    signature: {\n      hex: signature.toCompactHex(),\n      recovery: signature.recovery,\n    },\n  } satisfies Messages.RequestCreateAccountInbox;\n}\n\nexport async function createSpaceInboxCreationMessage({\n  author,\n  spaceId,\n  isPublic,\n  authPolicy,\n  spaceSecretKey,\n  previousEventHash,\n}: CreateSpaceInboxParams): Promise<Messages.RequestCreateSpaceInboxEvent> {\n  // Same as createAccountInboxMessage but with spaceId instead of accountAddress, and generating a keypair for the inbox\n  const inboxId = bytesToHex(randomBytes(32));\n  const { publicKey, privateKey } = cryptoBoxKeyPair();\n\n  // encrypt the inbox secret key with the space secret key\n  const encryptedInboxSecretKey = Messages.encryptMessage({\n    message: privateKey,\n    secretKey: hexToBytes(spaceSecretKey),\n  });\n\n  const spaceEvent = await Effect.runPromise(\n    SpaceEvents.createInbox({\n      spaceId,\n      inboxId,\n      encryptionPublicKey: bytesToHex(publicKey),\n      secretKey: bytesToHex(encryptedInboxSecretKey),\n      isPublic,\n      authPolicy,\n      author,\n      previousEventHash,\n    }),\n  );\n\n  return {\n    type: 'create-space-inbox-event',\n    spaceId,\n    event: spaceEvent,\n  } satisfies Messages.RequestCreateSpaceInboxEvent;\n}\n", "import { Schema } from 'effect';\nimport * as Messages from '../messages/index.js';\n\nexport const listPublicSpaceInboxes = async ({\n  spaceId,\n  syncServerUri,\n}: Readonly<{ spaceId: string; syncServerUri: string }>): Promise<readonly Messages.SpaceInboxPublic[]> => {\n  const res = await fetch(new URL(`/spaces/${spaceId}/inboxes`, syncServerUri), {\n    method: 'GET',\n  });\n  const decoded = Schema.decodeUnknownSync(Messages.ResponseListSpaceInboxesPublic)(await res.json());\n  return decoded.inboxes;\n};\n\nexport const listPublicAccountInboxes = async ({\n  accountAddress,\n  syncServerUri,\n}: Readonly<{ accountAddress: string; syncServerUri: string }>): Promise<readonly Messages.AccountInboxPublic[]> => {\n  const res = await fetch(new URL(`/accounts/${accountAddress}/inboxes`, syncServerUri), {\n    method: 'GET',\n  });\n  const decoded = Schema.decodeUnknownSync(Messages.ResponseListAccountInboxesPublic)(await res.json());\n  return decoded.inboxes;\n};\n\nexport const getSpaceInbox = async ({\n  spaceId,\n  inboxId,\n  syncServerUri,\n}: Readonly<{ spaceId: string; inboxId: string; syncServerUri: string }>): Promise<Messages.SpaceInboxPublic> => {\n  const res = await fetch(new URL(`/spaces/${spaceId}/inboxes/${inboxId}`, syncServerUri), {\n    method: 'GET',\n  });\n  const decoded = Schema.decodeUnknownSync(Messages.ResponseSpaceInboxPublic)(await res.json());\n  return decoded.inbox;\n};\n\nexport const getAccountInbox = async ({\n  accountAddress,\n  inboxId,\n  syncServerUri,\n}: Readonly<{\n  accountAddress: string;\n  inboxId: string;\n  syncServerUri: string;\n}>): Promise<Messages.AccountInboxPublic> => {\n  const res = await fetch(new URL(`/accounts/${accountAddress}/inboxes/${inboxId}`, syncServerUri), {\n    method: 'GET',\n  });\n  const decoded = Schema.decodeUnknownSync(Messages.ResponseAccountInboxPublic)(await res.json());\n  return decoded.inbox;\n};\n", "import { cryptoBoxSeal, cryptoBoxSealOpen } from '@serenity-kit/noble-sodium';\nimport { bytesToHex, hexToBytes, stringToUint8Array, uint8ArrayToString } from '../utils/index.js';\n\ntype EncryptParams = {\n  message: string;\n  encryptionPublicKey: string;\n};\n\ntype DecryptParams = {\n  ciphertext: string;\n  encryptionPrivateKey: string;\n  encryptionPublicKey: string;\n};\n\nexport function encryptInboxMessage({ message, encryptionPublicKey }: EncryptParams): {\n  ciphertext: string;\n} {\n  const ciphertext = cryptoBoxSeal({\n    message: stringToUint8Array(message),\n    publicKey: hexToBytes(encryptionPublicKey),\n  });\n\n  return { ciphertext: bytesToHex(ciphertext) };\n}\n\nexport function decryptInboxMessage({ ciphertext, encryptionPrivateKey, encryptionPublicKey }: DecryptParams): string {\n  const publicKey = hexToBytes(encryptionPublicKey);\n  const privateKey = hexToBytes(encryptionPrivateKey);\n  const message = cryptoBoxSealOpen({\n    ciphertext: hexToBytes(ciphertext),\n    privateKey,\n    publicKey,\n  });\n  return uint8ArrayToString(message);\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type * as Messages from '../messages/index.js';\nimport * as Utils from '../utils/index.js';\n\nexport const recoverSpaceInboxMessageSigner = (\n  message: Messages.RequestCreateSpaceInboxMessage,\n  spaceId: string,\n  inboxId: string,\n) => {\n  if (!message.signature) {\n    throw new Error('Signature is required');\n  }\n  let signatureInstance = secp256k1.Signature.fromCompact(message.signature.hex);\n  signatureInstance = signatureInstance.addRecoveryBit(message.signature.recovery);\n  const signedMessage = {\n    spaceId,\n    inboxId,\n    ciphertext: message.ciphertext,\n    authorAccountAddress: message.authorAccountAddress,\n  };\n  return `0x${signatureInstance.recoverPublicKey(sha256(Utils.stringToUint8Array(Utils.canonicalize(signedMessage)))).toHex()}`;\n};\n\nexport const recoverAccountInboxMessageSigner = (\n  message: Messages.RequestCreateAccountInboxMessage,\n  accountAddress: string,\n  inboxId: string,\n) => {\n  if (!message.signature) {\n    throw new Error('Signature is required');\n  }\n  let signatureInstance = secp256k1.Signature.fromCompact(message.signature.hex);\n  signatureInstance = signatureInstance.addRecoveryBit(message.signature.recovery);\n  const signedMessage = {\n    accountAddress,\n    inboxId,\n    ciphertext: message.ciphertext,\n    authorAccountAddress: message.authorAccountAddress,\n  };\n  return `0x${signatureInstance.recoverPublicKey(sha256(Utils.stringToUint8Array(Utils.canonicalize(signedMessage)))).toHex()}`;\n};\n", "import type { Chain } from 'viem';\nimport * as Identity from '../identity/index.js';\nimport type * as Messages from '../messages/index.js';\nimport type { AccountInboxStorageEntry, SpaceInboxStorageEntry } from '../store.js';\nimport { recoverAccountInboxMessageSigner, recoverSpaceInboxMessageSigner } from './recover-inbox-message-signer.js';\n\nexport const validateSpaceInboxMessage = async (\n  message: Messages.InboxMessage,\n  inbox: SpaceInboxStorageEntry,\n  spaceId: string,\n  syncServerUri: string,\n  chain: Chain,\n  rpcUrl: string,\n) => {\n  if (message.signature) {\n    if (inbox.authPolicy === 'anonymous') {\n      console.error('Signed message in anonymous inbox');\n      return false;\n    }\n    if (!message.authorAccountAddress) {\n      console.error('Signed message without authorAccountAddress');\n      return false;\n    }\n    const signer = recoverSpaceInboxMessageSigner(message, spaceId, inbox.inboxId);\n    const verifiedIdentity = await Identity.getVerifiedIdentity(\n      message.authorAccountAddress,\n      syncServerUri,\n      chain,\n      rpcUrl,\n    );\n    const isValid = signer === verifiedIdentity.signaturePublicKey;\n    if (!isValid) {\n      console.error('Invalid signature', signer, verifiedIdentity.signaturePublicKey);\n    }\n    return isValid;\n  }\n  // Unsigned message is valid if the inbox is anonymous or optional auth\n  const isValid = inbox.authPolicy !== 'requires_auth';\n  if (!isValid) {\n    console.error('Unsigned message in required auth inbox');\n  }\n  return isValid;\n};\n\nexport const validateAccountInboxMessage = async (\n  message: Messages.InboxMessage,\n  inbox: AccountInboxStorageEntry,\n  accountAddress: string,\n  syncServerUri: string,\n  chain: Chain,\n  rpcUrl: string,\n) => {\n  if (message.signature) {\n    if (inbox.authPolicy === 'anonymous') {\n      console.error('Signed message in anonymous inbox');\n      return false;\n    }\n    if (!message.authorAccountAddress) {\n      console.error('Signed message without authorAccountAddress');\n      return false;\n    }\n    const signer = recoverAccountInboxMessageSigner(message, accountAddress, inbox.inboxId);\n    const verifiedIdentity = await Identity.getVerifiedIdentity(\n      message.authorAccountAddress,\n      syncServerUri,\n      chain,\n      rpcUrl,\n    );\n    const isValid = signer === verifiedIdentity.signaturePublicKey;\n    if (!isValid) {\n      console.error('Invalid signature', signer, verifiedIdentity.signaturePublicKey);\n    }\n    return isValid;\n  }\n  // Unsigned message is valid if the inbox is anonymous or optional auth\n  const isValid = inbox.authPolicy !== 'requires_auth';\n  if (!isValid) {\n    console.error('Unsigned message in required auth inbox');\n  }\n  return isValid;\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport type * as Messages from '../messages/index.js';\nimport type { SignatureWithRecovery } from '../types.js';\nimport { canonicalize, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport { encryptInboxMessage } from './message-encryption.js';\n\nexport async function prepareSpaceInboxMessage({\n  message,\n  spaceId,\n  inboxId,\n  encryptionPublicKey,\n  signaturePrivateKey,\n  authorAccountAddress,\n}: Readonly<{\n  message: string;\n  spaceId: string;\n  inboxId: string;\n  encryptionPublicKey: string;\n  signaturePrivateKey: string | null;\n  authorAccountAddress: string | null;\n}>) {\n  const { ciphertext } = encryptInboxMessage({ message, encryptionPublicKey });\n  let signature: SignatureWithRecovery | undefined;\n  if (signaturePrivateKey && authorAccountAddress) {\n    const messageToSign = stringToUint8Array(\n      canonicalize({\n        spaceId,\n        inboxId,\n        ciphertext,\n        authorAccountAddress,\n      }),\n    );\n    const signatureInstance = secp256k1.sign(messageToSign, hexToBytes(signaturePrivateKey), { prehash: true });\n    signature = {\n      hex: signatureInstance.toCompactHex(),\n      recovery: signatureInstance.recovery,\n    };\n  }\n  const messageToSend: Messages.RequestCreateSpaceInboxMessage = {\n    ciphertext,\n    signature,\n    authorAccountAddress: authorAccountAddress ?? undefined,\n  };\n  return messageToSend;\n}\n\nexport async function prepareAccountInboxMessage({\n  message,\n  accountAddress,\n  inboxId,\n  encryptionPublicKey,\n  signaturePrivateKey,\n  authorAccountAddress,\n}: Readonly<{\n  message: string;\n  accountAddress: string;\n  inboxId: string;\n  encryptionPublicKey: string;\n  signaturePrivateKey: string | null;\n  authorAccountAddress: string | null;\n}>) {\n  const { ciphertext } = encryptInboxMessage({ message, encryptionPublicKey });\n  let signature: SignatureWithRecovery | undefined;\n  if (signaturePrivateKey && authorAccountAddress) {\n    const messageToSign = stringToUint8Array(\n      canonicalize({\n        accountAddress,\n        inboxId,\n        ciphertext,\n        authorAccountAddress,\n      }),\n    );\n    const signatureInstance = secp256k1.sign(messageToSign, hexToBytes(signaturePrivateKey), { prehash: true });\n    signature = {\n      hex: signatureInstance.toCompactHex(),\n      recovery: signatureInstance.recovery,\n    };\n  }\n  const messageToSend: Messages.RequestCreateAccountInboxMessage = {\n    ciphertext,\n    signature,\n    authorAccountAddress: authorAccountAddress ?? undefined,\n  };\n  return messageToSend;\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type { AccountInbox } from '../messages/index.js';\nimport type { CreateSpaceInboxEvent } from '../space-events/index.js';\nimport { canonicalize, stringToUint8Array } from '../utils/index.js';\n\nexport const recoverAccountInboxCreatorKey = (inbox: AccountInbox): string => {\n  const messageToVerify = stringToUint8Array(\n    canonicalize({\n      accountAddress: inbox.accountAddress,\n      inboxId: inbox.inboxId,\n      encryptionPublicKey: inbox.encryptionPublicKey,\n    }),\n  );\n  const signature = inbox.signature;\n  let signatureInstance = secp256k1.Signature.fromCompact(signature.hex);\n  signatureInstance = signatureInstance.addRecoveryBit(signature.recovery);\n  const authorPublicKey = `0x${signatureInstance.recoverPublicKey(sha256(messageToVerify)).toHex()}`;\n  return authorPublicKey;\n};\n\nexport const recoverSpaceInboxCreatorKey = (event: CreateSpaceInboxEvent): string => {\n  const messageToVerify = stringToUint8Array(canonicalize(event.transaction));\n  const signature = event.author.signature;\n  let signatureInstance = secp256k1.Signature.fromCompact(signature.hex);\n  signatureInstance = signatureInstance.addRecoveryBit(signature.recovery);\n  const authorPublicKey = `0x${signatureInstance.recoverPublicKey(sha256(messageToVerify)).toHex()}`;\n  return authorPublicKey;\n};\n", "import { prepareAccountInboxMessage, prepareSpaceInboxMessage } from './prepare-message.js';\n\nexport async function sendSpaceInboxMessage({\n  message,\n  spaceId,\n  inboxId,\n  encryptionPublicKey,\n  signaturePrivateKey,\n  authorAccountAddress,\n  syncServerUri,\n}: Readonly<{\n  message: string;\n  spaceId: string;\n  inboxId: string;\n  encryptionPublicKey: string;\n  signaturePrivateKey: string | null;\n  authorAccountAddress: string | null;\n  syncServerUri: string;\n}>) {\n  const messageToSend = await prepareSpaceInboxMessage({\n    message,\n    spaceId,\n    inboxId,\n    encryptionPublicKey,\n    signaturePrivateKey,\n    authorAccountAddress,\n  });\n  const res = await fetch(new URL(`/spaces/${spaceId}/inboxes/${inboxId}/messages`, syncServerUri), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(messageToSend),\n  });\n  if (!res.ok) {\n    throw new Error('Failed to send message');\n  }\n}\n\nexport async function sendAccountInboxMessage({\n  message,\n  accountAddress,\n  inboxId,\n  encryptionPublicKey,\n  signaturePrivateKey,\n  authorAccountAddress,\n  syncServerUri,\n}: Readonly<{\n  message: string;\n  accountAddress: string;\n  inboxId: string;\n  encryptionPublicKey: string;\n  signaturePrivateKey: string | null;\n  authorAccountAddress: string | null;\n  syncServerUri: string;\n}>) {\n  const messageToSend = await prepareAccountInboxMessage({\n    message,\n    accountAddress,\n    inboxId,\n    encryptionPublicKey,\n    signaturePrivateKey,\n    authorAccountAddress,\n  });\n  const res = await fetch(new URL(`/accounts/${accountAddress}/inboxes/${inboxId}/messages`, syncServerUri), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(messageToSend),\n  });\n  if (!res.ok) {\n    throw new Error('Failed to send message');\n  }\n}\n", "export * from './decrypt-space-info.js';\nexport * from './encrypt-and-sign-space-info.js';\nexport * from './types.js';\n", "import * as Schema from 'effect/Schema';\n\nexport const SpaceInfoContent = Schema.Struct({\n  name: Schema.String,\n});\n\nexport type SpaceInfoContent = Schema.Schema.Type<typeof SpaceInfoContent>;\n", "import { bytesToUtf8 } from '@noble/hashes/utils';\nimport * as Schema from 'effect/Schema';\nimport { decryptMessage } from '../messages/index.js';\nimport { hexToBytes } from '../utils/index.js';\nimport { SpaceInfoContent } from './types.js';\n\nconst decodeSpaceInfoContent = Schema.decodeSync(SpaceInfoContent);\n\nexport const decryptSpaceInfo = ({\n  spaceInfo,\n  secretKey,\n}: {\n  spaceInfo: Uint8Array;\n  secretKey: string;\n}) => {\n  const decrypted = decryptMessage({\n    nonceAndCiphertext: spaceInfo,\n    secretKey: hexToBytes(secretKey),\n  });\n  const spaceInfoContent = decodeSpaceInfoContent(JSON.parse(bytesToUtf8(decrypted)));\n  return spaceInfoContent;\n};\n", "import { secp256k1 } from '@noble/curves/secp256k1';\nimport { utf8ToBytes } from '@noble/hashes/utils';\nimport * as Schema from 'effect/Schema';\nimport { encryptMessage } from '../messages/encrypt-message.js';\nimport { canonicalize, hexToBytes, stringToUint8Array } from '../utils/index.js';\nimport { SpaceInfoContent } from './types.js';\n\ninterface EncryptAndSignInfoParams {\n  accountAddress: string;\n  name: string;\n  secretKey: string;\n  signaturePrivateKey: string;\n  spaceId: string;\n}\n\nconst encodeSpaceInfoContent = Schema.encodeSync(SpaceInfoContent);\n\nexport const encryptAndSignSpaceInfo = ({\n  accountAddress,\n  name,\n  secretKey,\n  signaturePrivateKey,\n  spaceId,\n}: EncryptAndSignInfoParams) => {\n  const infoContent = encryptMessage({\n    message: utf8ToBytes(JSON.stringify(encodeSpaceInfoContent({ name: name }))),\n    secretKey: hexToBytes(secretKey),\n  });\n\n  const messageToSign = stringToUint8Array(\n    canonicalize({\n      accountAddress,\n      infoContent,\n      spaceId,\n    }),\n  );\n\n  const recoverySignature = secp256k1.sign(messageToSign, hexToBytes(signaturePrivateKey), { prehash: true });\n\n  const signature = {\n    hex: recoverySignature.toCompactHex(),\n    recovery: recoverySignature.recovery,\n  };\n\n  return {\n    infoContent,\n    accountAddress,\n    signature,\n  };\n};\n", "import * as Schema from 'effect/Schema';\nimport { Field } from '../entity/entity.js';\nimport type { AnyNoContext, EntityWithRelation } from '../entity/types.js';\n\nexport const Text = Schema.String;\n// biome-ignore lint/suspicious/noShadowRestrictedNames: is part of a namespaces module and therefor ok\nexport const Number = Schema.Number;\nexport const Checkbox = Schema.Boolean;\n// biome-ignore lint/suspicious/noShadowRestrictedNames: is part of a namespaces module and therefor ok\nexport const Date = Schema.Date;\nexport const Url = Schema.URL;\nexport const Point = Schema.transform(Schema.String, Schema.Array(Number), {\n  strict: true,\n  decode: (str: string) => {\n    return str.split(',').map((n: string) => globalThis.Number(n));\n  },\n  encode: (points: readonly number[]) => points.join(','),\n});\n\nexport const Relation = <S extends AnyNoContext>(schema: S) => {\n  const relationSchema = Field({\n    select: Schema.Array(schema) as unknown as Schema.Schema<ReadonlyArray<EntityWithRelation<S>>>,\n    insert: Schema.optional(Schema.Array(Schema.String)),\n    update: Schema.Undefined,\n  });\n  return relationSchema;\n};\n"],
  "mappings": "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;IAEhB;IACAkE,WAAY7D,aAAW;AACrB,aAAO;QACL,GAAGA;QACHR,eAAe;QACfC,gBAAgB;QAChBC,cAAc;QACdC,MAAM;;IAEV;IACAmE,SAASA,CAAC9D,SAASG,UAAyB;AAC1C,aAAO;QACL,GAAGH;QACHV,MAAMa,MAAMb;;IAEhB;;CAEH;;;AG1bM,IAAM,UAAU;EACrB,2BAA2B;EAC3B,0CAA0C;EAC1C,gCAAgC;EAChC,qBAAqB;EACrB,sBAAsB;EACtB,gCAAgC;;AAM3B,IAAM,UAAU;EACrB,2BAA2B;EAC3B,0CAA0C;EAC1C,gCAAgC;EAChC,qBAAqB;EACrB,sBAAsB;EACtB,gCAAgC;;;;ACzB3B,IAAM,aAAa,CAAC,EACzB,SACA,UACA,MACA,mBAAmB,CAAA,EAAE,MAMT;AACZ,SAAO;IACL;IACA;IACA;IACA;;AAEJ;;;AClBO,IAAM,sBAAsB;AAC5B,IAAM,iCACX;AACK,IAAM,iCACX;AACK,IAAM,uBACX;AACK,IAAM,iCACX;AACK,IAAM,4BACX;AACK,IAAM,yBACX;AACK,IAAM,sCACX;AACK,IAAM,+CAAoD;AAC1D,IAAM,4BACX;AACK,IAAM,cACX;AACK,IAAM,iCACX;AACK,IAAM,2BACX;AACK,IAAM,4BACX;AACK,IAAM,mBACX;AACK,IAAM,wBACX;AACK,IAAM,oCACX;AACK,IAAM,uCACX;AACK,IAAM,yBACX;AACK,IAAM,gDACX;AACK,IAAM,0BACX;AACK,IAAM,iCACX;AACK,IAAM,4BACX;AACK,IAAM,sBACX;AACK,IAAM,kCACX;AACK,IAAM,mCACX;AACK,IAAM,6BACX;AACK,IAAM,6BACX;AACK,IAAM,6BACX;AAEK,IAAM,oBAAoB;EAC/B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAGK,IAAI,mBAAmB;EAC5B,GAAG;;;;ACxFL,IAAM,QAAQ;;;;;;;;AASP,IAAM,sBAAsB,OAAO,EACxC,SAC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",
  "names": ["window", "LibZip", "hexToBytes", "bytesToHex", "i", "r", "s", "SpaceInbox", "pad", "decryptMessage", "nonceAndCiphertext", "secretKey", "nonce", "subarray", "ciphertext", "cipher", "xchacha20poly1305", "decrypt", "randomBytes", "gcm", "encryptMessage", "message", "secretKey", "nonce", "randomBytes", "cipher", "xchacha20poly1305", "ciphertext", "encrypt", "Uint8Array", "serialize", "obj", "JSON", "stringify", "_key", "value", "Uint8Array", "__type", "data", "Array", "from", "Date", "toISOString", "deserialize", "json", "parse", "bytesToHex", "hexToBytes", "publicKeyToAddress", "assertExhaustive", "_value", "message", "Error", "ALPHABET", "esm_default", "esm_default", "esm_default", "idToAutomergeId", "uuid", "payload", "parseUuid", "bs58check", "encode", "automergeIdToId", "base58CheckUuid", "versionedPayload", "decode", "stringifyUuid", "BASE58_ALLOWED_CHARS", "encodeBase58", "val", "hex", "BigInt", "remainder", "result", "mod", "base58CharAtMod", "BASE58_ALLOWED_CHARS", "Number", "push", "reverse", "join", "decodeBase58ToUUID", "encoded", "decoded", "char", "index", "indexOf", "Error", "hexStr", "toString", "padStart", "slice", "generateId", "uuidv4", "abytes", "pad", "bytesToHex", "hexToBytes", "concatBytes", "abytes", "pad", "abytes", "wNAF", "concatBytes", "bytesToHex", "bytesToHex", "hexToBytes", "wNAF", "isEven", "bytesToHex", "bytes", "nobleBytesToHex", "hexToBytes", "hex", "nobleHexToBytes", "slice", "decompressPublicKey", "compressedKey", "point", "ProjectivePoint", "fromHex", "uncompressedKey", "toRawBytes", "publicKeyToAddress", "publicKey", "viemPublicKeyToAddress", "isRelationField", "field", "ast", "_tag", "NaNNotAllowedError", "Error", "constructor", "InfinityNotAllowedError", "canonicalize", "object", "Number", "isNaN", "isFinite", "JSON", "stringify", "toJSON", "Function", "Array", "isArray", "values", "reduce", "t", "cv", "undefined", "comma", "length", "Object", "keys", "sort", "encoder", "TextEncoder", "decoder", "TextDecoder", "stringToUint8Array", "str", "encode", "uint8ArrayToString", "uint8Array", "decode", "signedUpdateMessage", "accountAddress", "updateId", "spaceId", "message", "secretKey", "signaturePrivateKey", "update", "encryptMessage", "hexToBytes", "messageToSign", "stringToUint8Array", "canonicalize", "recoverySignature", "secp256k1", "sign", "prehash", "signature", "hex", "toCompactHex", "recovery", "type", "recoverUpdateMessageSigner", "recoveredSignature", "Signature", "fromCompact", "addRecoveryBit", "signedMessage", "signedMessageHash", "sha256", "bytesToHex", "recoverPublicKey", "toRawBytes", "InboxSenderAuthPolicy", "Union", "Literal", "acceptInvitation", "author", "previousEventHash", "transaction", "id", "generateId", "type", "encodedTransaction", "stringToUint8Array", "canonicalize", "signatureResult", "secp256k1", "sign", "hexToBytes", "signaturePrivateKey", "prehash", "Effect", "succeed", "accountAddress", "signature", "hex", "toCompactHex", "recovery", "hashEvent", "event", "hash", "blake3", "canonicalize", "bytesToHex", "SignatureWithRecovery", "Struct", "hex", "String", "recovery", "Number", "ConnectAuthPayload", "expiry", "encryptionPublicKey", "appId", "ConnectCallbackResult", "appIdentityAddress", "appIdentityAddressPrivateKey", "accountAddress", "permissionId", "signaturePublicKey", "signaturePrivateKey", "encryptionPrivateKey", "sessionToken", "sessionTokenExpires", "Date", "privateSpaces", "Array", "id", "publicSpaces", "ConnectCallbackDecryptedData", "fields", "FailedToParseConnectAuthUrl", "TaggedError", "FailedToParseAuthCallbackUrl", "EventAuthor", "Struct", "accountAddress", "String", "signature", "SignatureWithRecovery", "SpaceMember", "role", "Union", "Literal", "SpaceInvitation", "inviteeAccountAddress", "SpaceInbox", "inboxId", "encryptionPublicKey", "isPublic", "Boolean", "authPolicy", "InboxSenderAuthPolicy", "secretKey", "SpaceState", "id", "invitations", "Record", "key", "value", "members", "removedMembers", "inboxes", "lastEventHash", "CreateSpaceEvent", "transaction", "type", "creatorAccountAddress", "author", "DeleteSpaceEvent", "previousEventHash", "CreateInvitationEvent", "CreateSpaceInboxEvent", "spaceId", "AcceptInvitationEvent", "SpaceEvent", "Author", "signaturePublicKey", "signaturePrivateKey", "VerifySignatureError", "_tag", "InvalidEventError", "decodeSpaceEvent", "Schema", "decodeUnknownEither", "SpaceEvent", "applyEvent", "state", "event", "rawEvent", "getVerifiedIdentity", "decodedEvent", "_tag", "left", "right", "transaction", "type", "undefined", "Effect", "fail", "InvalidEventError", "previousEventHash", "lastEventHash", "encodedTransaction", "stringToUint8Array", "canonicalize", "signatureInstance", "secp256k1", "Signature", "fromCompact", "author", "signature", "hex", "addRecoveryBit", "recovery", "authorPublicKey", "recoverPublicKey", "sha256", "toHex", "gen", "identity", "accountAddress", "signaturePublicKey", "VerifySignatureError", "id", "members", "removedMembers", "invitations", "inboxes", "creatorAccountAddress", "role", "result", "Object", "entries", "find", "invitation", "inviteeAccountAddress", "values", "inboxId", "encryptionPublicKey", "isPublic", "authPolicy", "secretKey", "hashEvent", "createInbox", "author", "spaceId", "inboxId", "encryptionPublicKey", "secretKey", "isPublic", "authPolicy", "previousEventHash", "transaction", "type", "id", "generateId", "signature", "secp256k1", "sign", "stringToUint8Array", "canonicalize", "hexToBytes", "signaturePrivateKey", "prehash", "spaceEvent", "accountAddress", "hex", "toCompactHex", "recovery", "Effect", "succeed", "createInvitation", "author", "previousEventHash", "invitee", "transaction", "id", "generateId", "type", "inviteeAccountAddress", "accountAddress", "encodedTransaction", "stringToUint8Array", "canonicalize", "signatureResult", "secp256k1", "sign", "hexToBytes", "signaturePrivateKey", "prehash", "Effect", "succeed", "signature", "hex", "toCompactHex", "recovery", "createSpace", "author", "spaceId", "transaction", "type", "id", "generateId", "creatorAccountAddress", "accountAddress", "encodedTransaction", "stringToUint8Array", "canonicalize", "signatureResult", "secp256k1", "sign", "hexToBytes", "signaturePrivateKey", "prehash", "event", "signature", "hex", "toCompactHex", "recovery", "Effect", "succeed", "deleteSpace", "author", "id", "previousEventHash", "transaction", "type", "encodedTransaction", "stringToUint8Array", "canonicalize", "signatureResult", "secp256k1", "sign", "hexToBytes", "signaturePrivateKey", "prehash", "event", "accountAddress", "signature", "hex", "toCompactHex", "recovery", "Effect", "succeed", "SignedUpdate", "Struct", "update", "Uint8Array", "accountAddress", "String", "signature", "SignatureWithRecovery", "updateId", "Updates", "updates", "Array", "firstUpdateClock", "Number", "lastUpdateClock", "KeyBox", "ciphertext", "nonce", "authorPublicKey", "KeyBoxWithKeyId", "fields", "id", "IdentityKeyBox", "signer", "RequestCreateSpaceEvent", "type", "Literal", "spaceId", "event", "CreateSpaceEvent", "keyBox", "name", "RequestConnectCreateSpaceEvent", "infoContent", "infoSignature", "RequestCreateInvitationEvent", "CreateInvitationEvent", "keyBoxes", "RequestConnectAddAppIdentityToSpaces", "appIdentityAddress", "spacesInput", "RequestAcceptInvitationEvent", "AcceptInvitationEvent", "RequestSubscribeToSpace", "lastKnownUpdateClock", "optional", "RequestListSpaces", "RequestListInvitations", "RequestCreateUpdate", "RequestCreateAccountInbox", "inboxId", "isPublic", "Boolean", "authPolicy", "InboxSenderAuthPolicy", "encryptionPublicKey", "RequestCreateSpaceInboxEvent", "CreateSpaceInboxEvent", "RequestGetLatestSpaceInboxMessages", "since", "Date", "RequestGetLatestAccountInboxMessages", "RequestGetAccountInboxes", "RequestMessage", "Union", "RequestLoginNonce", "RequestLogin", "message", "RequestLoginWithSigningKey", "publicKey", "RequestCreateIdentity", "accountProof", "keyProof", "signaturePublicKey", "RequestConnectCreateIdentity", "RequestConnectCreateAppIdentity", "appId", "address", "ResponseConnectCreateIdentity", "success", "RequestCreateSpaceInboxMessage", "authorAccountAddress", "RequestCreateAccountInboxMessage", "ResponseListSpaces", "spaces", "Invitation", "previousEventHash", "ResponseListInvitations", "invitations", "ResponseSpaceEvent", "SpaceEvent", "InboxMessage", "createdAt", "SpaceInbox", "secretKey", "AccountInbox", "ResponseAccountInbox", "inbox", "ResponseSpace", "events", "inboxes", "ResponseUpdateConfirmed", "clock", "ResponseUpdatesNotification", "ResponseSpaceInboxMessage", "ResponseSpaceInboxMessages", "messages", "ResponseAccountInboxMessage", "ResponseAccountInboxMessages", "ResponseAccountInboxes", "ResponseMessage", "ResponseIdentityEncrypted", "ResponseIdentity", "SpaceInboxPublic", "creationEvent", "ResponseSpaceInboxPublic", "ResponseListSpaceInboxesPublic", "AccountInboxPublic", "ResponseAccountInboxPublic", "ResponseListAccountInboxesPublic", "ResponseIdentityNotFoundError", "ResponseIdentityExistsError", "KeysSchema", "Schema", "Struct", "encryptionPublicKey", "String", "encryptionPrivateKey", "signaturePublicKey", "signaturePrivateKey", "AppIdentityResponse", "accountAddress", "accountProof", "keyProof", "ciphertext", "nonce", "sessionToken", "address", "appId", "sessionTokenExpires", "InvalidIdentityError", "_tag", "getEnv", "buildAccountAddressStorageKey", "buildKeysStorageKey", "walletAddress", "buildSessionTokenStorageKey", "loadKeys", "storage", "accessKey", "val", "getItem", "deserialized", "Schema", "decodeUnknownSync", "KeysSchema", "deserialize", "encryptionPublicKey", "encryptionPrivateKey", "signaturePublicKey", "signaturePrivateKey", "storeKeys", "keys", "keysMsg", "serialize", "encodeSync", "setItem", "wipeKeys", "removeItem", "loadSyncServerSessionToken", "address", "key", "token", "storeSyncServerSessionToken", "sessionToken", "wipeSyncServerSessionToken", "loadAccountAddress", "storeAccountAddress", "accountId", "wipeAccountAddress", "wipeAllAuthData", "addressStorage", "keysAndTokenStorage", "accountAddress", "Fp", "uvRatio", "Point", "C", "G", "abytes", "abool", "bytesToHex", "adjustScalarBytes", "L", "utils", "eddsa", "_0n", "_1n", "_2n", "P", "adjustScalarBytes", "C", "_0n", "_1n", "_2n", "_8n", "P", "P", "_8n", "_2n", "_1n", "P", "mod", "abytes", "equalBytes", "I", "_0n", "bytesToHex", "u32", "u32", "blake2b", "blake2b", "blake2b", "generateKeypair", "publicKey", "privateKey", "cryptoBoxKeyPair", "secretKey", "encryptKeyBox", "message", "nonce", "cryptoBoxEasy", "decryptKeyBox", "ciphertext", "cryptoBoxOpenEasy", "encryptKey", "privateKey", "publicKey", "key", "nonce", "randomBytes", "ciphertext", "encryptKeyBox", "message", "secretKey", "keyBoxCiphertext", "keyBoxNonce", "createKey", "privateKey", "publicKey", "key", "randomBytes", "keyBoxCiphertext", "keyBoxNonce", "encryptKey", "decryptKey", "privateKey", "publicKey", "keyBoxNonce", "keyBoxCiphertext", "key", "decryptKeyBox", "nonce", "ciphertext", "secretKey", "createIdentityKeys", "publicKey", "encryptionPublicKey", "secretKey", "encryptionPrivateKey", "generateKeypair", "signaturePrivateKey", "secp256k1", "utils", "randomPrivateKey", "signaturePublicKey", "getPublicKey", "bytesToHex", "createAppIdentity", "keys", "createIdentityKeys", "addressPrivateKey", "generatePrivateKey", "address", "privateKeyToAccount", "createAuthUrl", "params", "redirectUrl", "connectUrl", "expiryMilliseconds", "appId", "publicKey", "secretKey", "generateKeypair", "expiry", "Date", "now", "payload", "encryptionPublicKey", "bytesToHex", "data", "encodeURIComponent", "JSON", "stringify", "nonce", "randomBytes", "url", "URL", "searchParams", "set", "createCallbackParams", "nonce", "ephemeralPublicKey", "rest", "ciphertext", "cryptoBoxSeal", "message", "utf8ToBytes", "JSON", "stringify", "publicKey", "hexToBytes", "replace", "bytesToHex", "toBytes", "anumber", "clean", "hkdfDeriveKey", "secret", "salt", "hkdf", "sha256", "encrypt", "msg", "hkdfSalt", "randomBytes", "gcmNonce", "derivedKey", "aes", "gcm", "ciphertext", "ciphertextJson", "canonicalize", "aes256GcmHkdfSha256", "payload", "bytesToHex", "TextEncoder", "encode", "decrypt", "TextDecoder", "decode", "hexToBytes", "JSON", "parse", "signatureMessage", "nonce", "encryptIdentity", "signer", "keys", "message", "signature", "signMessage", "valid", "verifyMessage", "address", "getAddress", "Error", "secretKey", "keysTxt", "encryptionPublicKey", "encryptionPrivateKey", "signaturePublicKey", "signaturePrivateKey", "join", "keysMsg", "decryptIdentity", "e", "length", "lastByte", "newSecret", "slice", "Uint8Array", "split", "encryptAppIdentity", "appIdentityAddress", "appIdentityAddressPrivateKey", "permissionId", "decryptAppIdentity", "addressPrivateKey", "getAccountProofMessage", "accountAddress", "publicKey", "getKeyProofMessage", "accountProofDomain", "name", "version", "proveIdentityOwnership", "smartAccountClient", "keys", "account", "Error", "chain", "signaturePublicKey", "keyProofMessage", "accountProof", "signTypedData", "message", "types", "Message", "type", "domain", "primaryType", "console", "log", "privateKeyToAccount", "signaturePrivateKey", "keyProof", "signMessage", "verifyIdentityOwnership", "rpcUrl", "publicClient", "createPublicClient", "transport", "http", "accountProofMessage", "validAccountProof", "verifyTypedData", "address", "signature", "keyAddress", "publicKeyToAddress", "validKeyProof", "verifyMessage", "update", "link", "unlink", "propagate", "checkDirty", "endTracking", "startTracking", "shallowPropagate", "_b", "effect", "atom", "valueOrFn", "_b", "store", "_a", "effect", "mergeMessages", "existingMessages", "existingSeenIds", "newMessages", "messages", "seenMessageIds", "Set", "newFilteredMessages", "filter", "msg", "has", "id", "add", "length", "createdAt", "push", "sort", "a", "b", "initialStoreContext", "spaces", "updatesInFlight", "invitations", "repo", "identities", "authenticated", "accountAddress", "sessionToken", "keys", "lastUpdateClock", "accountInboxes", "store", "createStore", "context", "on", "setInvitations", "event", "reset", "addUpdateInFlight", "updateId", "removeUpdateInFlight", "filter", "id", "applyEvent", "map", "space", "spaceId", "events", "state", "updateConfirmed", "clock", "applyUpdate", "firstUpdateClock", "addVerifiedIdentity", "encryptionPublicKey", "signaturePublicKey", "accountProof", "keyProof", "setSpaceInbox", "existingInbox", "inboxes", "find", "inbox", "inboxId", "messages", "seenMessageIds", "mergeMessages", "setSpaceInboxMessages", "lastMessageClock", "Date", "Math", "max", "getTime", "toISOString", "setAccountInbox", "setAccountInboxMessages", "setSpace", "existingSpace", "s", "result", "findWithProgress", "idToAutomergeId", "handle", "doneLoading", "newSpace", "spaceState", "automergeDocHandle", "updates", "mergedInboxes", "newInbox", "existingInboxIndex", "findIndex", "push", "setAuth", "resetAuth", "setRepo", "getInstalledModules", "CallType", "getInstalledModules", "getInstalledModules", "accountAbi", "isModuleInstalled", "_isModuleInstalled", "accountAbi", "installModule", "_installModule", "installFallback", "isModuleInstalled", "accountAbi", "uninstallModule", "_uninstallModule", "_uninstallFallback", "isModuleInstalled", "accountAbi", "encode1271Signature", "encode1271Hash", "encodeModuleInstallationData", "encodeModuleUninstallationData", "encodeValidatorNonce", "getInstalledModules", "installModule", "isModuleInstalled", "uninstallModule", "encode1271Signature", "encode1271Hash", "encodeModuleInstallationData", "encodeModuleUninstallationData", "encodeValidatorNonce", "accountAbi", "getInstalledModules", "accountAbi", "isModuleInstalled", "_isModuleInstalled", "accountAbi", "installModule", "_installModule", "installFallback", "isModuleInstalled", "accountAbi", "uninstallModule", "_uninstallModule", "_uninstallFallback", "isModuleInstalled", "accountAbi", "encode1271Signature", "encode1271Hash", "encodeModuleInstallationData", "encodeModuleUninstallationData", "encodeValidatorNonce", "getInstalledModules", "installModule", "isModuleInstalled", "uninstallModule", "encode1271Signature", "encode1271Hash", "encodeModuleInstallationData", "encodeModuleUninstallationData", "encodeValidatorNonce", "accountAbi", "getInstalledModules", "accountAbi", "isModuleInstalled", "_isModuleInstalled", "accountAbi", "installModule", "_installModule", "isModuleInstalled", "accountAbi", "uninstallModule", "_uninstallModule", "isModuleInstalled", "getModuleCalldata", "accountAbi", "encode1271Signature", "encode1271Hash", "SafeHookType", "SafeCallType", "encodeModuleInstallationData", "encodeModuleUninstallationData", "encodeValidatorNonce", "getInstalledModules", "installModule", "isModuleInstalled", "uninstallModule", "encode1271Signature", "encode1271Hash", "encodeModuleInstallationData", "encodeModuleUninstallationData", "encodeValidatorNonce", "encodeValidatorNonce", "OWNABLE_VALIDATOR_ADDRESS", "HookType", "abi", "abi", "mode", "abi", "permissionId", "ParamCondition", "abi", "installModule", "isModuleInstalled", "abi", "uninstallModule", "installModule", "isModuleInstalled", "uninstallModule", "safeModuleManagerAbi", "inputs", "internalType", "name", "type", "outputs", "stateMutability", "safeOwnerManagerAbi", "smartSessionsAbi", "safe7579Abi", "daoFactoryAbi", "components", "DEFAULT_RPC_URL", "TESTNET_RPC_URL", "DEFAULT_API_KEY", "BUNDLER_TRANSPORT_URL_BASE", "SAFE_7579_MODULE_ADDRESS", "SAFE_4337_MODULE_ADDRESS", "ERC7579_LAUNCHPAD_ADDRESS", "SPACE_FACTORY_ADDRESS", "MAINNET", "DAO_FACTORY_ADDRESS", "TESTNET", "MODULE_TYPE_VALIDATOR", "PUBLIC_SPACE_FUNCTIONS", "PERSONAL_SPACE_FUNCTIONS", "GEOGENESIS", "id", "Number", "name", "nativeCurrency", "symbol", "decimals", "rpcUrls", "default", "http", "public", "GEO_TESTNET", "getLegacySmartAccountWalletClient", "owner", "address", "chain", "GEOGENESIS", "rpcUrl", "DEFAULT_RPC_URL", "apiKey", "DEFAULT_API_KEY", "transport", "http", "publicClient", "createPublicClient", "safeAccountParams", "client", "owners", "entryPoint", "entryPoint07Address", "version", "id", "GEO_TESTNET", "safeModuleSetupAddress", "safe4337ModuleAddress", "safeProxyFactoryAddress", "safeSingletonAddress", "multiSendAddress", "multiSendCallOnlyAddress", "safeAccount", "toSafeSmartAccount", "bundlerTransport", "BUNDLER_TRANSPORT_URL_BASE", "paymasterClient", "createPimlicoClient", "smartAccountClient", "createSmartAccountClient", "account", "paymaster", "userOperation", "estimateFeesPerGas", "getUserOperationGasPrice", "fast", "get7579SmartAccountWalletClient", "console", "log", "ownerAddress", "Error", "ownableValidator", "getOwnableValidator", "threshold", "smartSessionsValidator", "getSmartSessionsValidator", "SAFE_7579_MODULE_ADDRESS", "erc7579LaunchpadAddress", "ERC7579_LAUNCHPAD_ADDRESS", "attesters", "RHINESTONE_ATTESTER_ADDRESS", "attestersThreshold", "validators", "context", "initData", "extend", "erc7579Actions", "isSmartAccountDeployed", "isDeployed", "getSmartAccountWalletClient", "params", "legacyClient", "legacySmartAccountUpdateStatus", "isSmartSessionsValidatorInstalled", "readContract", "abi", "safe7579Abi", "functionName", "args", "MODULE_TYPE_VALIDATOR", "error", "ContractFunctionExecutionError", "details", "includes", "has7579Module", "hasSmartSessionsValidator", "hasOwnableValidator", "isOwnableValidatorInstalled", "smartAccountNeedsUpdate", "updateStatus", "updateLegacySmartAccount", "installValidatorsTx", "encodeInstallModule", "modules", "type", "calls", "push", "to", "data", "encodeFunctionData", "safeModuleManagerAbi", "value", "BigInt", "SAFE_4337_MODULE_ADDRESS", "length", "tx", "sendUserOperation", "receipt", "waitForUserOperationReceipt", "hash", "success", "getSpaceActions", "space", "actions", "PUBLIC_SPACE_FUNCTIONS", "actionTarget", "actionTargetSelector", "toFunctionSelector", "getAbiItem", "mainVotingAbi", "name", "actionPolicies", "getSudoPolicy", "PERSONAL_SPACE_FUNCTIONS", "personalSpaceAdminAbi", "addSmartAccountOwner", "newOwner", "isOwner", "safeOwnerManagerAbi", "createSmartSession", "accountAddress", "sessionPrivateKey", "allowCreateSpace", "spaces", "additionalActions", "sessionKeyAccount", "privateKeyToAccount", "bytesToHex", "randomBytes", "noOpActionPolicy", "getUniversalActionPolicy", "paramRules", "rules", "Array", "fill", "condition", "isLimited", "offset", "ref", "toHex", "toBytes", "size", "usage", "limit", "used", "valueLimitPerUse", "smartSessionsAbi", "spaceFactoryAddress", "SPACE_FACTORY_ADDRESS", "toString", "daoFactoryAbi", "session", "sessionValidator", "OWNABLE_VALIDATOR_ADDRESS", "sessionValidatorInitData", "encodeValidationData", "salt", "userOpPolicies", "erc7739Policies", "allowedERC7739Content", "erc1271Policies", "chainId", "permitERC4337Paymaster", "getAccount", "sessionDetails", "getEnableSessionDetails", "sessions", "clients", "enableSessionData", "enableSession", "permissionEnableSig", "signMessage", "message", "raw", "permissionEnableHash", "smartSessions", "nonce", "getAccountNonce", "entryPointAddress", "key", "encodeValidatorNonce", "validator", "signature", "getOwnableValidatorMockSignature", "prepareUserOperation", "encodeSmartSessionSignature", "userOpHashToSign", "getUserOperationHash", "entryPointVersion", "userOpHash", "getPermissionId", "getSmartSessionClient", "permissionId", "mode", "SmartSessionMode", "USE", "identityExists", "accountAddress", "syncServerUri", "res", "fetch", "URL", "method", "status", "signup", "signer", "walletClient", "smartAccountClient", "addressStorage", "keysStorage", "identityToken", "chain", "rpcUrl", "keys", "createIdentityKeys", "ciphertext", "nonce", "encryptIdentity", "localAccount", "privateKeyToAccount", "signaturePrivateKey", "addSmartAccountOwner", "address", "localSmartAccountClient", "getSmartAccountWalletClient", "owner", "accountProof", "keyProof", "proveIdentityOwnership", "req", "keyBox", "getAddress", "signaturePublicKey", "encryptionPublicKey", "headers", "body", "JSON", "stringify", "Error", "decoded", "decodeUnknownSync", "ResponseConnectCreateIdentity", "json", "success", "storeKeys", "storeAccountAddress", "restoreKeys", "ResponseIdentityEncrypted", "decryptIdentity", "getAndUpdateSmartAccount", "accountAddressFromStorage", "loadAccountAddress", "smartAccountParams", "smartAccountWalletClient", "account", "console", "log", "isSmartAccountDeployed", "smartAccountNeedsUpdate", "updateLegacySmartAccount", "login", "authData", "exists", "store", "send", "type", "sessionToken", "decodePayload", "decodeEither", "ConnectAuthPayload", "parseAuthParams", "params", "data", "redirect", "nonce", "fail", "FailedToParseConnectAuthUrl", "message", "length", "result", "isLeft", "succeed", "payload", "right", "error", "decodeDecryptedResult", "decodeEither", "ConnectCallbackDecryptedData", "parseCallbackParams", "ciphertext", "nonce", "storedNonce", "storedExpiry", "storedSecretKey", "storedPublicKey", "fail", "FailedToParseAuthCallbackUrl", "message", "publicKey", "hexToBytes", "decryptionResult", "cryptoBoxSealOpen", "privateKey", "decoded", "JSON", "parse", "bytesToUtf8", "isLeft", "data", "right", "expiry", "Date", "now", "succeed", "appIdentityAddress", "appIdentityAddressPrivateKey", "accountAddress", "permissionId", "signaturePublicKey", "signaturePrivateKey", "encryptionPublicKey", "encryptionPrivateKey", "sessionToken", "sessionTokenExpires", "privateSpaces", "publicSpaces", "error", "console", "Class", "Field", "hasValidTypesProperty", "value", "Array", "isArray", "getEntityRelations", "entityId", "type", "doc", "include", "relations", "fieldName", "field", "Object", "entries", "fields", "isRelationField", "relationEntities", "relationId", "relation", "typeName", "name", "fromTypeName", "fromPropertyName", "from", "__deleted", "relationEntity", "entities", "to", "hasValidTypesProperty", "push", "id", "_relation", "findOne", "handle", "type", "include", "decode", "decodeUnknownSync", "typeName", "name", "id", "doc", "entity", "entities", "relations", "getEntityRelations", "hasValidTypesProperty", "includes", "decoded", "__schema", "undefined", "create", "handle", "type", "typeName", "name", "encode", "encodeSync", "insert", "data", "entityId", "generateId", "encoded", "relations", "propertyName", "field", "Object", "entries", "fields", "isRelationField", "toEntityId", "relationId", "from", "to", "fromTypeName", "fromPropertyName", "__deleted", "change", "doc", "entities", "__version", "relation", "findOne", "delete$", "handle", "id", "result", "change", "doc", "_b", "entities", "undefined", "key", "relation", "Object", "entries", "relations", "from", "markAsDeleted", "handle", "id", "result", "change", "doc", "_b", "entities", "undefined", "__deleted", "key", "relation", "Object", "entries", "relations", "from", "TypeId", "Symbol", "for", "cacheSymbol", "isStruct", "u", "hasProperty", "FieldTypeId", "isField", "extract", "dual", "args", "self", "variant", "options", "cache", "cacheKey", "isDefault", "undefined", "fields", "key", "Object", "keys", "value", "isSchema", "schemas", "Struct", "make", "options", "Class", "identifier", "fields", "annotations", "_b", "idField", "Field", "select", "String", "deletedField", "Boolean", "versionField", "relationField", "optional", "Struct", "id", "extractFields", "__deleted", "__version", "_relation", "variantStruct", "schema", "extract", "defaultVariant", "isDefault", "Base", "Schema", "TypeId", "variant", "variants", "Object", "defineProperty", "value", "title", "FieldOnly", "keys", "obj", "key", "FieldExcept", "includes", "UnionVariants", "members", "Union", "fieldEvolve", "dual", "self", "f", "field", "isField", "fromEntries", "map", "evolve", "schemas", "fieldFromKey", "mapping", "entries", "undefined", "renameFieldValue", "extractVariants", "StructProto", "pipe", "pipeArguments", "arguments", "Struct", "fields", "self", "Object", "create", "TypeId", "FieldProto", "FieldTypeId", "Field", "schemas", "Union", "members", "variants", "VariantUnion", "filter", "member", "isSchema", "variant", "defineProperty", "value", "map", "extract", "renameFieldValue", "key", "isPropertySignature", "fromKey", "propertySignature", "Class", "Field", "make", "variants", "defaultVariant", "EntityNotFoundError", "TaggedError", "isPlainObject", "obj", "Array", "isArray", "deepMerge", "target", "source", "result", "key", "Object", "keys", "srcVal", "tgtVal", "decodedEntitiesCache", "Map", "entityRelationParentsMap", "Map", "documentChangeListener", "subscribedQueriesCount", "unsubscribe", "undefined", "subscribeToDocumentChanges", "handle", "onChange", "patches", "doc", "changedRelations", "Set", "deletedRelations", "changedEntities", "deletedEntities", "patch", "action", "path", "length", "add", "entityTypes", "touchedQueries", "touchedRelationParents", "entityId", "entity", "entities", "hasValidTypesProperty", "typeName", "cacheEntry", "decodedEntitiesCache", "get", "includeFromAllQueries", "query", "queries", "deepMerge", "include", "oldDecodedEntry", "relations", "getEntityRelations", "type", "decoded", "decoder", "id", "set", "error", "console", "deletedRelationIds", "value", "Object", "entries", "Array", "isArray", "relationEntity", "deletedRelationId", "deletedRelationEntry", "entityRelationParentsMap", "delete", "size", "relationParentEntry", "Map", "queryKey", "isInvalidated", "has", "decodedEntitiesCacheEntries", "entry", "affectedTypeName", "index", "data", "findIndex", "splice", "values", "listener", "listeners", "decodedEntitiesCacheEntry", "on", "off", "clear", "findMany", "filter", "decode", "decodeUnknownSync", "name", "corruptEntityIds", "filtered", "evaluateFilter", "fieldFilter", "fieldValue", "not", "orFilters", "or", "some", "orFilter", "is", "numberFilter", "greaterThan", "lessThan", "textFilter", "startsWith", "endsWith", "contains", "includes", "evaluateCrossFieldFilter", "crossFieldFilter", "fieldName", "evaluateEntityFilter", "entityFilter", "__schema", "push", "stableEmptyArray", "subscribeToFindMany", "canonicalize", "getEntities", "allTypes", "_key", "field", "fields", "isRelationField", "subscribe", "callback", "entitiesMap", "_b", "cachedListener", "forEach", "relationCacheEntries", "key", "relationCacheEntry", "counter", "removeRelation", "handle", "relationId", "result", "change", "doc", "relations", "undefined", "__deleted", "update", "handle", "type", "validate", "validateSync", "partial", "encode", "encodeSync", "decode", "decodeUnknownSync", "typeName", "name", "id", "data", "updated", "undefined", "change", "doc", "entities", "entity", "encoded", "__deleted", "__version", "key", "EntityNotFoundError", "__schema", "InvalidIdentityError", "KeysSchema", "decryptIdentity", "encryptIdentity", "storeIdentity", "storage", "identity", "setItem", "address", "addressPrivateKey", "accountAddress", "signaturePublicKey", "signaturePrivateKey", "encryptionPublicKey", "encryptionPrivateKey", "sessionToken", "sessionTokenExpires", "toISOString", "permissionId", "loadIdentity", "getItem", "Date", "wipeIdentity", "removeItem", "initialStoreContext", "spaces", "spacesLoadingIsPending", "updatesInFlight", "invitations", "repo", "identities", "authenticated", "identity", "lastUpdateClock", "accountInboxes", "mapping", "store", "createStore", "context", "on", "setInvitations", "event", "setMapping", "reset", "addUpdateInFlight", "updateId", "removeUpdateInFlight", "filter", "id", "setSpacesList", "storeContext", "space", "existingSpace", "find", "s", "result", "findWithProgress", "idToAutomergeId", "handle", "doneLoading", "map", "newSpace", "name", "events", "state", "keys", "automergeDocHandle", "inboxes", "undefined", "applyEvent", "spaceId", "updateConfirmed", "clock", "applyUpdate", "firstUpdateClock", "addVerifiedIdentity", "accountAddress", "encryptionPublicKey", "signaturePublicKey", "accountProof", "keyProof", "setSpaceInbox", "existingInbox", "inbox", "inboxId", "messages", "seenMessageIds", "mergeMessages", "setSpaceInboxMessages", "lastMessageClock", "Date", "Math", "max", "getTime", "toISOString", "setAccountInbox", "setAccountInboxMessages", "setSpace", "spaceState", "updates", "mergedInboxes", "newInbox", "existingInboxIndex", "findIndex", "push", "setAuth", "resetAuth", "setRepo", "getVerifiedIdentity", "accountAddress", "syncServerUri", "chain", "rpcUrl", "storeState", "store", "getSnapshot", "identity", "context", "identities", "encryptionPublicKey", "signaturePublicKey", "res", "fetch", "status", "Error", "resDecoded", "decodeUnknownSync", "ResponseIdentity", "json", "verifyIdentityOwnership", "accountProof", "keyProof", "send", "type", "hkdfDeriveKey", "secret", "salt", "hkdf", "sha256", "encrypt", "msg", "hkdfSalt", "randomBytes", "gcmNonce", "derivedKey", "aes", "gcm", "ciphertext", "ciphertextJson", "canonicalize", "aes256GcmHkdfSha256", "payload", "bytesToHex", "TextEncoder", "encode", "decrypt", "TextDecoder", "decode", "hexToBytes", "JSON", "parse", "signatureMessage", "nonce", "encryptIdentity", "signer", "accountAddress", "keys", "message", "signature", "signMessage", "valid", "verifyMessage", "address", "Error", "secretKey", "keysTxt", "encryptionPublicKey", "encryptionPrivateKey", "signaturePublicKey", "signaturePrivateKey", "join", "keysMsg", "decryptIdentity", "e", "length", "lastByte", "newSecret", "slice", "Uint8Array", "split", "logout", "storage", "wipeIdentity", "store", "send", "type", "KeysSchema", "Schema", "Struct", "encryptionPublicKey", "String", "encryptionPrivateKey", "signaturePublicKey", "signaturePrivateKey", "InvalidIdentityError", "_tag", "createAccountInboxCreationMessage", "accountAddress", "isPublic", "authPolicy", "encryptionPublicKey", "signaturePrivateKey", "inboxId", "bytesToHex", "randomBytes", "messageToSign", "stringToUint8Array", "canonicalize", "signature", "secp256k1", "sign", "hexToBytes", "prehash", "type", "hex", "toCompactHex", "recovery", "createSpaceInboxCreationMessage", "author", "spaceId", "spaceSecretKey", "previousEventHash", "publicKey", "privateKey", "cryptoBoxKeyPair", "encryptedInboxSecretKey", "encryptMessage", "message", "secretKey", "spaceEvent", "Effect", "runPromise", "createInbox", "event", "listPublicSpaceInboxes", "spaceId", "syncServerUri", "res", "fetch", "URL", "method", "decoded", "Schema", "decodeUnknownSync", "ResponseListSpaceInboxesPublic", "json", "inboxes", "listPublicAccountInboxes", "accountAddress", "ResponseListAccountInboxesPublic", "getSpaceInbox", "inboxId", "ResponseSpaceInboxPublic", "inbox", "getAccountInbox", "ResponseAccountInboxPublic", "encryptInboxMessage", "message", "encryptionPublicKey", "ciphertext", "cryptoBoxSeal", "stringToUint8Array", "publicKey", "hexToBytes", "bytesToHex", "decryptInboxMessage", "encryptionPrivateKey", "privateKey", "cryptoBoxSealOpen", "uint8ArrayToString", "recoverSpaceInboxMessageSigner", "message", "spaceId", "inboxId", "signature", "Error", "signatureInstance", "secp256k1", "Signature", "fromCompact", "hex", "addRecoveryBit", "recovery", "signedMessage", "ciphertext", "authorAccountAddress", "recoverPublicKey", "sha256", "stringToUint8Array", "canonicalize", "toHex", "recoverAccountInboxMessageSigner", "accountAddress", "validateSpaceInboxMessage", "message", "inbox", "spaceId", "syncServerUri", "chain", "rpcUrl", "signature", "authPolicy", "console", "error", "authorAccountAddress", "signer", "recoverSpaceInboxMessageSigner", "inboxId", "verifiedIdentity", "getVerifiedIdentity", "isValid", "signaturePublicKey", "validateAccountInboxMessage", "accountAddress", "recoverAccountInboxMessageSigner", "prepareSpaceInboxMessage", "message", "spaceId", "inboxId", "encryptionPublicKey", "signaturePrivateKey", "authorAccountAddress", "ciphertext", "encryptInboxMessage", "signature", "messageToSign", "stringToUint8Array", "canonicalize", "signatureInstance", "secp256k1", "sign", "hexToBytes", "prehash", "hex", "toCompactHex", "recovery", "messageToSend", "undefined", "prepareAccountInboxMessage", "accountAddress", "recoverAccountInboxCreatorKey", "inbox", "messageToVerify", "stringToUint8Array", "canonicalize", "accountAddress", "inboxId", "encryptionPublicKey", "signature", "signatureInstance", "secp256k1", "Signature", "fromCompact", "hex", "addRecoveryBit", "recovery", "authorPublicKey", "recoverPublicKey", "sha256", "toHex", "recoverSpaceInboxCreatorKey", "event", "transaction", "author", "sendSpaceInboxMessage", "message", "spaceId", "inboxId", "encryptionPublicKey", "signaturePrivateKey", "authorAccountAddress", "syncServerUri", "messageToSend", "prepareSpaceInboxMessage", "res", "fetch", "URL", "method", "headers", "body", "JSON", "stringify", "ok", "Error", "sendAccountInboxMessage", "accountAddress", "prepareAccountInboxMessage", "SpaceInfoContent", "Struct", "name", "String", "decodeSpaceInfoContent", "decodeSync", "SpaceInfoContent", "decryptSpaceInfo", "spaceInfo", "secretKey", "decrypted", "decryptMessage", "nonceAndCiphertext", "hexToBytes", "spaceInfoContent", "JSON", "parse", "bytesToUtf8", "encodeSpaceInfoContent", "encodeSync", "SpaceInfoContent", "encryptAndSignSpaceInfo", "accountAddress", "name", "secretKey", "signaturePrivateKey", "spaceId", "infoContent", "encryptMessage", "message", "utf8ToBytes", "JSON", "stringify", "hexToBytes", "messageToSign", "stringToUint8Array", "canonicalize", "recoverySignature", "secp256k1", "sign", "prehash", "signature", "hex", "toCompactHex", "recovery", "Date", "Number", "Point", "Text", "String", "Number", "Checkbox", "Boolean", "Date", "Url", "URL", "Point", "transform", "Array", "strict", "decode", "str", "split", "map", "n", "globalThis", "encode", "points", "join", "Relation", "schema", "relationSchema", "Field", "select", "insert", "optional", "update", "Undefined"]
}
