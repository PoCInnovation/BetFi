import type { CreateResult, RelationParams } from '../types.js';
/**
 * Creates a relation.
 *
 * @example
 * ```ts
 * const { id, ops } = createRelation({
 *   id: relationId,
 *   fromEntity: entityId1,
 *   toEntity: entityId2,
 *   type: relationTypeId,
 *   toSpace: spaceId,
 *   position: 'position of the relation',
 *   entityId: entityId3, // optional and will be generated if not provided
 *   entityValues: {
 *     propertyId1: { value: 'value1' },
 *     propertyId2: { value: 'value2' },
 *   },
 *   entityRelations: {
 *     relationTypeId1: { to: entityId3, type: relationTypeId2 },
 *   },
 *   entityTypes: [typeId1, typeId2],
 *   entityName: 'name of the relation entity',
 *   entityDescription: 'description of the relation entity',
 *   entityCover: imageEntityId,
 * });
 * ```
 * @param params – {@link RelationParams}
 * @returns – {@link CreateResult}
 * @throws Will throw an error if any provided ID is invalid
 */
export declare const createRelation: ({ id: providedId, fromEntity, toEntity, position, toSpace, type, entityId: providedEntityId, entityName, entityDescription, entityCover, entityValues, entityRelations, entityTypes, }: RelationParams) => CreateResult;
//# sourceMappingURL=create-relation.d.ts.map