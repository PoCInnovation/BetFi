import { Brand } from 'effect';
export type Id = string & Brand.Brand<'Id'>;
export type IdBase64 = string & Brand.Brand<'IdBase64'>;
export declare const Id: Brand.Brand.Constructor<Id>;
export declare const IdBase64: Brand.Brand.Constructor<IdBase64>;
/**
 * Generates a globally unique knowledge graph identifier.
 *
 * @example
 * ```
 * import { ID } from '@graphprotocol/grc-20'
 *
 * const id = ID.generate();
 * console.log(id)
 * ```
 *
 * @returns v4 UUID
 */
export declare function generate(): Id;
export declare function isValid(id: string): boolean;
export declare function isValidBase64(id: string): boolean;
export declare function assertValid(id: string, sourceHint?: string): void;
export declare function toBytes(id: Id): Uint8Array;
export declare function fromBytes(bytes: Uint8Array): Id;
export declare function toBase64(id: Id): IdBase64;
export declare function fromBase64(id: IdBase64): Id;
//# sourceMappingURL=id.d.ts.map