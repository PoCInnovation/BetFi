// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file src/proto/ipfs.proto (package grc20, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * @generated from enum grc20.DataType
 */
export var DataType;
(function (DataType) {
    /**
     * @generated from enum value: TEXT = 0;
     */
    DataType[DataType["TEXT"] = 0] = "TEXT";
    /**
     * @generated from enum value: NUMBER = 1;
     */
    DataType[DataType["NUMBER"] = 1] = "NUMBER";
    /**
     * @generated from enum value: CHECKBOX = 2;
     */
    DataType[DataType["CHECKBOX"] = 2] = "CHECKBOX";
    /**
     * @generated from enum value: TIME = 3;
     */
    DataType[DataType["TIME"] = 3] = "TIME";
    /**
     * @generated from enum value: POINT = 4;
     */
    DataType[DataType["POINT"] = 4] = "POINT";
    /**
     * @generated from enum value: RELATION = 5;
     */
    DataType[DataType["RELATION"] = 5] = "RELATION";
})(DataType || (DataType = {}));
// Retrieve enum metadata with: proto3.getEnumType(DataType)
proto3.util.setEnumType(DataType, "grc20.DataType", [
    { no: 0, name: "TEXT" },
    { no: 1, name: "NUMBER" },
    { no: 2, name: "CHECKBOX" },
    { no: 3, name: "TIME" },
    { no: 4, name: "POINT" },
    { no: 5, name: "RELATION" },
]);
/**
 * @generated from message grc20.Edit
 */
export class Edit extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated grc20.Op ops = 3;
     */
    ops = [];
    /**
     * @generated from field: repeated bytes authors = 4;
     */
    authors = [];
    /**
     * @generated from field: optional bytes language = 5;
     */
    language;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Edit";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "ops", kind: "message", T: Op, repeated: true },
        { no: 4, name: "authors", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
        { no: 5, name: "language", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Edit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Edit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Edit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Edit, a, b);
    }
}
/**
 * @generated from message grc20.ImportEdit
 */
export class ImportEdit extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated grc20.Op ops = 3;
     */
    ops = [];
    /**
     * @generated from field: repeated bytes authors = 4;
     */
    authors = [];
    /**
     * @generated from field: bytes created_by = 5;
     */
    createdBy = new Uint8Array(0);
    /**
     * @generated from field: string created_at = 6;
     */
    createdAt = "";
    /**
     * @generated from field: bytes block_hash = 7;
     */
    blockHash = new Uint8Array(0);
    /**
     * @generated from field: string block_number = 8;
     */
    blockNumber = "";
    /**
     * @generated from field: bytes transaction_hash = 9;
     */
    transactionHash = new Uint8Array(0);
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.ImportEdit";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "ops", kind: "message", T: Op, repeated: true },
        { no: 4, name: "authors", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
        { no: 5, name: "created_by", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 6, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 8, name: "block_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "transaction_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new ImportEdit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImportEdit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImportEdit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ImportEdit, a, b);
    }
}
/**
 * @generated from message grc20.Import
 */
export class Import extends Message {
    /**
     * these strings are IPFS cids representing the import edit message
     *
     * @generated from field: repeated string edits = 1;
     */
    edits = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Import";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "edits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Import().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Import().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Import().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Import, a, b);
    }
}
/**
 * @generated from message grc20.File
 */
export class File extends Message {
    /**
     * @generated from field: string version = 1;
     */
    version = "";
    /**
     * @generated from oneof grc20.File.payload
     */
    payload = { case: undefined };
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.File";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "add_edit", kind: "message", T: Edit, oneof: "payload" },
        { no: 3, name: "import_space", kind: "message", T: Import, oneof: "payload" },
        { no: 4, name: "archive_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
    ]);
    static fromBinary(bytes, options) {
        return new File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new File().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(File, a, b);
    }
}
/**
 * @generated from message grc20.Op
 */
export class Op extends Message {
    /**
     * @generated from oneof grc20.Op.payload
     */
    payload = { case: undefined };
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Op";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "update_entity", kind: "message", T: Entity, oneof: "payload" },
        { no: 2, name: "create_relation", kind: "message", T: Relation, oneof: "payload" },
        { no: 3, name: "update_relation", kind: "message", T: RelationUpdate, oneof: "payload" },
        { no: 4, name: "delete_relation", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload" },
        { no: 5, name: "create_property", kind: "message", T: Property, oneof: "payload" },
        { no: 6, name: "unset_entity_values", kind: "message", T: UnsetEntityValues, oneof: "payload" },
        { no: 7, name: "unset_relation_fields", kind: "message", T: UnsetRelationFields, oneof: "payload" },
    ]);
    static fromBinary(bytes, options) {
        return new Op().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Op().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Op().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Op, a, b);
    }
}
/**
 * @generated from message grc20.Property
 */
export class Property extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: grc20.DataType data_type = 2;
     */
    dataType = DataType.TEXT;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Property";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "data_type", kind: "enum", T: proto3.getEnumType(DataType) },
    ]);
    static fromBinary(bytes, options) {
        return new Property().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Property().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Property().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Property, a, b);
    }
}
/**
 * @generated from message grc20.UnsetEntityValues
 */
export class UnsetEntityValues extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: repeated bytes properties = 2;
     */
    properties = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.UnsetEntityValues";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "properties", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new UnsetEntityValues().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnsetEntityValues().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnsetEntityValues().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnsetEntityValues, a, b);
    }
}
/**
 * @generated from message grc20.Relation
 */
export class Relation extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: bytes type = 2;
     */
    type = new Uint8Array(0);
    /**
     * @generated from field: bytes from_entity = 3;
     */
    fromEntity = new Uint8Array(0);
    /**
     * @generated from field: optional bytes from_space = 4;
     */
    fromSpace;
    /**
     * @generated from field: optional bytes from_version = 5;
     */
    fromVersion;
    /**
     * @generated from field: bytes to_entity = 6;
     */
    toEntity = new Uint8Array(0);
    /**
     * @generated from field: optional bytes to_space = 7;
     */
    toSpace;
    /**
     * @generated from field: optional bytes to_version = 8;
     */
    toVersion;
    /**
     * @generated from field: bytes entity = 9;
     */
    entity = new Uint8Array(0);
    /**
     * @generated from field: optional string position = 10;
     */
    position;
    /**
     * @generated from field: optional bool verified = 11;
     */
    verified;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Relation";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "type", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 3, name: "from_entity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 4, name: "from_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 5, name: "from_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 6, name: "to_entity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 7, name: "to_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 8, name: "to_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 9, name: "entity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 10, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 11, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Relation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Relation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Relation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Relation, a, b);
    }
}
/**
 * @generated from message grc20.RelationUpdate
 */
export class RelationUpdate extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: optional bytes from_space = 2;
     */
    fromSpace;
    /**
     * @generated from field: optional bytes from_version = 3;
     */
    fromVersion;
    /**
     * @generated from field: optional bytes to_space = 4;
     */
    toSpace;
    /**
     * @generated from field: optional bytes to_version = 5;
     */
    toVersion;
    /**
     * @generated from field: optional string position = 6;
     */
    position;
    /**
     * @generated from field: optional bool verified = 7;
     */
    verified;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.RelationUpdate";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "from_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 3, name: "from_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 4, name: "to_space", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 5, name: "to_version", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 6, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 7, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new RelationUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RelationUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RelationUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RelationUpdate, a, b);
    }
}
/**
 * @generated from message grc20.UnsetRelationFields
 */
export class UnsetRelationFields extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: optional bool from_space = 2;
     */
    fromSpace;
    /**
     * @generated from field: optional bool from_version = 3;
     */
    fromVersion;
    /**
     * @generated from field: optional bool to_space = 4;
     */
    toSpace;
    /**
     * @generated from field: optional bool to_version = 5;
     */
    toVersion;
    /**
     * @generated from field: optional bool position = 6;
     */
    position;
    /**
     * @generated from field: optional bool verified = 7;
     */
    verified;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.UnsetRelationFields";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "from_space", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 3, name: "from_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 4, name: "to_space", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 5, name: "to_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 6, name: "position", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 7, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new UnsetRelationFields().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnsetRelationFields().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnsetRelationFields().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnsetRelationFields, a, b);
    }
}
/**
 * @generated from message grc20.Entity
 */
export class Entity extends Message {
    /**
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * @generated from field: repeated grc20.Value values = 2;
     */
    values = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Entity";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "values", kind: "message", T: Value, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Entity().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Entity().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Entity().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Entity, a, b);
    }
}
/**
 * @generated from message grc20.Options
 */
export class Options extends Message {
    /**
     * @generated from oneof grc20.Options.value
     */
    value = { case: undefined };
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Options";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "text", kind: "message", T: TextOptions, oneof: "value" },
        { no: 2, name: "number", kind: "message", T: NumberOptions, oneof: "value" },
    ]);
    static fromBinary(bytes, options) {
        return new Options().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Options().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Options().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Options, a, b);
    }
}
/**
 * @generated from message grc20.Value
 */
export class Value extends Message {
    /**
     * @generated from field: bytes property = 1;
     */
    property = new Uint8Array(0);
    /**
     * @generated from field: string value = 2;
     */
    value = "";
    /**
     * @generated from field: optional grc20.Options options = 3;
     */
    options;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.Value";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "property", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "options", kind: "message", T: Options, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Value, a, b);
    }
}
/**
 * @generated from message grc20.TextOptions
 */
export class TextOptions extends Message {
    /**
     * @generated from field: optional bytes language = 1;
     */
    language;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.TextOptions";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "language", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new TextOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TextOptions, a, b);
    }
}
/**
 * @generated from message grc20.NumberOptions
 */
export class NumberOptions extends Message {
    /**
     * @generated from field: optional bytes unit = 1;
     */
    unit;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "grc20.NumberOptions";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "unit", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new NumberOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumberOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumberOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NumberOptions, a, b);
    }
}
//# sourceMappingURL=ipfs_pb.js.map