import { bytesToHex as nobleBytesToHex, hexToBytes as nobleHexToBytes } from '@noble/ciphers/utils';
import { ProjectivePoint } from '@noble/secp256k1';
import { publicKeyToAddress as viemPublicKeyToAddress } from 'viem/accounts';
export const bytesToHex = bytes => {
  return `0x${nobleBytesToHex(bytes)}`;
};
export const hexToBytes = hex => {
  return nobleHexToBytes(hex.slice(2));
};
function decompressPublicKey(compressedKey) {
  // Decompress the public key
  const point = ProjectivePoint.fromHex(compressedKey.slice(2));
  // Get the uncompressed public key
  const uncompressedKey = point.toRawBytes(false); // `false` = uncompressed format
  return bytesToHex(uncompressedKey);
}
export const publicKeyToAddress = publicKey => {
  const uncompressedKey = decompressPublicKey(publicKey);
  return viemPublicKeyToAddress(uncompressedKey);
};
//# sourceMappingURL=hexBytesAddressUtils.js.map