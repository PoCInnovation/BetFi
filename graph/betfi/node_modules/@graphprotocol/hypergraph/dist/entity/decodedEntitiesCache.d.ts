import type * as Schema from 'effect/Schema';
import type { AnyNoContext, Entity } from './types.js';
export type QueryEntry = {
    data: Array<Entity<AnyNoContext>>;
    listeners: Array<() => void>;
    isInvalidated: boolean;
    include: {
        [K in keyof Schema.Schema.Type<AnyNoContext>]?: Record<string, Record<string, never>>;
    };
};
export type DecodedEntitiesCacheEntry = {
    decoder: (data: unknown) => unknown;
    type: AnyNoContext;
    entities: Map<string, Entity<AnyNoContext>>;
    queries: Map<string, // instead of serializedQueryKey as string we could also have the actual params
    QueryEntry>;
    isInvalidated: boolean;
};
type DecodedEntitiesCache = Map<string, // type name
DecodedEntitiesCacheEntry>;
export declare const decodedEntitiesCache: DecodedEntitiesCache;
export {};
//# sourceMappingURL=decodedEntitiesCache.d.ts.map