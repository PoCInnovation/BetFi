import { Schema } from 'effect';
export type Storage = {
    getItem: (key: string) => string | null;
    setItem: (key: string, value: string) => void;
    removeItem: (key: string) => void;
};
export type SignMessage = (message: string) => Promise<string> | string;
export type GetAddress = () => Promise<string> | string;
export type Signer = {
    getAddress: GetAddress;
    signMessage: SignMessage;
};
export type IdentityKeys = {
    encryptionPublicKey: string;
    encryptionPrivateKey: string;
    signaturePublicKey: string;
    signaturePrivateKey: string;
};
export declare const KeysSchema: Schema.Struct<{
    encryptionPublicKey: typeof Schema.String;
    encryptionPrivateKey: typeof Schema.String;
    signaturePublicKey: typeof Schema.String;
    signaturePrivateKey: typeof Schema.String;
}>;
export type KeysSchema = Schema.Schema.Type<typeof KeysSchema>;
export type Identity = IdentityKeys & {
    accountAddress: string;
};
export type PublicIdentity = {
    accountAddress: string;
    encryptionPublicKey: string;
    signaturePublicKey: string;
};
export declare class InvalidIdentityError {
    readonly _tag = "InvalidIdentityError";
}
//# sourceMappingURL=types.d.ts.map