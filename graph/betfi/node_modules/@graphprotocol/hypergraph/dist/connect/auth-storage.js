import { Schema } from 'effect';
import { deserialize, serialize } from '../messages/index.js';
import { KeysSchema } from './types.js';
export const getEnv = () => {
  return 'dev';
};
export const buildAccountAddressStorageKey = () => `hypergraph:${getEnv()}:id`;
export const buildKeysStorageKey = walletAddress => walletAddress ? `hypergraph:${getEnv()}:keys:${walletAddress}` : '';
export const buildSessionTokenStorageKey = walletAddress => walletAddress ? `hypergraph:${getEnv()}:session-token:${walletAddress}` : '';
export const loadKeys = (storage, walletAddress) => {
  const accessKey = buildKeysStorageKey(walletAddress);
  const val = storage.getItem(accessKey);
  if (!val) {
    return null;
  }
  const deserialized = Schema.decodeUnknownSync(KeysSchema)(deserialize(val));
  return {
    encryptionPublicKey: deserialized.encryptionPublicKey,
    encryptionPrivateKey: deserialized.encryptionPrivateKey,
    signaturePublicKey: deserialized.signaturePublicKey,
    signaturePrivateKey: deserialized.signaturePrivateKey
  };
};
export const storeKeys = (storage, walletAddress, keys) => {
  const keysMsg = serialize(Schema.encodeSync(KeysSchema)(keys));
  storage.setItem(buildKeysStorageKey(walletAddress), keysMsg);
};
export const wipeKeys = (storage, walletAddress) => {
  // This will clear the conversation cache + the private keys
  storage.removeItem(buildKeysStorageKey(walletAddress));
};
export const loadSyncServerSessionToken = (storage, address) => {
  const key = buildSessionTokenStorageKey(address);
  const token = storage.getItem(key);
  return token;
};
export const storeSyncServerSessionToken = (storage, address, sessionToken) => {
  const key = buildSessionTokenStorageKey(address);
  storage.setItem(key, sessionToken);
};
export const wipeSyncServerSessionToken = (storage, walletAddress) => {
  storage.removeItem(buildSessionTokenStorageKey(walletAddress));
};
export const loadAccountAddress = storage => {
  return storage.getItem(buildAccountAddressStorageKey());
};
export const storeAccountAddress = (storage, accountId) => {
  storage.setItem(buildAccountAddressStorageKey(), accountId);
};
export const wipeAccountAddress = storage => {
  storage.removeItem(buildAccountAddressStorageKey());
};
export const wipeAllAuthData = (addressStorage, keysAndTokenStorage) => {
  const accountAddress = loadAccountAddress(addressStorage);
  wipeAccountAddress(addressStorage);
  if (accountAddress) {
    wipeKeys(keysAndTokenStorage, accountAddress);
    wipeSyncServerSessionToken(keysAndTokenStorage, accountAddress);
  }
};
//# sourceMappingURL=auth-storage.js.map