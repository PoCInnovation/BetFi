import * as Data from 'effect/Data';
import * as Schema from 'effect/Schema';
export const SignatureWithRecovery = /*#__PURE__*/Schema.Struct({
  hex: Schema.String,
  recovery: Schema.Number
});
export const ConnectAuthPayload = /*#__PURE__*/Schema.Struct({
  expiry: Schema.Number,
  encryptionPublicKey: Schema.String,
  appId: Schema.String
});
export const ConnectCallbackResult = /*#__PURE__*/Schema.Struct({
  appIdentityAddress: Schema.String,
  appIdentityAddressPrivateKey: Schema.String,
  accountAddress: Schema.String,
  permissionId: Schema.String,
  signaturePublicKey: Schema.String,
  signaturePrivateKey: Schema.String,
  encryptionPublicKey: Schema.String,
  encryptionPrivateKey: Schema.String,
  sessionToken: Schema.String,
  sessionTokenExpires: Schema.Date,
  privateSpaces: /*#__PURE__*/Schema.Array(/*#__PURE__*/Schema.Struct({
    id: Schema.String
  })),
  publicSpaces: /*#__PURE__*/Schema.Array(/*#__PURE__*/Schema.Struct({
    id: Schema.String
  }))
});
export const ConnectCallbackDecryptedData = /*#__PURE__*/Schema.Struct({
  ...ConnectCallbackResult.fields,
  sessionTokenExpires: Schema.Number,
  expiry: Schema.Number
});
export class FailedToParseConnectAuthUrl extends /*#__PURE__*/Data.TaggedError('FailedToParseConnectAuthUrl') {}
export class FailedToParseAuthCallbackUrl extends /*#__PURE__*/Data.TaggedError('FailedToParseAuthCallbackUrl') {}
//# sourceMappingURL=types.js.map