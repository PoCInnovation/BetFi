import { Entity } from '@graphprotocol/hypergraph';
import * as Schema from 'effect/Schema';
import { type ReactNode } from 'react';
export type HypergraphContext = {
    space: string;
};
export declare const HypergraphReactContext: import("react").Context<HypergraphContext | undefined>;
export declare function useHypergraphSpaceInternal(): HypergraphContext;
export declare function HypergraphSpaceProvider({ space, children }: {
    space: string;
    children: ReactNode;
}): import("react/jsx-runtime").JSX.Element;
export declare function useSpace(options: {
    space?: string;
    mode: 'private' | 'public';
}): {
    ready: boolean;
    name: string | undefined;
    id: string;
};
export declare function useCreateEntity<const S extends Entity.AnyNoContext>(type: S, options?: {
    space?: string;
}): (data: Readonly<Schema.Schema.Type<Entity.Insert<S>>>) => Entity.Entity<S>;
export declare function useUpdateEntity<const S extends Entity.AnyNoContext>(type: S, options?: {
    space?: string;
}): (id: string, data: Partial<Schema.Schema.Type<Entity.Update<S>>> extends infer T ? { [K in keyof T]: Partial<Schema.Schema.Type<Entity.Update<S>>>[K]; } : never) => Entity.Entity<S>;
export declare function useDeleteEntity(options?: {
    space?: string;
}): (id: string) => boolean;
export declare function useRemoveRelation(options?: {
    space?: string;
}): (relationId: string) => boolean;
export declare function useHardDeleteEntity(options?: {
    space?: string;
}): (id: string) => boolean;
type QueryParams<S extends Entity.AnyNoContext> = {
    space?: string | undefined;
    enabled: boolean;
    filter?: {
        [K in keyof Schema.Schema.Type<S>]?: Entity.EntityFieldFilter<Schema.Schema.Type<S>[K]>;
    } | undefined;
    include?: {
        [K in keyof Schema.Schema.Type<S>]?: Record<string, Record<string, never>>;
    } | undefined;
};
export declare function useQueryLocal<const S extends Entity.AnyNoContext>(type: S, params?: QueryParams<S>): {
    entities: Entity.Entity<S>[];
    deletedEntities: Entity.Entity<S>[];
};
export declare function useQueryEntity<const S extends Entity.AnyNoContext>(type: S, id: string, params?: {
    space?: string;
    include?: {
        [K in keyof Schema.Schema.Type<S>]?: Record<string, never>;
    };
}): Entity.Entity<S> | undefined;
export {};
//# sourceMappingURL=HypergraphSpaceContext.d.ts.map