import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { useState } from 'react';
import { IGNORED_PROPERTIES } from './constants.js';
export const EntityCard = ({
  entity,
  type
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const headerBgColor = type === 'new' ? 'bg-green-50' : 'bg-red-50';
  const borderColor = type === 'new' ? 'border-green-200' : 'border-red-200';
  const textColor = type === 'new' ? 'text-green-800' : 'text-red-800';
  return _jsxs("div", {
    className: `border rounded-sm ${borderColor} overflow-hidden text-xs`,
    children: [_jsxs("div", {
      className: `p-3 flex justify-between items-center cursor-pointer ${headerBgColor}`,
      onClick: () => setIsExpanded(!isExpanded),
      onKeyDown: e => {
        if (e.key === 'Enter' || e.key === ' ') {
          setIsExpanded(!isExpanded);
        }
      },
      children: [_jsxs("div", {
        className: `font-medium ${textColor}`,
        children: [entity.type || entity.constructor?.name, ' ', _jsxs("span", {
          className: "text-gray-500 font-normal",
          children: [" - ", entity.id]
        })]
      }), _jsx("button", {
        className: "text-gray-500",
        type: "button",
        children: isExpanded ? _jsxs("svg", {
          className: "w-4 h-4",
          viewBox: "0 0 24 24",
          fill: "none",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [_jsx("title", {
            children: "Collapse"
          }), _jsx("path", {
            d: "m18 15-6-6-6 6"
          })]
        }) : _jsxs("svg", {
          className: "w-4 h-4",
          viewBox: "0 0 24 24",
          fill: "none",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [_jsx("title", {
            children: "Expand"
          }), _jsx("path", {
            d: "m6 9 6 6 6-6"
          })]
        })
      })]
    }), isExpanded && _jsx("div", {
      className: "px-3 pt-0 border-t border-dashed border-gray-200 bg-white",
      children: _jsxs("table", {
        className: "w-full table-fixed",
        children: [_jsxs("colgroup", {
          children: [_jsx("col", {
            className: "w-1/3"
          }), _jsx("col", {
            className: "w-2/3"
          })]
        }), _jsx("tbody", {
          children: Object.entries(entity).filter(([key]) => !IGNORED_PROPERTIES.includes(key)).map(([key, value]) => _jsxs("tr", {
            className: "border-b border-gray-100 last:border-0",
            children: [_jsx("td", {
              className: "py-1.5 font-medium text-gray-600 pr-3",
              children: key.charAt(0).toUpperCase() + key.slice(1)
            }), _jsx("td", {
              className: "py-1.5",
              children: Array.isArray(value) && !value.every(v => typeof v === 'number') ? _jsx("ul", {
                children: value.map(({
                  id,
                  name
                }) => _jsxs("li", {
                  children: [name, " ", _jsxs("span", {
                    className: "text-gray-500",
                    children: ["- ", id]
                  })]
                }, id))
              }) : String(value)
            })]
          }, key))
        })]
      })
    })]
  });
};
//# sourceMappingURL=entity-card.js.map