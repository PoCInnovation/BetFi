import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { IGNORED_PROPERTIES } from './constants.js';
export const UpdatedEntityCard = ({
  entity
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  // Get all unique keys from both current and next, excluding ignored properties
  const allKeys = new Set([...Object.keys(entity.current), ...Object.keys(entity.new)].filter(key => !IGNORED_PROPERTIES.includes(key)));
  return _jsxs("div", {
    className: "border rounded-sm border-gray-200 overflow-hidden text-xs",
    children: [_jsxs("div", {
      className: "p-3 flex justify-between items-center cursor-pointer bg-gray-50",
      onClick: () => setIsExpanded(!isExpanded),
      onKeyDown: e => {
        if (e.key === 'Enter' || e.key === ' ') {
          setIsExpanded(!isExpanded);
        }
      },
      children: [_jsxs("div", {
        className: "font-medium",
        children: [entity.type || entity.constructor?.name, " - ", entity.id]
      }), _jsx("button", {
        className: "text-gray-500",
        type: "button",
        children: isExpanded ? _jsxs("svg", {
          className: "w-4 h-4",
          viewBox: "0 0 24 24",
          fill: "none",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [_jsx("title", {
            children: "Collapse"
          }), _jsx("path", {
            d: "m18 15-6-6-6 6"
          })]
        }) : _jsxs("svg", {
          className: "w-4 h-4",
          viewBox: "0 0 24 24",
          fill: "none",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          children: [_jsx("title", {
            children: "Expand"
          }), _jsx("path", {
            d: "m6 9 6 6 6-6"
          })]
        })
      })]
    }), isExpanded && _jsx("div", {
      className: "px-3 pt-1.5 border-t border-dashed border-gray-200",
      children: _jsxs("table", {
        className: "w-full table-fixed",
        children: [_jsxs("colgroup", {
          children: [_jsx("col", {
            className: "w-1/3"
          }), _jsx("col", {
            className: "w-1/3"
          }), _jsx("col", {
            className: "w-1/3"
          })]
        }), _jsx("thead", {
          children: _jsxs("tr", {
            className: "border-b border-gray-200",
            children: [_jsx("th", {
              className: "text-left py-1.5 font-medium text-gray-600"
            }), _jsx("th", {
              className: "text-left py-1.5 font-medium text-gray-600",
              children: "Current"
            }), _jsx("th", {
              className: "text-left py-1.5 font-medium text-gray-600",
              children: "New"
            })]
          })
        }), _jsx("tbody", {
          children: Array.from(allKeys).map(key => {
            const currentValue = entity.current[key];
            const newValue = entity.new[key];
            const diff = entity.diff[key];
            const hasChanged = diff !== undefined;
            const isChangedRelation = hasChanged && diff.type === 'relation';
            return _jsxs("tr", {
              className: "border-b border-gray-100 last:border-0",
              children: [_jsx("td", {
                className: "py-1.5 font-medium text-gray-600 pr-3",
                children: key.charAt(0).toUpperCase() + key.slice(1)
              }), _jsx("td", {
                className: "py-1.5",
                children: Array.isArray(currentValue) ? _jsx("ul", {
                  children: currentValue.map(({
                    id,
                    name
                  }) => _jsxs("li", {
                    className: isChangedRelation && diff.removedIds.includes(id) ? 'text-red-700' : '',
                    children: [name, " ", _jsxs("span", {
                      className: "text-gray-500",
                      children: ["- ", id]
                    })]
                  }, id))
                }) : _jsx("span", {
                  className: hasChanged && newValue === undefined ? 'text-red-700' : '',
                  children: String(currentValue)
                })
              }), _jsx("td", {
                className: "py-1.5 ",
                children: !hasChanged ? _jsx(_Fragment, {
                  children: Array.isArray(currentValue) ? _jsx("ul", {
                    children: currentValue.map(({
                      id,
                      name
                    }) => _jsxs("li", {
                      children: [name, " ", _jsxs("span", {
                        className: "text-gray-500",
                        children: ["- ", id]
                      })]
                    }, id))
                  }) : _jsx("span", {
                    children: String(currentValue)
                  })
                }) : Array.isArray(newValue) ? _jsx("ul", {
                  children: newValue.map(({
                    id,
                    name
                  }) => _jsxs("li", {
                    className: isChangedRelation && diff.addedIds.includes(id) ? 'text-green-700' : '',
                    children: [name, " ", _jsxs("span", {
                      className: "text-gray-500",
                      children: ["- ", id]
                    })]
                  }, id))
                }) : _jsx("span", {
                  className: "text-green-700",
                  children: String(newValue)
                })
              })]
            }, key);
          })
        })]
      })
    })]
  });
};
//# sourceMappingURL=updated-entity-card.js.map