import { type Entity } from '@graphprotocol/hypergraph';
import type * as Schema from 'effect/Schema';
type QueryParams<S extends Entity.AnyNoContext> = {
    mode: 'public' | 'private';
    filter?: {
        [K in keyof Schema.Schema.Type<S>]?: Entity.EntityFieldFilter<Schema.Schema.Type<S>[K]>;
    } | undefined;
    include?: {
        [K in keyof Schema.Schema.Type<S>]?: Record<string, Record<string, never>>;
    } | undefined;
    space?: string | undefined;
    first?: number | undefined;
};
export declare function useQuery<const S extends Entity.AnyNoContext>(type: S, params: QueryParams<S>): {
    data: Entity.Entity<S>[];
    deleted: Entity.Entity<S>[];
    preparePublish: () => undefined;
    invalidEntities: Record<string, unknown>[];
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    isPlaceholderData: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }>;
} | {
    data: Entity.Entity<S>[];
    deleted: Entity.Entity<S>[];
    preparePublish: () => undefined;
    invalidEntities: Record<string, unknown>[];
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    isPlaceholderData: false;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }>;
} | {
    data: Entity.Entity<S>[];
    deleted: Entity.Entity<S>[];
    preparePublish: () => undefined;
    invalidEntities: Record<string, unknown>[];
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }>;
} | {
    data: Entity.Entity<S>[];
    deleted: Entity.Entity<S>[];
    preparePublish: () => undefined;
    invalidEntities: Record<string, unknown>[];
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }>;
} | {
    data: Entity.Entity<S>[];
    deleted: Entity.Entity<S>[];
    preparePublish: () => undefined;
    invalidEntities: Record<string, unknown>[];
    isError: false;
    error: null;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    isPlaceholderData: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<{
        entities: {
            id: string;
            name: string;
            valuesList: {
                propertyId: string;
                value: string;
            }[];
            relationsList: {
                toEntity: {
                    id: string;
                    name: string;
                    valuesList: {
                        propertyId: string;
                        value: string;
                    }[];
                    relationsList: {
                        toEntity: {
                            id: string;
                            name: string;
                            valuesList: {
                                propertyId: string;
                                value: string;
                            }[];
                        };
                        typeId: string;
                    }[];
                };
                typeId: string;
            }[];
        }[];
    }>;
};
export {};
//# sourceMappingURL=use-query.d.ts.map